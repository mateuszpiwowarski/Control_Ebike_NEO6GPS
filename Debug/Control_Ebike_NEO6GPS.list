
Control_Ebike_NEO6GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080070c0  080070c0  000170c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074bc  080074bc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080074bc  080074bc  000174bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c4  080074c4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080074cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001d8  080076a0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  080076a0  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e113  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000248e  00000000  00000000  0002e35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  000307e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8a  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a34  00000000  00000000  0003200a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c22  00000000  00000000  00049a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fcad  00000000  00000000  0005a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a5c  00000000  00000000  000ea310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000eed6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070a8 	.word	0x080070a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080070a8 	.word	0x080070a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b9a6 	b.w	8000f90 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_GPIO_Init+0x4c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <strtoke+0x1a>
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <strtoke+0x60>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <strtoke+0x60>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <strtoke+0x26>
 8001006:	2300      	movs	r3, #0
 8001008:	e017      	b.n	800103a <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <strtoke+0x60>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <strtoke+0x60>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f004 f941 	bl	800529e <strpbrk>
 800101c:	4603      	mov	r3, r0
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <strtoke+0x60>)
 8001020:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <strtoke+0x60>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <strtoke+0x54>
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <strtoke+0x60>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <strtoke+0x60>)
 8001032:	600a      	str	r2, [r1, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8001038:	68fb      	ldr	r3, [r7, #12]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001f8 	.word	0x200001f8

08001048 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001056:	3301      	adds	r3, #1
 8001058:	425a      	negs	r2, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	bf58      	it	pl
 8001060:	4253      	negpl	r3, r2
 8001062:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	429a      	cmp	r2, r3
 800106e:	d02f      	beq.n	80010d0 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <NEO6_ReceiveUartChar+0xa0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b0d      	cmp	r3, #13
 8001078:	d114      	bne.n	80010a4 <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001080:	3301      	adds	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <NEO6_ReceiveUartChar+0xa0>)
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	b2d1      	uxtb	r1, r2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	711a      	strb	r2, [r3, #4]
 80010a2:	e015      	b.n	80010d0 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <NEO6_ReceiveUartChar+0xa0>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d010      	beq.n	80010d0 <NEO6_ReceiveUartChar+0x88>
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <NEO6_ReceiveUartChar+0xa0>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b0a      	cmp	r3, #10
 80010b6:	d00b      	beq.n	80010d0 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <NEO6_ReceiveUartChar+0xa0>)
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	b2d1      	uxtb	r1, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	460a      	mov	r2, r1
 80010ce:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4904      	ldr	r1, [pc, #16]	; (80010e8 <NEO6_ReceiveUartChar+0xa0>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 f9e8 	bl	80034ae <HAL_UART_Receive_IT>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001f4 	.word	0x200001f4

080010ec <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001100:	429a      	cmp	r2, r3
 8001102:	d102      	bne.n	800110a <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	e013      	b.n	8001132 <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001110:	3301      	adds	r3, #1
 8001112:	425a      	negs	r2, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	bf58      	it	pl
 800111a:	4253      	negpl	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	791b      	ldrb	r3, [r3, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f203 1307 	addw	r3, r3, #263	; 0x107
 800114c:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01e      	beq.n	8001196 <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001158:	e008      	b.n	800116c <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	2b0d      	cmp	r3, #13
 800115e:	d00e      	beq.n	800117e <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	7afa      	ldrb	r2, [r7, #11]
 8001164:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffbd 	bl	80010ec <NEO6_GetCharFromBuffer>
 8001172:	4603      	mov	r3, r0
 8001174:	72fb      	strb	r3, [r7, #11]
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1ee      	bne.n	800115a <NEO6_GetLineFromBuffer+0x1c>
 800117c:	e000      	b.n	8001180 <NEO6_GetLineFromBuffer+0x42>
				break;
 800117e:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800118c:	3b01      	subs	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 80011a8:	4997      	ldr	r1, [pc, #604]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff ff1a 	bl	8000fe4 <strtoke>
 80011b0:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d033      	beq.n	8001222 <NEO6_ParseGPRMC+0x82>
	{
		Temp = atoi(ParsePoiner);
 80011ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011bc:	f003 f8a5 	bl	800430a <atoi>
 80011c0:	4603      	mov	r3, r0
 80011c2:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Second = Temp % 100;
 80011c4:	6a3a      	ldr	r2, [r7, #32]
 80011c6:	4b91      	ldr	r3, [pc, #580]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 80011c8:	fba3 1302 	umull	r1, r3, r3, r2
 80011cc:	095b      	lsrs	r3, r3, #5
 80011ce:	2164      	movs	r1, #100	; 0x64
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	4a8a      	ldr	r2, [pc, #552]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	095a      	lsrs	r2, r3, #5
 80011e8:	4b88      	ldr	r3, [pc, #544]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 80011ea:	fba3 1302 	umull	r1, r3, r3, r2
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2164      	movs	r1, #100	; 0x64
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	4a83      	ldr	r2, [pc, #524]	; (8001410 <NEO6_ParseGPRMC+0x270>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	0b5a      	lsrs	r2, r3, #13
 800120a:	4b80      	ldr	r3, [pc, #512]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 800120c:	fba3 1302 	umull	r1, r3, r3, r2
 8001210:	095b      	lsrs	r3, r3, #5
 8001212:	2164      	movs	r1, #100	; 0x64
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 8001222:	4979      	ldr	r1, [pc, #484]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fedd 	bl	8000fe4 <strtoke>
 800122a:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 800122c:	4976      	ldr	r1, [pc, #472]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fed8 	bl	8000fe4 <strtoke>
 8001234:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d039      	beq.n	80012b2 <NEO6_ParseGPRMC+0x112>
	{
		float RawLatitude = atof(ParsePoiner);
 800123e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001240:	f003 f860 	bl	8004304 <atof>
 8001244:	ec53 2b10 	vmov	r2, r3, d0
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fc9e 	bl	8000b8c <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	61fb      	str	r3, [r7, #28]
		int DegLat = (int)(RawLatitude / 100);
 8001254:	ed97 7a07 	vldr	s14, [r7, #28]
 8001258:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8001414 <NEO6_ParseGPRMC+0x274>
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001264:	ee17 3a90 	vmov	r3, s15
 8001268:	61bb      	str	r3, [r7, #24]
		float MinLat = RawLatitude - (DegLat * 100);
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2264      	movs	r2, #100	; 0x64
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127a:	ed97 7a07 	vldr	s14, [r7, #28]
 800127e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001282:	edc7 7a05 	vstr	s15, [r7, #20]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	edd7 6a05 	vldr	s13, [r7, #20]
 8001294:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8001418 <NEO6_ParseGPRMC+0x278>
 8001298:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a0:	ee17 0a90 	vmov	r0, s15
 80012a4:	f7ff f960 	bl	8000568 <__aeabi_f2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80012b2:	4955      	ldr	r1, [pc, #340]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fe95 	bl	8000fe4 <strtoke>
 80012ba:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <NEO6_ParseGPRMC+0x12e>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 80012ce:	494e      	ldr	r1, [pc, #312]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fe87 	bl	8000fe4 <strtoke>
 80012d6:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d039      	beq.n	8001354 <NEO6_ParseGPRMC+0x1b4>
	{
		float RawLongitude = atof(ParsePoiner);
 80012e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e2:	f003 f80f 	bl	8004304 <atof>
 80012e6:	ec53 2b10 	vmov	r2, r3, d0
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fc4d 	bl	8000b8c <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	613b      	str	r3, [r7, #16]
		int DegLon = (int)(RawLongitude / 100);
 80012f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80012fa:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001414 <NEO6_ParseGPRMC+0x274>
 80012fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001306:	ee17 3a90 	vmov	r3, s15
 800130a:	60fb      	str	r3, [r7, #12]
		float MinLon = RawLongitude - (DegLon * 100);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2264      	movs	r2, #100	; 0x64
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	edc7 7a02 	vstr	s15, [r7, #8]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	edd7 6a02 	vldr	s13, [r7, #8]
 8001336:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8001418 <NEO6_ParseGPRMC+0x278>
 800133a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f90f 	bl	8000568 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001354:	492c      	ldr	r1, [pc, #176]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fe44 	bl	8000fe4 <strtoke>
 800135c:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <NEO6_ParseGPRMC+0x1d0>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8001370:	4925      	ldr	r1, [pc, #148]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fe36 	bl	8000fe4 <strtoke>
 8001378:	6278      	str	r0, [r7, #36]	; 0x24
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 800137a:	4923      	ldr	r1, [pc, #140]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fe31 	bl	8000fe4 <strtoke>
 8001382:	6278      	str	r0, [r7, #36]	; 0x24
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8001384:	4920      	ldr	r1, [pc, #128]	; (8001408 <NEO6_ParseGPRMC+0x268>)
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fe2c 	bl	8000fe4 <strtoke>
 800138c:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d033      	beq.n	80013fe <NEO6_ParseGPRMC+0x25e>
	{
		Temp = atoi(ParsePoiner);
 8001396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001398:	f002 ffb7 	bl	800430a <atoi>
 800139c:	4603      	mov	r3, r0
 800139e:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Year = Temp % 100;
 80013a0:	6a3a      	ldr	r2, [r7, #32]
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 80013a4:	fba3 1302 	umull	r1, r3, r3, r2
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	2164      	movs	r1, #100	; 0x64
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	095a      	lsrs	r2, r3, #5
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 80013c6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2164      	movs	r1, #100	; 0x64
 80013ce:	fb01 f303 	mul.w	r3, r1, r3
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <NEO6_ParseGPRMC+0x270>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0b5a      	lsrs	r2, r3, #13
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <NEO6_ParseGPRMC+0x26c>)
 80013e8:	fba3 1302 	umull	r1, r3, r3, r2
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	2164      	movs	r1, #100	; 0x64
 80013f0:	fb01 f303 	mul.w	r3, r1, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	080070c0 	.word	0x080070c0
 800140c:	51eb851f 	.word	0x51eb851f
 8001410:	d1b71759 	.word	0xd1b71759
 8001414:	42c80000 	.word	0x42c80000
 8001418:	42700000 	.word	0x42700000

0800141c <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8001424:	4921      	ldr	r1, [pc, #132]	; (80014ac <NEO6_ParseGPVTG+0x90>)
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fddc 	bl	8000fe4 <strtoke>
 800142c:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800142e:	491f      	ldr	r1, [pc, #124]	; (80014ac <NEO6_ParseGPVTG+0x90>)
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff fdd7 	bl	8000fe4 <strtoke>
 8001436:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8001438:	491c      	ldr	r1, [pc, #112]	; (80014ac <NEO6_ParseGPVTG+0x90>)
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fdd2 	bl	8000fe4 <strtoke>
 8001440:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001442:	491a      	ldr	r1, [pc, #104]	; (80014ac <NEO6_ParseGPVTG+0x90>)
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fdcd 	bl	8000fe4 <strtoke>
 800144a:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 800144c:	4917      	ldr	r1, [pc, #92]	; (80014ac <NEO6_ParseGPVTG+0x90>)
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff fdc8 	bl	8000fe4 <strtoke>
 8001454:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d009      	beq.n	8001472 <NEO6_ParseGPVTG+0x56>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f002 ff50 	bl	8004304 <atof>
 8001464:	eeb0 7a40 	vmov.f32	s14, s0
 8001468:	eef0 7a60 	vmov.f32	s15, s1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
	}
	ParsePoiner = strtoke(NULL, ",");
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <NEO6_ParseGPVTG+0x90>)
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fdb5 	bl	8000fe4 <strtoke>
 800147a:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 800147c:	490b      	ldr	r1, [pc, #44]	; (80014ac <NEO6_ParseGPVTG+0x90>)
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fdb0 	bl	8000fe4 <strtoke>
 8001484:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <NEO6_ParseGPVTG+0x86>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f002 ff38 	bl	8004304 <atof>
 8001494:	eeb0 7a40 	vmov.f32	s14, s0
 8001498:	eef0 7a60 	vmov.f32	s15, s1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
	}
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	080070c0 	.word	0x080070c0

080014b0 <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;


	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 80014b8:	4969      	ldr	r1, [pc, #420]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff fd92 	bl	8000fe4 <strtoke>
 80014c0:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80014c2:	4967      	ldr	r1, [pc, #412]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fd8d 	bl	8000fe4 <strtoke>
 80014ca:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d039      	beq.n	8001548 <NEO6_ParseGPGGA+0x98>
	{
		float RawLatitude = atof(ParsePoiner);
 80014d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014d6:	f002 ff15 	bl	8004304 <atof>
 80014da:	ec53 2b10 	vmov	r2, r3, d0
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fb53 	bl	8000b8c <__aeabi_d2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	623b      	str	r3, [r7, #32]
		int DegLat = (int)(RawLatitude / 100);
 80014ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ee:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001664 <NEO6_ParseGPGGA+0x1b4>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fa:	ee17 3a90 	vmov	r3, s15
 80014fe:	61fb      	str	r3, [r7, #28]
		float MinLat = RawLatitude - (DegLat * 100);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2264      	movs	r2, #100	; 0x64
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001510:	ed97 7a08 	vldr	s14, [r7, #32]
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	edc7 7a06 	vstr	s15, [r7, #24]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001526:	edd7 6a06 	vldr	s13, [r7, #24]
 800152a:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8001668 <NEO6_ParseGPGGA+0x1b8>
 800152e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	ee17 0a90 	vmov	r0, s15
 800153a:	f7ff f815 	bl	8000568 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8001548:	4945      	ldr	r1, [pc, #276]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fd4a 	bl	8000fe4 <strtoke>
 8001550:	6278      	str	r0, [r7, #36]	; 0x24
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8001552:	4943      	ldr	r1, [pc, #268]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff fd45 	bl	8000fe4 <strtoke>
 800155a:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d039      	beq.n	80015d8 <NEO6_ParseGPGGA+0x128>
	{
		float RawLongitude = atof(ParsePoiner);
 8001564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001566:	f002 fecd 	bl	8004304 <atof>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb0b 	bl	8000b8c <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	617b      	str	r3, [r7, #20]
		int DegLon = (int)(RawLongitude / 100);
 800157a:	ed97 7a05 	vldr	s14, [r7, #20]
 800157e:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001664 <NEO6_ParseGPGGA+0x1b4>
 8001582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158a:	ee17 3a90 	vmov	r3, s15
 800158e:	613b      	str	r3, [r7, #16]
		float MinLon = RawLongitude - (DegLon * 100);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2264      	movs	r2, #100	; 0x64
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80015a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a8:	edc7 7a03 	vstr	s15, [r7, #12]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80015ba:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8001668 <NEO6_ParseGPGGA+0x1b8>
 80015be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c6:	ee17 0a90 	vmov	r0, s15
 80015ca:	f7fe ffcd 	bl	8000568 <__aeabi_f2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 80015d8:	4921      	ldr	r1, [pc, #132]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff fd02 	bl	8000fe4 <strtoke>
 80015e0:	6278      	str	r0, [r7, #36]	; 0x24
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 80015e2:	491f      	ldr	r1, [pc, #124]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff fcfd 	bl	8000fe4 <strtoke>
 80015ea:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <NEO6_ParseGPGGA+0x154>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 80015f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015f6:	f002 fe88 	bl	800430a <atoi>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8001604:	4916      	ldr	r1, [pc, #88]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fcec 	bl	8000fe4 <strtoke>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <NEO6_ParseGPGGA+0x176>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8001616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001618:	f002 fe77 	bl	800430a <atoi>
 800161c:	4603      	mov	r3, r0
 800161e:	b2da      	uxtb	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fcdb 	bl	8000fe4 <strtoke>
 800162e:	6278      	str	r0, [r7, #36]	; 0x24
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8001630:	490b      	ldr	r1, [pc, #44]	; (8001660 <NEO6_ParseGPGGA+0x1b0>)
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fcd6 	bl	8000fe4 <strtoke>
 8001638:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <NEO6_ParseGPGGA+0x1a6>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8001642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001644:	f002 fe5e 	bl	8004304 <atof>
 8001648:	eeb0 7a40 	vmov.f32	s14, s0
 800164c:	eef0 7a60 	vmov.f32	s15, s1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
	}
}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	080070c0 	.word	0x080070c0
 8001664:	42c80000 	.word	0x42c80000
 8001668:	42700000 	.word	0x42700000

0800166c <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8001674:	4930      	ldr	r1, [pc, #192]	; (8001738 <NEO6_ParseGPGSA+0xcc>)
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fcb4 	bl	8000fe4 <strtoke>
 800167c:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 800167e:	492e      	ldr	r1, [pc, #184]	; (8001738 <NEO6_ParseGPGSA+0xcc>)
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fcaf 	bl	8000fe4 <strtoke>
 8001686:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f002 fe3a 	bl	800430a <atoi>
 8001696:	4603      	mov	r3, r0
 8001698:	b2da      	uxtb	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e007      	b.n	80016b6 <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 80016a6:	4924      	ldr	r1, [pc, #144]	; (8001738 <NEO6_ParseGPGSA+0xcc>)
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fc9b 	bl	8000fe4 <strtoke>
 80016ae:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	3301      	adds	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b0b      	cmp	r3, #11
 80016ba:	d9f4      	bls.n	80016a6 <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 80016bc:	491e      	ldr	r1, [pc, #120]	; (8001738 <NEO6_ParseGPGSA+0xcc>)
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff fc90 	bl	8000fe4 <strtoke>
 80016c4:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <NEO6_ParseGPGSA+0x76>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 80016ce:	68b8      	ldr	r0, [r7, #8]
 80016d0:	f002 fe18 	bl	8004304 <atof>
 80016d4:	eeb0 7a40 	vmov.f32	s14, s0
 80016d8:	eef0 7a60 	vmov.f32	s15, s1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	ed83 7b7a 	vstr	d7, [r3, #488]	; 0x1e8
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 80016e2:	4915      	ldr	r1, [pc, #84]	; (8001738 <NEO6_ParseGPGSA+0xcc>)
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fc7d 	bl	8000fe4 <strtoke>
 80016ea:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d009      	beq.n	8001708 <NEO6_ParseGPGSA+0x9c>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f002 fe05 	bl	8004304 <atof>
 80016fa:	eeb0 7a40 	vmov.f32	s14, s0
 80016fe:	eef0 7a60 	vmov.f32	s15, s1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8001708:	490b      	ldr	r1, [pc, #44]	; (8001738 <NEO6_ParseGPGSA+0xcc>)
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fc6a 	bl	8000fe4 <strtoke>
 8001710:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <NEO6_ParseGPGSA+0xc2>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 800171a:	68b8      	ldr	r0, [r7, #8]
 800171c:	f002 fdf2 	bl	8004304 <atof>
 8001720:	eeb0 7a40 	vmov.f32	s14, s0
 8001724:	eef0 7a60 	vmov.f32	s15, s1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8
	}
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	080070c0 	.word	0x080070c0

0800173c <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f203 1307 	addw	r3, r3, #263	; 0x107
 800174a:	491a      	ldr	r1, [pc, #104]	; (80017b4 <NEO6_ParseLine+0x78>)
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fc49 	bl	8000fe4 <strtoke>
 8001752:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8001754:	4918      	ldr	r1, [pc, #96]	; (80017b8 <NEO6_ParseLine+0x7c>)
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7fe fd42 	bl	80001e0 <strcmp>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <NEO6_ParseLine+0x2e>
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd1c 	bl	80011a0 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 8001768:	e01f      	b.n	80017aa <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <NEO6_ParseLine+0x80>)
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7fe fd37 	bl	80001e0 <strcmp>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <NEO6_ParseLine+0x44>
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fe4f 	bl	800141c <NEO6_ParseGPVTG>
}
 800177e:	e014      	b.n	80017aa <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 8001780:	490f      	ldr	r1, [pc, #60]	; (80017c0 <NEO6_ParseLine+0x84>)
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7fe fd2c 	bl	80001e0 <strcmp>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <NEO6_ParseLine+0x5a>
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe8e 	bl	80014b0 <NEO6_ParseGPGGA>
}
 8001794:	e009      	b.n	80017aa <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 8001796:	490b      	ldr	r1, [pc, #44]	; (80017c4 <NEO6_ParseLine+0x88>)
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7fe fd21 	bl	80001e0 <strcmp>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <NEO6_ParseLine+0x6e>
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff61 	bl	800166c <NEO6_ParseGPGSA>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	080070c0 	.word	0x080070c0
 80017b8:	080070c4 	.word	0x080070c4
 80017bc:	080070cc 	.word	0x080070cc
 80017c0:	080070d4 	.word	0x080070d4
 80017c4:	080070dc 	.word	0x080070dc

080017c8 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
    	if(GpsStateHandler->UartBufferLines)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <NEO6_Task+0x1e>
    	{
        NEO6_GetLineFromBuffer(GpsStateHandler);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fca2 	bl	800113e <NEO6_GetLineFromBuffer>
        NEO6_ParseLine(GpsStateHandler);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff9e 	bl	800173c <NEO6_ParseLine>
    	}
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <NEO6_Init>:
double NEO6_GetTotalDistance(NEO6_State *GpsStateHandler) {
    return GpsStateHandler->total_distance;
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2230      	movs	r2, #48	; 0x30
 8001872:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2230      	movs	r2, #48	; 0x30
 8001888:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->last_latitude = 0;
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
	GpsStateHandler->last_longitude = 0;
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->total_distance = 0;
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

	GpsStateHandler->SpeedKilometers = 0;
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->SpeedKnots = 0;
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0

	GpsStateHandler->SatelitesNumber = 0;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	GpsStateHandler->Quality = 0;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	GpsStateHandler->Dop = 0;
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
	GpsStateHandler->Hdop = 0;
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
	GpsStateHandler->Vdop = 0;
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	4904      	ldr	r1, [pc, #16]	; (8001924 <NEO6_Init+0x11c>)
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fdca 	bl	80034ae <HAL_UART_Receive_IT>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200001f4 	.word	0x200001f4

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f000 fae2 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f816 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001934:	f7ff fb2e 	bl	8000f94 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001938:	f000 f9c6 	bl	8001cc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800193c:	f000 fa36 	bl	8001dac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  NEO6_Init(&GpsState, &huart1);
 8001940:	4905      	ldr	r1, [pc, #20]	; (8001958 <main+0x30>)
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <main+0x34>)
 8001944:	f7ff ff60 	bl	8001808 <NEO6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NEO6_Task(&GpsState);
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <main+0x34>)
 800194a:	f7ff ff4a 	bl	80017e2 <NEO6_Task>

	  NEO6_IsFix(&GpsState);
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <main+0x34>)
 8001950:	f7ff ff3a 	bl	80017c8 <NEO6_IsFix>
	  NEO6_Task(&GpsState);
 8001954:	e7f8      	b.n	8001948 <main+0x20>
 8001956:	bf00      	nop
 8001958:	2000044c 	.word	0x2000044c
 800195c:	20000200 	.word	0x20000200

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	; 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2230      	movs	r2, #48	; 0x30
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fc7b 	bl	800526a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <SystemClock_Config+0xc8>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <SystemClock_Config+0xc8>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <SystemClock_Config+0xc8>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <SystemClock_Config+0xcc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <SystemClock_Config+0xcc>)
 80019aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <SystemClock_Config+0xcc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019bc:	2302      	movs	r3, #2
 80019be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c4:	2310      	movs	r3, #16
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	2302      	movs	r3, #2
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019cc:	2300      	movs	r3, #0
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019d0:	2308      	movs	r3, #8
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019d4:	2364      	movs	r3, #100	; 0x64
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d8:	2302      	movs	r3, #2
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019dc:	2304      	movs	r3, #4
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fe1f 	bl	8002628 <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f0:	f000 f830 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2103      	movs	r1, #3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 f881 	bl	8002b18 <HAL_RCC_ClockConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a1c:	f000 f81a 	bl	8001a54 <Error_Handler>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3750      	adds	r7, #80	; 0x50
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000

08001a30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if(huart == GpsState.neo6_huart)
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_UART_RxCpltCallback+0x20>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d102      	bne.n	8001a48 <HAL_UART_RxCpltCallback+0x18>
	{
		NEO6_ReceiveUartChar(&GpsState);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <HAL_UART_RxCpltCallback+0x20>)
 8001a44:	f7ff fb00 	bl	8001048 <NEO6_ReceiveUartChar>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000200 	.word	0x20000200

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_MspInit+0x4c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 fa4c 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <USART1_IRQHandler+0x10>)
 8001b0a:	f001 fd01 	bl	8003510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000044c 	.word	0x2000044c

08001b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_kill>:

int _kill(int pid, int sig)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b32:	f003 fc15 	bl	8005360 <__errno>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2216      	movs	r2, #22
 8001b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_exit>:

void _exit (int status)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffe7 	bl	8001b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b5a:	e7fe      	b.n	8001b5a <_exit+0x12>

08001b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e00a      	b.n	8001b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b6e:	f3af 8000 	nop.w
 8001b72:	4601      	mov	r1, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf0      	blt.n	8001b6e <_read+0x12>
  }

  return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x12>
  }
  return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f003 fb7a 	bl	8005360 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20020000 	.word	0x20020000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	20000400 	.word	0x20000400
 8001ca0:	200005e0 	.word	0x200005e0

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001ce6:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <MX_TIM1_Init+0x9c>)
 8001ce8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001cec:	2263      	movs	r2, #99	; 0x63
 8001cee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d12:	f001 f8e1 	bl	8002ed8 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d1c:	f7ff fe9a 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d2e:	f001 f922 	bl	8002f76 <HAL_TIM_ConfigClockSource>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d38:	f7ff fe8c 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d4a:	f001 faf5 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d54:	f7ff fe7e 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000404 	.word	0x20000404
 8001d64:	40010000 	.word	0x40010000

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10d      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_TIM_Base_MspInit+0x40>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_TIM_Base_MspInit+0x40>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_TIM_Base_MspInit+0x40>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40023800 	.word	0x40023800

08001dac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <MX_USART1_UART_Init+0x50>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001db8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001de4:	f001 fb16 	bl	8003414 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dee:	f7ff fe31 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000044c 	.word	0x2000044c
 8001dfc:	40011000 	.word	0x40011000

08001e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_UART_MspInit+0x94>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d134      	bne.n	8001e8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_UART_MspInit+0x98>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_UART_MspInit+0x98>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_UART_MspInit+0x98>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_UART_MspInit+0x98>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_UART_MspInit+0x98>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_UART_MspInit+0x98>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <HAL_UART_MspInit+0x9c>)
 8001e78:	f000 fa52 	bl	8002320 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2025      	movs	r0, #37	; 0x25
 8001e82:	f000 f984 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e86:	2025      	movs	r0, #37	; 0x25
 8001e88:	f000 f99d 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	; 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40011000 	.word	0x40011000
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea6:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	; (8001eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eca:	f7ff feeb 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f003 fa4d 	bl	800536c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7ff fd29 	bl	8001928 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ee4:	080074cc 	.word	0x080074cc
  ldr r2, =_sbss
 8001ee8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001eec:	200005e0 	.word	0x200005e0

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_Init+0x40>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_Init+0x40>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_Init+0x40>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 f92b 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f000 f808 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7ff fd9a 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f943 	bl	80021e2 <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 f90b 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000008 	.word	0x20000008
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000490 	.word	0x20000490

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000490 	.word	0x20000490

08001fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0b      	blt.n	8002066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4907      	ldr	r1, [pc, #28]	; (8002074 <__NVIC_EnableIRQ+0x38>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	; (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	; (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f7ff ff8e 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff29 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff3e 	bl	8002020 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff8e 	bl	80020cc <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5d 	bl	8002078 <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff31 	bl	800203c <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa2 	bl	8002134 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff feda 	bl	8001fc0 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d008      	beq.n	800222c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e052      	b.n	80022d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0216 	bic.w	r2, r2, #22
 800223a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <HAL_DMA_Abort+0x62>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0208 	bic.w	r2, r2, #8
 800226a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227c:	e013      	b.n	80022a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800227e:	f7ff fe9f 	bl	8001fc0 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b05      	cmp	r3, #5
 800228a:	d90c      	bls.n	80022a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e015      	b.n	80022d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e4      	bne.n	800227e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	223f      	movs	r2, #63	; 0x3f
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d004      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e00c      	b.n	8002312 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2205      	movs	r2, #5
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e159      	b.n	80025f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	f040 8148 	bne.w	80025ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d005      	beq.n	8002372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236e:	2b02      	cmp	r3, #2
 8002370:	d130      	bne.n	80023d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a8:	2201      	movs	r2, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 0201 	and.w	r2, r3, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d017      	beq.n	8002410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d123      	bne.n	8002464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0203 	and.w	r2, r3, #3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a2 	beq.w	80025ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b57      	ldr	r3, [pc, #348]	; (8002608 <HAL_GPIO_Init+0x2e8>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a56      	ldr	r2, [pc, #344]	; (8002608 <HAL_GPIO_Init+0x2e8>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b54      	ldr	r3, [pc, #336]	; (8002608 <HAL_GPIO_Init+0x2e8>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c2:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_GPIO_Init+0x2ec>)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a49      	ldr	r2, [pc, #292]	; (8002610 <HAL_GPIO_Init+0x2f0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x202>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a48      	ldr	r2, [pc, #288]	; (8002614 <HAL_GPIO_Init+0x2f4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x1fe>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a47      	ldr	r2, [pc, #284]	; (8002618 <HAL_GPIO_Init+0x2f8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x1fa>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a46      	ldr	r2, [pc, #280]	; (800261c <HAL_GPIO_Init+0x2fc>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x1f6>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a45      	ldr	r2, [pc, #276]	; (8002620 <HAL_GPIO_Init+0x300>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x1f2>
 800250e:	2304      	movs	r3, #4
 8002510:	e008      	b.n	8002524 <HAL_GPIO_Init+0x204>
 8002512:	2307      	movs	r3, #7
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x204>
 8002516:	2303      	movs	r3, #3
 8002518:	e004      	b.n	8002524 <HAL_GPIO_Init+0x204>
 800251a:	2302      	movs	r3, #2
 800251c:	e002      	b.n	8002524 <HAL_GPIO_Init+0x204>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x204>
 8002522:	2300      	movs	r3, #0
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f002 0203 	and.w	r2, r2, #3
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4093      	lsls	r3, r2
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002534:	4935      	ldr	r1, [pc, #212]	; (800260c <HAL_GPIO_Init+0x2ec>)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_GPIO_Init+0x304>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002566:	4a2f      	ldr	r2, [pc, #188]	; (8002624 <HAL_GPIO_Init+0x304>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_GPIO_Init+0x304>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <HAL_GPIO_Init+0x304>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_GPIO_Init+0x304>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ba:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <HAL_GPIO_Init+0x304>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_GPIO_Init+0x304>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_GPIO_Init+0x304>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b0f      	cmp	r3, #15
 80025f4:	f67f aea2 	bls.w	800233c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40013800 	.word	0x40013800
 8002610:	40020000 	.word	0x40020000
 8002614:	40020400 	.word	0x40020400
 8002618:	40020800 	.word	0x40020800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021000 	.word	0x40021000
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e267      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d075      	beq.n	8002732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002646:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00c      	beq.n	800266c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b85      	ldr	r3, [pc, #532]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265a:	2b08      	cmp	r3, #8
 800265c:	d112      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b82      	ldr	r3, [pc, #520]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266a:	d10b      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05b      	beq.n	8002730 <HAL_RCC_OscConfig+0x108>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d157      	bne.n	8002730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e242      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x74>
 800268e:	4b76      	ldr	r3, [pc, #472]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a75      	ldr	r2, [pc, #468]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b70      	ldr	r3, [pc, #448]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6f      	ldr	r2, [pc, #444]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6c      	ldr	r2, [pc, #432]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 80026c0:	4b69      	ldr	r3, [pc, #420]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a68      	ldr	r2, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fc6e 	bl	8001fc0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fc6a 	bl	8001fc0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e207      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xc0>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fc5a 	bl	8001fc0 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff fc56 	bl	8001fc0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1f3      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b51      	ldr	r3, [pc, #324]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0xe8>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273e:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b44      	ldr	r3, [pc, #272]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b41      	ldr	r3, [pc, #260]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1c7      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4937      	ldr	r1, [pc, #220]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_OscConfig+0x244>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff fc0f 	bl	8001fc0 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a6:	f7ff fc0b 	bl	8001fc0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1a8      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4925      	ldr	r1, [pc, #148]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_OscConfig+0x244>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7ff fbee 	bl	8001fc0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e8:	f7ff fbea 	bl	8001fc0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e187      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d036      	beq.n	8002880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_RCC_OscConfig+0x248>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7ff fbce 	bl	8001fc0 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002828:	f7ff fbca 	bl	8001fc0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e167      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x240>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x200>
 8002846:	e01b      	b.n	8002880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_OscConfig+0x248>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7ff fbb7 	bl	8001fc0 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	e00e      	b.n	8002874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002856:	f7ff fbb3 	bl	8001fc0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d907      	bls.n	8002874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e150      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	42470000 	.word	0x42470000
 8002870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ea      	bne.n	8002856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8097 	beq.w	80029bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002892:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a7c      	ldr	r2, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b7a      	ldr	r3, [pc, #488]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	4b77      	ldr	r3, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ca:	4b74      	ldr	r3, [pc, #464]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a73      	ldr	r2, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7ff fb73 	bl	8001fc0 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7ff fb6f 	bl	8001fc0 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e10c      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x2ea>
 8002904:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	e01c      	b.n	800294c <HAL_RCC_OscConfig+0x324>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x30c>
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a5b      	ldr	r2, [pc, #364]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0x324>
 8002934:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a57      	ldr	r2, [pc, #348]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	4a54      	ldr	r2, [pc, #336]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7ff fb34 	bl	8001fc0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7ff fb30 	bl	8001fc0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0cb      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ee      	beq.n	800295c <HAL_RCC_OscConfig+0x334>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7ff fb1e 	bl	8001fc0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7ff fb1a 	bl	8001fc0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0b5      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1ee      	bne.n	8002988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a1 	beq.w	8002b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d05c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d141      	bne.n	8002a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff faee 	bl	8001fc0 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7ff faea 	bl	8001fc0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e087      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	491b      	ldr	r1, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCC_OscConfig+0x478>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7ff fac3 	bl	8001fc0 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7ff fabf 	bl	8001fc0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e05c      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x416>
 8002a5c:	e054      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x478>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff faac 	bl	8001fc0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff faa8 	bl	8001fc0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e045      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x444>
 8002a8a:	e03d      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e038      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x4ec>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d028      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d121      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11a      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d111      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	3b01      	subs	r3, #1
 8002aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0cc      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d90c      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a58      	ldr	r2, [pc, #352]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d044      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d119      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e067      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4934      	ldr	r1, [pc, #208]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c08:	f7ff f9da 	bl	8001fc0 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7ff f9d6 	bl	8001fc0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e04f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d20c      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490a      	ldr	r1, [pc, #40]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f93a 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	080070e4 	.word	0x080070e4
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b090      	sub	sp, #64	; 0x40
 8002cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d00d      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x40>
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	f200 80a1 	bhi.w	8002e50 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x34>
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d16:	e09b      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d1c:	e09b      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1e:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d22:	e098      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d24:	4b4f      	ldr	r3, [pc, #316]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d028      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	2200      	movs	r2, #0
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	627a      	str	r2, [r7, #36]	; 0x24
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d50:	fb03 f201 	mul.w	r2, r3, r1
 8002d54:	2300      	movs	r3, #0
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d64:	460a      	mov	r2, r1
 8002d66:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6a:	4413      	add	r3, r2
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	2200      	movs	r2, #0
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	61fa      	str	r2, [r7, #28]
 8002d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d7e:	f7fd ff55 	bl	8000c2c <__aeabi_uldivmod>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4613      	mov	r3, r2
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8a:	e053      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8c:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	2200      	movs	r2, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	617a      	str	r2, [r7, #20]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d9e:	f04f 0b00 	mov.w	fp, #0
 8002da2:	4652      	mov	r2, sl
 8002da4:	465b      	mov	r3, fp
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	ebb2 080a 	subs.w	r8, r2, sl
 8002dbe:	eb63 090b 	sbc.w	r9, r3, fp
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dd6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dda:	eb63 0509 	sbc.w	r5, r3, r9
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	00eb      	lsls	r3, r5, #3
 8002de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dec:	00e2      	lsls	r2, r4, #3
 8002dee:	4614      	mov	r4, r2
 8002df0:	461d      	mov	r5, r3
 8002df2:	eb14 030a 	adds.w	r3, r4, sl
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	eb45 030b 	adc.w	r3, r5, fp
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	028b      	lsls	r3, r1, #10
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e14:	4621      	mov	r1, r4
 8002e16:	028a      	lsls	r2, r1, #10
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	60fa      	str	r2, [r7, #12]
 8002e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e28:	f7fd ff00 	bl	8000c2c <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3740      	adds	r7, #64	; 0x40
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	017d7840 	.word	0x017d7840

08002e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	080070f4 	.word	0x080070f4

08002eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb4:	f7ff ffdc 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0b5b      	lsrs	r3, r3, #13
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	080070f4 	.word	0x080070f4

08002ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e041      	b.n	8002f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe ff32 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 f8f4 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_TIM_ConfigClockSource+0x1c>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0b4      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x186>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	d03e      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xd4>
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	f200 8087 	bhi.w	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd8:	f000 8086 	beq.w	80030e8 <HAL_TIM_ConfigClockSource+0x172>
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d87f      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe2:	2b70      	cmp	r3, #112	; 0x70
 8002fe4:	d01a      	beq.n	800301c <HAL_TIM_ConfigClockSource+0xa6>
 8002fe6:	2b70      	cmp	r3, #112	; 0x70
 8002fe8:	d87b      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 8002fea:	2b60      	cmp	r3, #96	; 0x60
 8002fec:	d050      	beq.n	8003090 <HAL_TIM_ConfigClockSource+0x11a>
 8002fee:	2b60      	cmp	r3, #96	; 0x60
 8002ff0:	d877      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff2:	2b50      	cmp	r3, #80	; 0x50
 8002ff4:	d03c      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xfa>
 8002ff6:	2b50      	cmp	r3, #80	; 0x50
 8002ff8:	d873      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d058      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x13a>
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d86f      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003002:	2b30      	cmp	r3, #48	; 0x30
 8003004:	d064      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003006:	2b30      	cmp	r3, #48	; 0x30
 8003008:	d86b      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 800300a:	2b20      	cmp	r3, #32
 800300c:	d060      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x15a>
 800300e:	2b20      	cmp	r3, #32
 8003010:	d867      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d05c      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003016:	2b10      	cmp	r3, #16
 8003018:	d05a      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x15a>
 800301a:	e062      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f000 f964 	bl	80032f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800303e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
      break;
 8003048:	e04f      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f000 f94d 	bl	80032f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800306c:	609a      	str	r2, [r3, #8]
      break;
 800306e:	e03c      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	461a      	mov	r2, r3
 800307e:	f000 f8c1 	bl	8003204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2150      	movs	r1, #80	; 0x50
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f91a 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 800308e:	e02c      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	461a      	mov	r2, r3
 800309e:	f000 f8e0 	bl	8003262 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2160      	movs	r1, #96	; 0x60
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f90a 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 80030ae:	e01c      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	461a      	mov	r2, r3
 80030be:	f000 f8a1 	bl	8003204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2140      	movs	r1, #64	; 0x40
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f8fa 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 80030ce:	e00c      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f000 f8f1 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 80030e0:	e003      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      break;
 80030e6:	e000      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a34      	ldr	r2, [pc, #208]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00f      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003122:	d00b      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a31      	ldr	r2, [pc, #196]	; (80031ec <TIM_Base_SetConfig+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <TIM_Base_SetConfig+0xec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <TIM_Base_SetConfig+0xf0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d108      	bne.n	800314e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01b      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d017      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a22      	ldr	r2, [pc, #136]	; (80031ec <TIM_Base_SetConfig+0xe8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <TIM_Base_SetConfig+0xec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00f      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <TIM_Base_SetConfig+0xf0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <TIM_Base_SetConfig+0xf4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <TIM_Base_SetConfig+0xf8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <TIM_Base_SetConfig+0xfc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40000c00 	.word	0x40000c00
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800

08003204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 030a 	bic.w	r3, r3, #10
 8003240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003262:	b480      	push	{r7}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0210 	bic.w	r2, r3, #16
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800328c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800329e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	f043 0307 	orr.w	r3, r3, #7
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	431a      	orrs	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e050      	b.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d013      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10c      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010000 	.word	0x40010000
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40014000 	.word	0x40014000

08003414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e03f      	b.n	80034a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe fce0 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2224      	movs	r2, #36	; 0x24
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fcdf 	bl	8003e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800348c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	4613      	mov	r3, r2
 80034ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d11d      	bne.n	8003504 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_UART_Receive_IT+0x26>
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e016      	b.n	8003506 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Receive_IT+0x38>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e00f      	b.n	8003506 <HAL_UART_Receive_IT+0x58>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fab6 	bl	8003a6c <UART_Start_Receive_IT>
 8003500:	4603      	mov	r3, r0
 8003502:	e000      	b.n	8003506 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0ba      	sub	sp, #232	; 0xe8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800354e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_UART_IRQHandler+0x66>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fb99 	bl	8003ca6 <UART_Receive_IT>
      return;
 8003574:	e256      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80de 	beq.w	800373c <HAL_UART_IRQHandler+0x22c>
 8003580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80d1 	beq.w	800373c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_UART_IRQHandler+0xae>
 80035a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_UART_IRQHandler+0xd2>
 80035ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_UART_IRQHandler+0xf6>
 80035ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f043 0204 	orr.w	r2, r3, #4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d011      	beq.n	8003636 <HAL_UART_IRQHandler+0x126>
 8003612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800361e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0208 	orr.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 81ed 	beq.w	8003a1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_UART_IRQHandler+0x14e>
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fb24 	bl	8003ca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_UART_IRQHandler+0x17a>
 8003682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04f      	beq.n	800372a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa2c 	bl	8003ae8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d141      	bne.n	8003722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1d9      	bne.n	800369e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d013      	beq.n	800371a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	4a7d      	ldr	r2, [pc, #500]	; (80038ec <HAL_UART_IRQHandler+0x3dc>)
 80036f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fdeb 	bl	80022da <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003714:	4610      	mov	r0, r2
 8003716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e00e      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f990 	bl	8003a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00a      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f98c 	bl	8003a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e006      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f988 	bl	8003a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003736:	e170      	b.n	8003a1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	bf00      	nop
    return;
 800373a:	e16e      	b.n	8003a1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 814a 	bne.w	80039da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8143 	beq.w	80039da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 813c 	beq.w	80039da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	f040 80b4 	bne.w	80038f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8140 	beq.w	8003a1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f080 8139 	bcs.w	8003a1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037be:	f000 8088 	beq.w	80038d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1d9      	bne.n	80037c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800381e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800383a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e1      	bne.n	800380e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800385a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3314      	adds	r3, #20
 800386a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800386e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800387c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e3      	bne.n	800384a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80038b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e3      	bne.n	8003890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fc94 	bl	80021fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8b6 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038e8:	e099      	b.n	8003a1e <HAL_UART_IRQHandler+0x50e>
 80038ea:	bf00      	nop
 80038ec:	08003baf 	.word	0x08003baf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 808b 	beq.w	8003a22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800390c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8086 	beq.w	8003a22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800393a:	647a      	str	r2, [r7, #68]	; 0x44
 800393c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e3      	bne.n	8003916 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	623b      	str	r3, [r7, #32]
   return(result);
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003972:	633a      	str	r2, [r7, #48]	; 0x30
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e3      	bne.n	800394e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0310 	bic.w	r3, r3, #16
 80039aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039b8:	61fa      	str	r2, [r7, #28]
 80039ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	617b      	str	r3, [r7, #20]
   return(result);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e3      	bne.n	8003994 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f83e 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d8:	e023      	b.n	8003a22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_UART_IRQHandler+0x4ea>
 80039e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8ef 	bl	8003bd6 <UART_Transmit_IT>
    return;
 80039f8:	e014      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00e      	beq.n	8003a24 <HAL_UART_IRQHandler+0x514>
 8003a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f92f 	bl	8003c76 <UART_EndTransmit_IT>
    return;
 8003a18:	e004      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
    return;
 8003a1a:	bf00      	nop
 8003a1c:	e002      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
      return;
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
      return;
 8003a22:	bf00      	nop
  }
}
 8003a24:	37e8      	adds	r7, #232	; 0xe8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop

08003a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	88fa      	ldrh	r2, [r7, #6]
 8003a84:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2222      	movs	r2, #34	; 0x22
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0220 	orr.w	r2, r2, #32
 8003ad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b095      	sub	sp, #84	; 0x54
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b10:	643a      	str	r2, [r7, #64]	; 0x40
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e5      	bne.n	8003af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e5      	bne.n	8003b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d119      	bne.n	8003b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f023 0310 	bic.w	r3, r3, #16
 8003b76:	647b      	str	r3, [r7, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b80:	61ba      	str	r2, [r7, #24]
 8003b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e5      	bne.n	8003b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ba2:	bf00      	nop
 8003ba4:	3754      	adds	r7, #84	; 0x54
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff ff39 	bl	8003a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b21      	cmp	r3, #33	; 0x21
 8003be8:	d13e      	bne.n	8003c68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	d114      	bne.n	8003c1e <UART_Transmit_IT+0x48>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d110      	bne.n	8003c1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]
 8003c1c:	e008      	b.n	8003c30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	1c59      	adds	r1, r3, #1
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6211      	str	r1, [r2, #32]
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10f      	bne.n	8003c64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fec8 	bl	8003a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b08c      	sub	sp, #48	; 0x30
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b22      	cmp	r3, #34	; 0x22
 8003cb8:	f040 80ab 	bne.w	8003e12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d117      	bne.n	8003cf6 <UART_Receive_IT+0x50>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d113      	bne.n	8003cf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	1c9a      	adds	r2, r3, #2
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf4:	e026      	b.n	8003d44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d007      	beq.n	8003d1a <UART_Receive_IT+0x74>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <UART_Receive_IT+0x82>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e008      	b.n	8003d3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4619      	mov	r1, r3
 8003d52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d15a      	bne.n	8003e0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0220 	bic.w	r2, r2, #32
 8003d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d135      	bne.n	8003e04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	613b      	str	r3, [r7, #16]
   return(result);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	623a      	str	r2, [r7, #32]
 8003dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	69f9      	ldr	r1, [r7, #28]
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d10a      	bne.n	8003df6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fe29 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
 8003e02:	e002      	b.n	8003e0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fd fe13 	bl	8001a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e002      	b.n	8003e14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3730      	adds	r7, #48	; 0x30
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e20:	b0c0      	sub	sp, #256	; 0x100
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	68d9      	ldr	r1, [r3, #12]
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	ea40 0301 	orr.w	r3, r0, r1
 8003e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e74:	f021 010c 	bic.w	r1, r1, #12
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e82:	430b      	orrs	r3, r1
 8003e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	6999      	ldr	r1, [r3, #24]
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	ea40 0301 	orr.w	r3, r0, r1
 8003ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b8f      	ldr	r3, [pc, #572]	; (80040e8 <UART_SetConfig+0x2cc>)
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d005      	beq.n	8003ebc <UART_SetConfig+0xa0>
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b8d      	ldr	r3, [pc, #564]	; (80040ec <UART_SetConfig+0x2d0>)
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d104      	bne.n	8003ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ebc:	f7fe fff8 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 8003ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ec4:	e003      	b.n	8003ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ec6:	f7fe ffdf 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8003eca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed8:	f040 810c 	bne.w	80040f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	1891      	adds	r1, r2, r2
 8003ef4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ef6:	415b      	adcs	r3, r3
 8003ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003efe:	4621      	mov	r1, r4
 8003f00:	eb12 0801 	adds.w	r8, r2, r1
 8003f04:	4629      	mov	r1, r5
 8003f06:	eb43 0901 	adc.w	r9, r3, r1
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1e:	4690      	mov	r8, r2
 8003f20:	4699      	mov	r9, r3
 8003f22:	4623      	mov	r3, r4
 8003f24:	eb18 0303 	adds.w	r3, r8, r3
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	eb49 0303 	adc.w	r3, r9, r3
 8003f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	18db      	adds	r3, r3, r3
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f50:	4613      	mov	r3, r2
 8003f52:	eb42 0303 	adc.w	r3, r2, r3
 8003f56:	657b      	str	r3, [r7, #84]	; 0x54
 8003f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f60:	f7fc fe64 	bl	8000c2c <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <UART_SetConfig+0x2d4>)
 8003f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	011c      	lsls	r4, r3, #4
 8003f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f84:	4642      	mov	r2, r8
 8003f86:	464b      	mov	r3, r9
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f94:	4641      	mov	r1, r8
 8003f96:	eb12 0a01 	adds.w	sl, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb4:	4692      	mov	sl, r2
 8003fb6:	469b      	mov	fp, r3
 8003fb8:	4643      	mov	r3, r8
 8003fba:	eb1a 0303 	adds.w	r3, sl, r3
 8003fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	18db      	adds	r3, r3, r3
 8003fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	eb42 0303 	adc.w	r3, r2, r3
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
 8003fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ff6:	f7fc fe19 	bl	8000c2c <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <UART_SetConfig+0x2d4>)
 8004002:	fba3 2301 	umull	r2, r3, r3, r1
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2264      	movs	r2, #100	; 0x64
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	1acb      	subs	r3, r1, r3
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <UART_SetConfig+0x2d4>)
 8004018:	fba3 2302 	umull	r2, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004024:	441c      	add	r4, r3
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	1891      	adds	r1, r2, r2
 800403e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004040:	415b      	adcs	r3, r3
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004048:	4641      	mov	r1, r8
 800404a:	1851      	adds	r1, r2, r1
 800404c:	6339      	str	r1, [r7, #48]	; 0x30
 800404e:	4649      	mov	r1, r9
 8004050:	414b      	adcs	r3, r1
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004060:	4659      	mov	r1, fp
 8004062:	00cb      	lsls	r3, r1, #3
 8004064:	4651      	mov	r1, sl
 8004066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406a:	4651      	mov	r1, sl
 800406c:	00ca      	lsls	r2, r1, #3
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	4603      	mov	r3, r0
 8004074:	4642      	mov	r2, r8
 8004076:	189b      	adds	r3, r3, r2
 8004078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800407c:	464b      	mov	r3, r9
 800407e:	460a      	mov	r2, r1
 8004080:	eb42 0303 	adc.w	r3, r2, r3
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800409c:	460b      	mov	r3, r1
 800409e:	18db      	adds	r3, r3, r3
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a2:	4613      	mov	r3, r2
 80040a4:	eb42 0303 	adc.w	r3, r2, r3
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040b2:	f7fc fdbb 	bl	8000c2c <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <UART_SetConfig+0x2d4>)
 80040bc:	fba3 1302 	umull	r1, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2164      	movs	r1, #100	; 0x64
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	3332      	adds	r3, #50	; 0x32
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <UART_SetConfig+0x2d4>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 0207 	and.w	r2, r3, #7
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4422      	add	r2, r4
 80040e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040e4:	e106      	b.n	80042f4 <UART_SetConfig+0x4d8>
 80040e6:	bf00      	nop
 80040e8:	40011000 	.word	0x40011000
 80040ec:	40011400 	.word	0x40011400
 80040f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004106:	4642      	mov	r2, r8
 8004108:	464b      	mov	r3, r9
 800410a:	1891      	adds	r1, r2, r2
 800410c:	6239      	str	r1, [r7, #32]
 800410e:	415b      	adcs	r3, r3
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004116:	4641      	mov	r1, r8
 8004118:	1854      	adds	r4, r2, r1
 800411a:	4649      	mov	r1, r9
 800411c:	eb43 0501 	adc.w	r5, r3, r1
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	00eb      	lsls	r3, r5, #3
 800412a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412e:	00e2      	lsls	r2, r4, #3
 8004130:	4614      	mov	r4, r2
 8004132:	461d      	mov	r5, r3
 8004134:	4643      	mov	r3, r8
 8004136:	18e3      	adds	r3, r4, r3
 8004138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800413c:	464b      	mov	r3, r9
 800413e:	eb45 0303 	adc.w	r3, r5, r3
 8004142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004162:	4629      	mov	r1, r5
 8004164:	008b      	lsls	r3, r1, #2
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416c:	4621      	mov	r1, r4
 800416e:	008a      	lsls	r2, r1, #2
 8004170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004174:	f7fc fd5a 	bl	8000c2c <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4b60      	ldr	r3, [pc, #384]	; (8004300 <UART_SetConfig+0x4e4>)
 800417e:	fba3 2302 	umull	r2, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	011c      	lsls	r4, r3, #4
 8004186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418a:	2200      	movs	r2, #0
 800418c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	1891      	adds	r1, r2, r2
 800419e:	61b9      	str	r1, [r7, #24]
 80041a0:	415b      	adcs	r3, r3
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a8:	4641      	mov	r1, r8
 80041aa:	1851      	adds	r1, r2, r1
 80041ac:	6139      	str	r1, [r7, #16]
 80041ae:	4649      	mov	r1, r9
 80041b0:	414b      	adcs	r3, r1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c0:	4659      	mov	r1, fp
 80041c2:	00cb      	lsls	r3, r1, #3
 80041c4:	4651      	mov	r1, sl
 80041c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ca:	4651      	mov	r1, sl
 80041cc:	00ca      	lsls	r2, r1, #3
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	4642      	mov	r2, r8
 80041d6:	189b      	adds	r3, r3, r2
 80041d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041dc:	464b      	mov	r3, r9
 80041de:	460a      	mov	r2, r1
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80041f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004200:	4649      	mov	r1, r9
 8004202:	008b      	lsls	r3, r1, #2
 8004204:	4641      	mov	r1, r8
 8004206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420a:	4641      	mov	r1, r8
 800420c:	008a      	lsls	r2, r1, #2
 800420e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004212:	f7fc fd0b 	bl	8000c2c <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4611      	mov	r1, r2
 800421c:	4b38      	ldr	r3, [pc, #224]	; (8004300 <UART_SetConfig+0x4e4>)
 800421e:	fba3 2301 	umull	r2, r3, r3, r1
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2264      	movs	r2, #100	; 0x64
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	1acb      	subs	r3, r1, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	3332      	adds	r3, #50	; 0x32
 8004230:	4a33      	ldr	r2, [pc, #204]	; (8004300 <UART_SetConfig+0x4e4>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423c:	441c      	add	r4, r3
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	673b      	str	r3, [r7, #112]	; 0x70
 8004246:	677a      	str	r2, [r7, #116]	; 0x74
 8004248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	415b      	adcs	r3, r3
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800425c:	4641      	mov	r1, r8
 800425e:	1851      	adds	r1, r2, r1
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	4649      	mov	r1, r9
 8004264:	414b      	adcs	r3, r1
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004274:	4659      	mov	r1, fp
 8004276:	00cb      	lsls	r3, r1, #3
 8004278:	4651      	mov	r1, sl
 800427a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427e:	4651      	mov	r1, sl
 8004280:	00ca      	lsls	r2, r1, #3
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	4603      	mov	r3, r0
 8004288:	4642      	mov	r2, r8
 800428a:	189b      	adds	r3, r3, r2
 800428c:	66bb      	str	r3, [r7, #104]	; 0x68
 800428e:	464b      	mov	r3, r9
 8004290:	460a      	mov	r2, r1
 8004292:	eb42 0303 	adc.w	r3, r2, r3
 8004296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	663b      	str	r3, [r7, #96]	; 0x60
 80042a2:	667a      	str	r2, [r7, #100]	; 0x64
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042b0:	4649      	mov	r1, r9
 80042b2:	008b      	lsls	r3, r1, #2
 80042b4:	4641      	mov	r1, r8
 80042b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ba:	4641      	mov	r1, r8
 80042bc:	008a      	lsls	r2, r1, #2
 80042be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042c2:	f7fc fcb3 	bl	8000c2c <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <UART_SetConfig+0x4e4>)
 80042cc:	fba3 1302 	umull	r1, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	2164      	movs	r1, #100	; 0x64
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	3332      	adds	r3, #50	; 0x32
 80042de:	4a08      	ldr	r2, [pc, #32]	; (8004300 <UART_SetConfig+0x4e4>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f003 020f 	and.w	r2, r3, #15
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4422      	add	r2, r4
 80042f2:	609a      	str	r2, [r3, #8]
}
 80042f4:	bf00      	nop
 80042f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042fa:	46bd      	mov	sp, r7
 80042fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004300:	51eb851f 	.word	0x51eb851f

08004304 <atof>:
 8004304:	2100      	movs	r1, #0
 8004306:	f000 be13 	b.w	8004f30 <strtod>

0800430a <atoi>:
 800430a:	220a      	movs	r2, #10
 800430c:	2100      	movs	r1, #0
 800430e:	f000 be9d 	b.w	800504c <strtol>

08004312 <sulp>:
 8004312:	b570      	push	{r4, r5, r6, lr}
 8004314:	4604      	mov	r4, r0
 8004316:	460d      	mov	r5, r1
 8004318:	ec45 4b10 	vmov	d0, r4, r5
 800431c:	4616      	mov	r6, r2
 800431e:	f002 f831 	bl	8006384 <__ulp>
 8004322:	ec51 0b10 	vmov	r0, r1, d0
 8004326:	b17e      	cbz	r6, 8004348 <sulp+0x36>
 8004328:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800432c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004330:	2b00      	cmp	r3, #0
 8004332:	dd09      	ble.n	8004348 <sulp+0x36>
 8004334:	051b      	lsls	r3, r3, #20
 8004336:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800433a:	2400      	movs	r4, #0
 800433c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f7fc f968 	bl	8000618 <__aeabi_dmul>
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	0000      	movs	r0, r0
 800434c:	0000      	movs	r0, r0
	...

08004350 <_strtod_l>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	ed2d 8b02 	vpush	{d8}
 8004358:	b09b      	sub	sp, #108	; 0x6c
 800435a:	4604      	mov	r4, r0
 800435c:	9213      	str	r2, [sp, #76]	; 0x4c
 800435e:	2200      	movs	r2, #0
 8004360:	9216      	str	r2, [sp, #88]	; 0x58
 8004362:	460d      	mov	r5, r1
 8004364:	f04f 0800 	mov.w	r8, #0
 8004368:	f04f 0900 	mov.w	r9, #0
 800436c:	460a      	mov	r2, r1
 800436e:	9215      	str	r2, [sp, #84]	; 0x54
 8004370:	7811      	ldrb	r1, [r2, #0]
 8004372:	292b      	cmp	r1, #43	; 0x2b
 8004374:	d04c      	beq.n	8004410 <_strtod_l+0xc0>
 8004376:	d83a      	bhi.n	80043ee <_strtod_l+0x9e>
 8004378:	290d      	cmp	r1, #13
 800437a:	d834      	bhi.n	80043e6 <_strtod_l+0x96>
 800437c:	2908      	cmp	r1, #8
 800437e:	d834      	bhi.n	80043ea <_strtod_l+0x9a>
 8004380:	2900      	cmp	r1, #0
 8004382:	d03d      	beq.n	8004400 <_strtod_l+0xb0>
 8004384:	2200      	movs	r2, #0
 8004386:	920a      	str	r2, [sp, #40]	; 0x28
 8004388:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800438a:	7832      	ldrb	r2, [r6, #0]
 800438c:	2a30      	cmp	r2, #48	; 0x30
 800438e:	f040 80b4 	bne.w	80044fa <_strtod_l+0x1aa>
 8004392:	7872      	ldrb	r2, [r6, #1]
 8004394:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004398:	2a58      	cmp	r2, #88	; 0x58
 800439a:	d170      	bne.n	800447e <_strtod_l+0x12e>
 800439c:	9302      	str	r3, [sp, #8]
 800439e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	ab16      	add	r3, sp, #88	; 0x58
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4a8e      	ldr	r2, [pc, #568]	; (80045e0 <_strtod_l+0x290>)
 80043a8:	ab17      	add	r3, sp, #92	; 0x5c
 80043aa:	a915      	add	r1, sp, #84	; 0x54
 80043ac:	4620      	mov	r0, r4
 80043ae:	f001 f8cf 	bl	8005550 <__gethex>
 80043b2:	f010 070f 	ands.w	r7, r0, #15
 80043b6:	4605      	mov	r5, r0
 80043b8:	d005      	beq.n	80043c6 <_strtod_l+0x76>
 80043ba:	2f06      	cmp	r7, #6
 80043bc:	d12a      	bne.n	8004414 <_strtod_l+0xc4>
 80043be:	3601      	adds	r6, #1
 80043c0:	2300      	movs	r3, #0
 80043c2:	9615      	str	r6, [sp, #84]	; 0x54
 80043c4:	930a      	str	r3, [sp, #40]	; 0x28
 80043c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 857f 	bne.w	8004ecc <_strtod_l+0xb7c>
 80043ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043d0:	b1db      	cbz	r3, 800440a <_strtod_l+0xba>
 80043d2:	4642      	mov	r2, r8
 80043d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80043d8:	ec43 2b10 	vmov	d0, r2, r3
 80043dc:	b01b      	add	sp, #108	; 0x6c
 80043de:	ecbd 8b02 	vpop	{d8}
 80043e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e6:	2920      	cmp	r1, #32
 80043e8:	d1cc      	bne.n	8004384 <_strtod_l+0x34>
 80043ea:	3201      	adds	r2, #1
 80043ec:	e7bf      	b.n	800436e <_strtod_l+0x1e>
 80043ee:	292d      	cmp	r1, #45	; 0x2d
 80043f0:	d1c8      	bne.n	8004384 <_strtod_l+0x34>
 80043f2:	2101      	movs	r1, #1
 80043f4:	910a      	str	r1, [sp, #40]	; 0x28
 80043f6:	1c51      	adds	r1, r2, #1
 80043f8:	9115      	str	r1, [sp, #84]	; 0x54
 80043fa:	7852      	ldrb	r2, [r2, #1]
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	d1c3      	bne.n	8004388 <_strtod_l+0x38>
 8004400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004402:	9515      	str	r5, [sp, #84]	; 0x54
 8004404:	2b00      	cmp	r3, #0
 8004406:	f040 855f 	bne.w	8004ec8 <_strtod_l+0xb78>
 800440a:	4642      	mov	r2, r8
 800440c:	464b      	mov	r3, r9
 800440e:	e7e3      	b.n	80043d8 <_strtod_l+0x88>
 8004410:	2100      	movs	r1, #0
 8004412:	e7ef      	b.n	80043f4 <_strtod_l+0xa4>
 8004414:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004416:	b13a      	cbz	r2, 8004428 <_strtod_l+0xd8>
 8004418:	2135      	movs	r1, #53	; 0x35
 800441a:	a818      	add	r0, sp, #96	; 0x60
 800441c:	f002 f8af 	bl	800657e <__copybits>
 8004420:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004422:	4620      	mov	r0, r4
 8004424:	f001 fc82 	bl	8005d2c <_Bfree>
 8004428:	3f01      	subs	r7, #1
 800442a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800442c:	2f04      	cmp	r7, #4
 800442e:	d806      	bhi.n	800443e <_strtod_l+0xee>
 8004430:	e8df f007 	tbb	[pc, r7]
 8004434:	201d0314 	.word	0x201d0314
 8004438:	14          	.byte	0x14
 8004439:	00          	.byte	0x00
 800443a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800443e:	05e9      	lsls	r1, r5, #23
 8004440:	bf48      	it	mi
 8004442:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004446:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800444a:	0d1b      	lsrs	r3, r3, #20
 800444c:	051b      	lsls	r3, r3, #20
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1b9      	bne.n	80043c6 <_strtod_l+0x76>
 8004452:	f000 ff85 	bl	8005360 <__errno>
 8004456:	2322      	movs	r3, #34	; 0x22
 8004458:	6003      	str	r3, [r0, #0]
 800445a:	e7b4      	b.n	80043c6 <_strtod_l+0x76>
 800445c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8004460:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004464:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004468:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800446c:	e7e7      	b.n	800443e <_strtod_l+0xee>
 800446e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80045e8 <_strtod_l+0x298>
 8004472:	e7e4      	b.n	800443e <_strtod_l+0xee>
 8004474:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004478:	f04f 38ff 	mov.w	r8, #4294967295
 800447c:	e7df      	b.n	800443e <_strtod_l+0xee>
 800447e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	9215      	str	r2, [sp, #84]	; 0x54
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	2b30      	cmp	r3, #48	; 0x30
 8004488:	d0f9      	beq.n	800447e <_strtod_l+0x12e>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d09b      	beq.n	80043c6 <_strtod_l+0x76>
 800448e:	2301      	movs	r3, #1
 8004490:	f04f 0a00 	mov.w	sl, #0
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004498:	930b      	str	r3, [sp, #44]	; 0x2c
 800449a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800449e:	46d3      	mov	fp, sl
 80044a0:	220a      	movs	r2, #10
 80044a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80044a4:	7806      	ldrb	r6, [r0, #0]
 80044a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80044aa:	b2d9      	uxtb	r1, r3
 80044ac:	2909      	cmp	r1, #9
 80044ae:	d926      	bls.n	80044fe <_strtod_l+0x1ae>
 80044b0:	494c      	ldr	r1, [pc, #304]	; (80045e4 <_strtod_l+0x294>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	f000 fee1 	bl	800527a <strncmp>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d030      	beq.n	800451e <_strtod_l+0x1ce>
 80044bc:	2000      	movs	r0, #0
 80044be:	4632      	mov	r2, r6
 80044c0:	9005      	str	r0, [sp, #20]
 80044c2:	465e      	mov	r6, fp
 80044c4:	4603      	mov	r3, r0
 80044c6:	2a65      	cmp	r2, #101	; 0x65
 80044c8:	d001      	beq.n	80044ce <_strtod_l+0x17e>
 80044ca:	2a45      	cmp	r2, #69	; 0x45
 80044cc:	d113      	bne.n	80044f6 <_strtod_l+0x1a6>
 80044ce:	b91e      	cbnz	r6, 80044d8 <_strtod_l+0x188>
 80044d0:	9a04      	ldr	r2, [sp, #16]
 80044d2:	4302      	orrs	r2, r0
 80044d4:	d094      	beq.n	8004400 <_strtod_l+0xb0>
 80044d6:	2600      	movs	r6, #0
 80044d8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80044da:	1c6a      	adds	r2, r5, #1
 80044dc:	9215      	str	r2, [sp, #84]	; 0x54
 80044de:	786a      	ldrb	r2, [r5, #1]
 80044e0:	2a2b      	cmp	r2, #43	; 0x2b
 80044e2:	d074      	beq.n	80045ce <_strtod_l+0x27e>
 80044e4:	2a2d      	cmp	r2, #45	; 0x2d
 80044e6:	d078      	beq.n	80045da <_strtod_l+0x28a>
 80044e8:	f04f 0c00 	mov.w	ip, #0
 80044ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80044f0:	2909      	cmp	r1, #9
 80044f2:	d97f      	bls.n	80045f4 <_strtod_l+0x2a4>
 80044f4:	9515      	str	r5, [sp, #84]	; 0x54
 80044f6:	2700      	movs	r7, #0
 80044f8:	e09e      	b.n	8004638 <_strtod_l+0x2e8>
 80044fa:	2300      	movs	r3, #0
 80044fc:	e7c8      	b.n	8004490 <_strtod_l+0x140>
 80044fe:	f1bb 0f08 	cmp.w	fp, #8
 8004502:	bfd8      	it	le
 8004504:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004506:	f100 0001 	add.w	r0, r0, #1
 800450a:	bfda      	itte	le
 800450c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004510:	9309      	strle	r3, [sp, #36]	; 0x24
 8004512:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004516:	f10b 0b01 	add.w	fp, fp, #1
 800451a:	9015      	str	r0, [sp, #84]	; 0x54
 800451c:	e7c1      	b.n	80044a2 <_strtod_l+0x152>
 800451e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	9215      	str	r2, [sp, #84]	; 0x54
 8004524:	785a      	ldrb	r2, [r3, #1]
 8004526:	f1bb 0f00 	cmp.w	fp, #0
 800452a:	d037      	beq.n	800459c <_strtod_l+0x24c>
 800452c:	9005      	str	r0, [sp, #20]
 800452e:	465e      	mov	r6, fp
 8004530:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004534:	2b09      	cmp	r3, #9
 8004536:	d912      	bls.n	800455e <_strtod_l+0x20e>
 8004538:	2301      	movs	r3, #1
 800453a:	e7c4      	b.n	80044c6 <_strtod_l+0x176>
 800453c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	9215      	str	r2, [sp, #84]	; 0x54
 8004542:	785a      	ldrb	r2, [r3, #1]
 8004544:	3001      	adds	r0, #1
 8004546:	2a30      	cmp	r2, #48	; 0x30
 8004548:	d0f8      	beq.n	800453c <_strtod_l+0x1ec>
 800454a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800454e:	2b08      	cmp	r3, #8
 8004550:	f200 84c1 	bhi.w	8004ed6 <_strtod_l+0xb86>
 8004554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004556:	9005      	str	r0, [sp, #20]
 8004558:	2000      	movs	r0, #0
 800455a:	930b      	str	r3, [sp, #44]	; 0x2c
 800455c:	4606      	mov	r6, r0
 800455e:	3a30      	subs	r2, #48	; 0x30
 8004560:	f100 0301 	add.w	r3, r0, #1
 8004564:	d014      	beq.n	8004590 <_strtod_l+0x240>
 8004566:	9905      	ldr	r1, [sp, #20]
 8004568:	4419      	add	r1, r3
 800456a:	9105      	str	r1, [sp, #20]
 800456c:	4633      	mov	r3, r6
 800456e:	eb00 0c06 	add.w	ip, r0, r6
 8004572:	210a      	movs	r1, #10
 8004574:	4563      	cmp	r3, ip
 8004576:	d113      	bne.n	80045a0 <_strtod_l+0x250>
 8004578:	1833      	adds	r3, r6, r0
 800457a:	2b08      	cmp	r3, #8
 800457c:	f106 0601 	add.w	r6, r6, #1
 8004580:	4406      	add	r6, r0
 8004582:	dc1a      	bgt.n	80045ba <_strtod_l+0x26a>
 8004584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004586:	230a      	movs	r3, #10
 8004588:	fb03 2301 	mla	r3, r3, r1, r2
 800458c:	9309      	str	r3, [sp, #36]	; 0x24
 800458e:	2300      	movs	r3, #0
 8004590:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004592:	1c51      	adds	r1, r2, #1
 8004594:	9115      	str	r1, [sp, #84]	; 0x54
 8004596:	7852      	ldrb	r2, [r2, #1]
 8004598:	4618      	mov	r0, r3
 800459a:	e7c9      	b.n	8004530 <_strtod_l+0x1e0>
 800459c:	4658      	mov	r0, fp
 800459e:	e7d2      	b.n	8004546 <_strtod_l+0x1f6>
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	f103 0301 	add.w	r3, r3, #1
 80045a6:	dc03      	bgt.n	80045b0 <_strtod_l+0x260>
 80045a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80045aa:	434f      	muls	r7, r1
 80045ac:	9709      	str	r7, [sp, #36]	; 0x24
 80045ae:	e7e1      	b.n	8004574 <_strtod_l+0x224>
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	bfd8      	it	le
 80045b4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80045b8:	e7dc      	b.n	8004574 <_strtod_l+0x224>
 80045ba:	2e10      	cmp	r6, #16
 80045bc:	bfdc      	itt	le
 80045be:	230a      	movle	r3, #10
 80045c0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80045c4:	e7e3      	b.n	800458e <_strtod_l+0x23e>
 80045c6:	2300      	movs	r3, #0
 80045c8:	9305      	str	r3, [sp, #20]
 80045ca:	2301      	movs	r3, #1
 80045cc:	e780      	b.n	80044d0 <_strtod_l+0x180>
 80045ce:	f04f 0c00 	mov.w	ip, #0
 80045d2:	1caa      	adds	r2, r5, #2
 80045d4:	9215      	str	r2, [sp, #84]	; 0x54
 80045d6:	78aa      	ldrb	r2, [r5, #2]
 80045d8:	e788      	b.n	80044ec <_strtod_l+0x19c>
 80045da:	f04f 0c01 	mov.w	ip, #1
 80045de:	e7f8      	b.n	80045d2 <_strtod_l+0x282>
 80045e0:	0800710c 	.word	0x0800710c
 80045e4:	080070fc 	.word	0x080070fc
 80045e8:	7ff00000 	.word	0x7ff00000
 80045ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045ee:	1c51      	adds	r1, r2, #1
 80045f0:	9115      	str	r1, [sp, #84]	; 0x54
 80045f2:	7852      	ldrb	r2, [r2, #1]
 80045f4:	2a30      	cmp	r2, #48	; 0x30
 80045f6:	d0f9      	beq.n	80045ec <_strtod_l+0x29c>
 80045f8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80045fc:	2908      	cmp	r1, #8
 80045fe:	f63f af7a 	bhi.w	80044f6 <_strtod_l+0x1a6>
 8004602:	3a30      	subs	r2, #48	; 0x30
 8004604:	9208      	str	r2, [sp, #32]
 8004606:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004608:	920c      	str	r2, [sp, #48]	; 0x30
 800460a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800460c:	1c57      	adds	r7, r2, #1
 800460e:	9715      	str	r7, [sp, #84]	; 0x54
 8004610:	7852      	ldrb	r2, [r2, #1]
 8004612:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004616:	f1be 0f09 	cmp.w	lr, #9
 800461a:	d938      	bls.n	800468e <_strtod_l+0x33e>
 800461c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800461e:	1a7f      	subs	r7, r7, r1
 8004620:	2f08      	cmp	r7, #8
 8004622:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004626:	dc03      	bgt.n	8004630 <_strtod_l+0x2e0>
 8004628:	9908      	ldr	r1, [sp, #32]
 800462a:	428f      	cmp	r7, r1
 800462c:	bfa8      	it	ge
 800462e:	460f      	movge	r7, r1
 8004630:	f1bc 0f00 	cmp.w	ip, #0
 8004634:	d000      	beq.n	8004638 <_strtod_l+0x2e8>
 8004636:	427f      	negs	r7, r7
 8004638:	2e00      	cmp	r6, #0
 800463a:	d14f      	bne.n	80046dc <_strtod_l+0x38c>
 800463c:	9904      	ldr	r1, [sp, #16]
 800463e:	4301      	orrs	r1, r0
 8004640:	f47f aec1 	bne.w	80043c6 <_strtod_l+0x76>
 8004644:	2b00      	cmp	r3, #0
 8004646:	f47f aedb 	bne.w	8004400 <_strtod_l+0xb0>
 800464a:	2a69      	cmp	r2, #105	; 0x69
 800464c:	d029      	beq.n	80046a2 <_strtod_l+0x352>
 800464e:	dc26      	bgt.n	800469e <_strtod_l+0x34e>
 8004650:	2a49      	cmp	r2, #73	; 0x49
 8004652:	d026      	beq.n	80046a2 <_strtod_l+0x352>
 8004654:	2a4e      	cmp	r2, #78	; 0x4e
 8004656:	f47f aed3 	bne.w	8004400 <_strtod_l+0xb0>
 800465a:	499b      	ldr	r1, [pc, #620]	; (80048c8 <_strtod_l+0x578>)
 800465c:	a815      	add	r0, sp, #84	; 0x54
 800465e:	f001 f9b7 	bl	80059d0 <__match>
 8004662:	2800      	cmp	r0, #0
 8004664:	f43f aecc 	beq.w	8004400 <_strtod_l+0xb0>
 8004668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b28      	cmp	r3, #40	; 0x28
 800466e:	d12f      	bne.n	80046d0 <_strtod_l+0x380>
 8004670:	4996      	ldr	r1, [pc, #600]	; (80048cc <_strtod_l+0x57c>)
 8004672:	aa18      	add	r2, sp, #96	; 0x60
 8004674:	a815      	add	r0, sp, #84	; 0x54
 8004676:	f001 f9bf 	bl	80059f8 <__hexnan>
 800467a:	2805      	cmp	r0, #5
 800467c:	d128      	bne.n	80046d0 <_strtod_l+0x380>
 800467e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004684:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004688:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800468c:	e69b      	b.n	80043c6 <_strtod_l+0x76>
 800468e:	9f08      	ldr	r7, [sp, #32]
 8004690:	210a      	movs	r1, #10
 8004692:	fb01 2107 	mla	r1, r1, r7, r2
 8004696:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800469a:	9208      	str	r2, [sp, #32]
 800469c:	e7b5      	b.n	800460a <_strtod_l+0x2ba>
 800469e:	2a6e      	cmp	r2, #110	; 0x6e
 80046a0:	e7d9      	b.n	8004656 <_strtod_l+0x306>
 80046a2:	498b      	ldr	r1, [pc, #556]	; (80048d0 <_strtod_l+0x580>)
 80046a4:	a815      	add	r0, sp, #84	; 0x54
 80046a6:	f001 f993 	bl	80059d0 <__match>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	f43f aea8 	beq.w	8004400 <_strtod_l+0xb0>
 80046b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046b2:	4988      	ldr	r1, [pc, #544]	; (80048d4 <_strtod_l+0x584>)
 80046b4:	3b01      	subs	r3, #1
 80046b6:	a815      	add	r0, sp, #84	; 0x54
 80046b8:	9315      	str	r3, [sp, #84]	; 0x54
 80046ba:	f001 f989 	bl	80059d0 <__match>
 80046be:	b910      	cbnz	r0, 80046c6 <_strtod_l+0x376>
 80046c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046c2:	3301      	adds	r3, #1
 80046c4:	9315      	str	r3, [sp, #84]	; 0x54
 80046c6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80048e4 <_strtod_l+0x594>
 80046ca:	f04f 0800 	mov.w	r8, #0
 80046ce:	e67a      	b.n	80043c6 <_strtod_l+0x76>
 80046d0:	4881      	ldr	r0, [pc, #516]	; (80048d8 <_strtod_l+0x588>)
 80046d2:	f000 fe81 	bl	80053d8 <nan>
 80046d6:	ec59 8b10 	vmov	r8, r9, d0
 80046da:	e674      	b.n	80043c6 <_strtod_l+0x76>
 80046dc:	9b05      	ldr	r3, [sp, #20]
 80046de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046e0:	1afb      	subs	r3, r7, r3
 80046e2:	f1bb 0f00 	cmp.w	fp, #0
 80046e6:	bf08      	it	eq
 80046e8:	46b3      	moveq	fp, r6
 80046ea:	2e10      	cmp	r6, #16
 80046ec:	9308      	str	r3, [sp, #32]
 80046ee:	4635      	mov	r5, r6
 80046f0:	bfa8      	it	ge
 80046f2:	2510      	movge	r5, #16
 80046f4:	f7fb ff16 	bl	8000524 <__aeabi_ui2d>
 80046f8:	2e09      	cmp	r6, #9
 80046fa:	4680      	mov	r8, r0
 80046fc:	4689      	mov	r9, r1
 80046fe:	dd13      	ble.n	8004728 <_strtod_l+0x3d8>
 8004700:	4b76      	ldr	r3, [pc, #472]	; (80048dc <_strtod_l+0x58c>)
 8004702:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004706:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800470a:	f7fb ff85 	bl	8000618 <__aeabi_dmul>
 800470e:	4680      	mov	r8, r0
 8004710:	4650      	mov	r0, sl
 8004712:	4689      	mov	r9, r1
 8004714:	f7fb ff06 	bl	8000524 <__aeabi_ui2d>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fb fdc4 	bl	80002ac <__adddf3>
 8004724:	4680      	mov	r8, r0
 8004726:	4689      	mov	r9, r1
 8004728:	2e0f      	cmp	r6, #15
 800472a:	dc38      	bgt.n	800479e <_strtod_l+0x44e>
 800472c:	9b08      	ldr	r3, [sp, #32]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f43f ae49 	beq.w	80043c6 <_strtod_l+0x76>
 8004734:	dd24      	ble.n	8004780 <_strtod_l+0x430>
 8004736:	2b16      	cmp	r3, #22
 8004738:	dc0b      	bgt.n	8004752 <_strtod_l+0x402>
 800473a:	4968      	ldr	r1, [pc, #416]	; (80048dc <_strtod_l+0x58c>)
 800473c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	f7fb ff66 	bl	8000618 <__aeabi_dmul>
 800474c:	4680      	mov	r8, r0
 800474e:	4689      	mov	r9, r1
 8004750:	e639      	b.n	80043c6 <_strtod_l+0x76>
 8004752:	9a08      	ldr	r2, [sp, #32]
 8004754:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8004758:	4293      	cmp	r3, r2
 800475a:	db20      	blt.n	800479e <_strtod_l+0x44e>
 800475c:	4c5f      	ldr	r4, [pc, #380]	; (80048dc <_strtod_l+0x58c>)
 800475e:	f1c6 060f 	rsb	r6, r6, #15
 8004762:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8004766:	4642      	mov	r2, r8
 8004768:	464b      	mov	r3, r9
 800476a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800476e:	f7fb ff53 	bl	8000618 <__aeabi_dmul>
 8004772:	9b08      	ldr	r3, [sp, #32]
 8004774:	1b9e      	subs	r6, r3, r6
 8004776:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800477a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800477e:	e7e3      	b.n	8004748 <_strtod_l+0x3f8>
 8004780:	9b08      	ldr	r3, [sp, #32]
 8004782:	3316      	adds	r3, #22
 8004784:	db0b      	blt.n	800479e <_strtod_l+0x44e>
 8004786:	9b05      	ldr	r3, [sp, #20]
 8004788:	1bdf      	subs	r7, r3, r7
 800478a:	4b54      	ldr	r3, [pc, #336]	; (80048dc <_strtod_l+0x58c>)
 800478c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004794:	4640      	mov	r0, r8
 8004796:	4649      	mov	r1, r9
 8004798:	f7fc f868 	bl	800086c <__aeabi_ddiv>
 800479c:	e7d6      	b.n	800474c <_strtod_l+0x3fc>
 800479e:	9b08      	ldr	r3, [sp, #32]
 80047a0:	1b75      	subs	r5, r6, r5
 80047a2:	441d      	add	r5, r3
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	dd70      	ble.n	800488a <_strtod_l+0x53a>
 80047a8:	f015 030f 	ands.w	r3, r5, #15
 80047ac:	d00a      	beq.n	80047c4 <_strtod_l+0x474>
 80047ae:	494b      	ldr	r1, [pc, #300]	; (80048dc <_strtod_l+0x58c>)
 80047b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047bc:	f7fb ff2c 	bl	8000618 <__aeabi_dmul>
 80047c0:	4680      	mov	r8, r0
 80047c2:	4689      	mov	r9, r1
 80047c4:	f035 050f 	bics.w	r5, r5, #15
 80047c8:	d04d      	beq.n	8004866 <_strtod_l+0x516>
 80047ca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80047ce:	dd22      	ble.n	8004816 <_strtod_l+0x4c6>
 80047d0:	2500      	movs	r5, #0
 80047d2:	46ab      	mov	fp, r5
 80047d4:	9509      	str	r5, [sp, #36]	; 0x24
 80047d6:	9505      	str	r5, [sp, #20]
 80047d8:	2322      	movs	r3, #34	; 0x22
 80047da:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80048e4 <_strtod_l+0x594>
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	f04f 0800 	mov.w	r8, #0
 80047e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f43f aded 	beq.w	80043c6 <_strtod_l+0x76>
 80047ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80047ee:	4620      	mov	r0, r4
 80047f0:	f001 fa9c 	bl	8005d2c <_Bfree>
 80047f4:	9905      	ldr	r1, [sp, #20]
 80047f6:	4620      	mov	r0, r4
 80047f8:	f001 fa98 	bl	8005d2c <_Bfree>
 80047fc:	4659      	mov	r1, fp
 80047fe:	4620      	mov	r0, r4
 8004800:	f001 fa94 	bl	8005d2c <_Bfree>
 8004804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004806:	4620      	mov	r0, r4
 8004808:	f001 fa90 	bl	8005d2c <_Bfree>
 800480c:	4629      	mov	r1, r5
 800480e:	4620      	mov	r0, r4
 8004810:	f001 fa8c 	bl	8005d2c <_Bfree>
 8004814:	e5d7      	b.n	80043c6 <_strtod_l+0x76>
 8004816:	4b32      	ldr	r3, [pc, #200]	; (80048e0 <_strtod_l+0x590>)
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	2300      	movs	r3, #0
 800481c:	112d      	asrs	r5, r5, #4
 800481e:	4640      	mov	r0, r8
 8004820:	4649      	mov	r1, r9
 8004822:	469a      	mov	sl, r3
 8004824:	2d01      	cmp	r5, #1
 8004826:	dc21      	bgt.n	800486c <_strtod_l+0x51c>
 8004828:	b10b      	cbz	r3, 800482e <_strtod_l+0x4de>
 800482a:	4680      	mov	r8, r0
 800482c:	4689      	mov	r9, r1
 800482e:	492c      	ldr	r1, [pc, #176]	; (80048e0 <_strtod_l+0x590>)
 8004830:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004834:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004840:	f7fb feea 	bl	8000618 <__aeabi_dmul>
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <_strtod_l+0x594>)
 8004846:	460a      	mov	r2, r1
 8004848:	400b      	ands	r3, r1
 800484a:	4927      	ldr	r1, [pc, #156]	; (80048e8 <_strtod_l+0x598>)
 800484c:	428b      	cmp	r3, r1
 800484e:	4680      	mov	r8, r0
 8004850:	d8be      	bhi.n	80047d0 <_strtod_l+0x480>
 8004852:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004856:	428b      	cmp	r3, r1
 8004858:	bf86      	itte	hi
 800485a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80048ec <_strtod_l+0x59c>
 800485e:	f04f 38ff 	movhi.w	r8, #4294967295
 8004862:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004866:	2300      	movs	r3, #0
 8004868:	9304      	str	r3, [sp, #16]
 800486a:	e07b      	b.n	8004964 <_strtod_l+0x614>
 800486c:	07ea      	lsls	r2, r5, #31
 800486e:	d505      	bpl.n	800487c <_strtod_l+0x52c>
 8004870:	9b04      	ldr	r3, [sp, #16]
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fb fecf 	bl	8000618 <__aeabi_dmul>
 800487a:	2301      	movs	r3, #1
 800487c:	9a04      	ldr	r2, [sp, #16]
 800487e:	3208      	adds	r2, #8
 8004880:	f10a 0a01 	add.w	sl, sl, #1
 8004884:	106d      	asrs	r5, r5, #1
 8004886:	9204      	str	r2, [sp, #16]
 8004888:	e7cc      	b.n	8004824 <_strtod_l+0x4d4>
 800488a:	d0ec      	beq.n	8004866 <_strtod_l+0x516>
 800488c:	426d      	negs	r5, r5
 800488e:	f015 020f 	ands.w	r2, r5, #15
 8004892:	d00a      	beq.n	80048aa <_strtod_l+0x55a>
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <_strtod_l+0x58c>)
 8004896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800489a:	4640      	mov	r0, r8
 800489c:	4649      	mov	r1, r9
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb ffe3 	bl	800086c <__aeabi_ddiv>
 80048a6:	4680      	mov	r8, r0
 80048a8:	4689      	mov	r9, r1
 80048aa:	112d      	asrs	r5, r5, #4
 80048ac:	d0db      	beq.n	8004866 <_strtod_l+0x516>
 80048ae:	2d1f      	cmp	r5, #31
 80048b0:	dd1e      	ble.n	80048f0 <_strtod_l+0x5a0>
 80048b2:	2500      	movs	r5, #0
 80048b4:	46ab      	mov	fp, r5
 80048b6:	9509      	str	r5, [sp, #36]	; 0x24
 80048b8:	9505      	str	r5, [sp, #20]
 80048ba:	2322      	movs	r3, #34	; 0x22
 80048bc:	f04f 0800 	mov.w	r8, #0
 80048c0:	f04f 0900 	mov.w	r9, #0
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	e78d      	b.n	80047e4 <_strtod_l+0x494>
 80048c8:	08007107 	.word	0x08007107
 80048cc:	08007120 	.word	0x08007120
 80048d0:	080070fe 	.word	0x080070fe
 80048d4:	08007101 	.word	0x08007101
 80048d8:	08007487 	.word	0x08007487
 80048dc:	08007378 	.word	0x08007378
 80048e0:	08007350 	.word	0x08007350
 80048e4:	7ff00000 	.word	0x7ff00000
 80048e8:	7ca00000 	.word	0x7ca00000
 80048ec:	7fefffff 	.word	0x7fefffff
 80048f0:	f015 0310 	ands.w	r3, r5, #16
 80048f4:	bf18      	it	ne
 80048f6:	236a      	movne	r3, #106	; 0x6a
 80048f8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8004c9c <_strtod_l+0x94c>
 80048fc:	9304      	str	r3, [sp, #16]
 80048fe:	4640      	mov	r0, r8
 8004900:	4649      	mov	r1, r9
 8004902:	2300      	movs	r3, #0
 8004904:	07ea      	lsls	r2, r5, #31
 8004906:	d504      	bpl.n	8004912 <_strtod_l+0x5c2>
 8004908:	e9da 2300 	ldrd	r2, r3, [sl]
 800490c:	f7fb fe84 	bl	8000618 <__aeabi_dmul>
 8004910:	2301      	movs	r3, #1
 8004912:	106d      	asrs	r5, r5, #1
 8004914:	f10a 0a08 	add.w	sl, sl, #8
 8004918:	d1f4      	bne.n	8004904 <_strtod_l+0x5b4>
 800491a:	b10b      	cbz	r3, 8004920 <_strtod_l+0x5d0>
 800491c:	4680      	mov	r8, r0
 800491e:	4689      	mov	r9, r1
 8004920:	9b04      	ldr	r3, [sp, #16]
 8004922:	b1bb      	cbz	r3, 8004954 <_strtod_l+0x604>
 8004924:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004928:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800492c:	2b00      	cmp	r3, #0
 800492e:	4649      	mov	r1, r9
 8004930:	dd10      	ble.n	8004954 <_strtod_l+0x604>
 8004932:	2b1f      	cmp	r3, #31
 8004934:	f340 811e 	ble.w	8004b74 <_strtod_l+0x824>
 8004938:	2b34      	cmp	r3, #52	; 0x34
 800493a:	bfde      	ittt	le
 800493c:	f04f 33ff 	movle.w	r3, #4294967295
 8004940:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004944:	4093      	lslle	r3, r2
 8004946:	f04f 0800 	mov.w	r8, #0
 800494a:	bfcc      	ite	gt
 800494c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004950:	ea03 0901 	andle.w	r9, r3, r1
 8004954:	2200      	movs	r2, #0
 8004956:	2300      	movs	r3, #0
 8004958:	4640      	mov	r0, r8
 800495a:	4649      	mov	r1, r9
 800495c:	f7fc f8c4 	bl	8000ae8 <__aeabi_dcmpeq>
 8004960:	2800      	cmp	r0, #0
 8004962:	d1a6      	bne.n	80048b2 <_strtod_l+0x562>
 8004964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800496a:	4633      	mov	r3, r6
 800496c:	465a      	mov	r2, fp
 800496e:	4620      	mov	r0, r4
 8004970:	f001 fa44 	bl	8005dfc <__s2b>
 8004974:	9009      	str	r0, [sp, #36]	; 0x24
 8004976:	2800      	cmp	r0, #0
 8004978:	f43f af2a 	beq.w	80047d0 <_strtod_l+0x480>
 800497c:	9a08      	ldr	r2, [sp, #32]
 800497e:	9b05      	ldr	r3, [sp, #20]
 8004980:	2a00      	cmp	r2, #0
 8004982:	eba3 0307 	sub.w	r3, r3, r7
 8004986:	bfa8      	it	ge
 8004988:	2300      	movge	r3, #0
 800498a:	930c      	str	r3, [sp, #48]	; 0x30
 800498c:	2500      	movs	r5, #0
 800498e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004992:	9312      	str	r3, [sp, #72]	; 0x48
 8004994:	46ab      	mov	fp, r5
 8004996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004998:	4620      	mov	r0, r4
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	f001 f986 	bl	8005cac <_Balloc>
 80049a0:	9005      	str	r0, [sp, #20]
 80049a2:	2800      	cmp	r0, #0
 80049a4:	f43f af18 	beq.w	80047d8 <_strtod_l+0x488>
 80049a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	3202      	adds	r2, #2
 80049ae:	f103 010c 	add.w	r1, r3, #12
 80049b2:	0092      	lsls	r2, r2, #2
 80049b4:	300c      	adds	r0, #12
 80049b6:	f000 fd00 	bl	80053ba <memcpy>
 80049ba:	ec49 8b10 	vmov	d0, r8, r9
 80049be:	aa18      	add	r2, sp, #96	; 0x60
 80049c0:	a917      	add	r1, sp, #92	; 0x5c
 80049c2:	4620      	mov	r0, r4
 80049c4:	f001 fd4e 	bl	8006464 <__d2b>
 80049c8:	ec49 8b18 	vmov	d8, r8, r9
 80049cc:	9016      	str	r0, [sp, #88]	; 0x58
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f43f af02 	beq.w	80047d8 <_strtod_l+0x488>
 80049d4:	2101      	movs	r1, #1
 80049d6:	4620      	mov	r0, r4
 80049d8:	f001 faa8 	bl	8005f2c <__i2b>
 80049dc:	4683      	mov	fp, r0
 80049de:	2800      	cmp	r0, #0
 80049e0:	f43f aefa 	beq.w	80047d8 <_strtod_l+0x488>
 80049e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80049e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	bfab      	itete	ge
 80049ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80049ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80049f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80049f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80049f6:	bfac      	ite	ge
 80049f8:	eb06 0a03 	addge.w	sl, r6, r3
 80049fc:	1b9f      	sublt	r7, r3, r6
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	1af6      	subs	r6, r6, r3
 8004a02:	4416      	add	r6, r2
 8004a04:	4ba0      	ldr	r3, [pc, #640]	; (8004c88 <_strtod_l+0x938>)
 8004a06:	3e01      	subs	r6, #1
 8004a08:	429e      	cmp	r6, r3
 8004a0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004a0e:	f280 80c4 	bge.w	8004b9a <_strtod_l+0x84a>
 8004a12:	1b9b      	subs	r3, r3, r6
 8004a14:	2b1f      	cmp	r3, #31
 8004a16:	eba2 0203 	sub.w	r2, r2, r3
 8004a1a:	f04f 0101 	mov.w	r1, #1
 8004a1e:	f300 80b0 	bgt.w	8004b82 <_strtod_l+0x832>
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	930e      	str	r3, [sp, #56]	; 0x38
 8004a28:	2300      	movs	r3, #0
 8004a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8004a2c:	eb0a 0602 	add.w	r6, sl, r2
 8004a30:	9b04      	ldr	r3, [sp, #16]
 8004a32:	45b2      	cmp	sl, r6
 8004a34:	4417      	add	r7, r2
 8004a36:	441f      	add	r7, r3
 8004a38:	4653      	mov	r3, sl
 8004a3a:	bfa8      	it	ge
 8004a3c:	4633      	movge	r3, r6
 8004a3e:	42bb      	cmp	r3, r7
 8004a40:	bfa8      	it	ge
 8004a42:	463b      	movge	r3, r7
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bfc2      	ittt	gt
 8004a48:	1af6      	subgt	r6, r6, r3
 8004a4a:	1aff      	subgt	r7, r7, r3
 8004a4c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8004a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	dd17      	ble.n	8004a86 <_strtod_l+0x736>
 8004a56:	4659      	mov	r1, fp
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f001 fb26 	bl	80060ac <__pow5mult>
 8004a60:	4683      	mov	fp, r0
 8004a62:	2800      	cmp	r0, #0
 8004a64:	f43f aeb8 	beq.w	80047d8 <_strtod_l+0x488>
 8004a68:	4601      	mov	r1, r0
 8004a6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f001 fa73 	bl	8005f58 <__multiply>
 8004a72:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a74:	2800      	cmp	r0, #0
 8004a76:	f43f aeaf 	beq.w	80047d8 <_strtod_l+0x488>
 8004a7a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f001 f955 	bl	8005d2c <_Bfree>
 8004a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a84:	9316      	str	r3, [sp, #88]	; 0x58
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	f300 808c 	bgt.w	8004ba4 <_strtod_l+0x854>
 8004a8c:	9b08      	ldr	r3, [sp, #32]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dd08      	ble.n	8004aa4 <_strtod_l+0x754>
 8004a92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a94:	9905      	ldr	r1, [sp, #20]
 8004a96:	4620      	mov	r0, r4
 8004a98:	f001 fb08 	bl	80060ac <__pow5mult>
 8004a9c:	9005      	str	r0, [sp, #20]
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	f43f ae9a 	beq.w	80047d8 <_strtod_l+0x488>
 8004aa4:	2f00      	cmp	r7, #0
 8004aa6:	dd08      	ble.n	8004aba <_strtod_l+0x76a>
 8004aa8:	9905      	ldr	r1, [sp, #20]
 8004aaa:	463a      	mov	r2, r7
 8004aac:	4620      	mov	r0, r4
 8004aae:	f001 fb57 	bl	8006160 <__lshift>
 8004ab2:	9005      	str	r0, [sp, #20]
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f43f ae8f 	beq.w	80047d8 <_strtod_l+0x488>
 8004aba:	f1ba 0f00 	cmp.w	sl, #0
 8004abe:	dd08      	ble.n	8004ad2 <_strtod_l+0x782>
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f001 fb4b 	bl	8006160 <__lshift>
 8004aca:	4683      	mov	fp, r0
 8004acc:	2800      	cmp	r0, #0
 8004ace:	f43f ae83 	beq.w	80047d8 <_strtod_l+0x488>
 8004ad2:	9a05      	ldr	r2, [sp, #20]
 8004ad4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f001 fbca 	bl	8006270 <__mdiff>
 8004adc:	4605      	mov	r5, r0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f43f ae7a 	beq.w	80047d8 <_strtod_l+0x488>
 8004ae4:	68c3      	ldr	r3, [r0, #12]
 8004ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60c3      	str	r3, [r0, #12]
 8004aec:	4659      	mov	r1, fp
 8004aee:	f001 fba3 	bl	8006238 <__mcmp>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	da60      	bge.n	8004bb8 <_strtod_l+0x868>
 8004af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004af8:	ea53 0308 	orrs.w	r3, r3, r8
 8004afc:	f040 8084 	bne.w	8004c08 <_strtod_l+0x8b8>
 8004b00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d17f      	bne.n	8004c08 <_strtod_l+0x8b8>
 8004b08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b0c:	0d1b      	lsrs	r3, r3, #20
 8004b0e:	051b      	lsls	r3, r3, #20
 8004b10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004b14:	d978      	bls.n	8004c08 <_strtod_l+0x8b8>
 8004b16:	696b      	ldr	r3, [r5, #20]
 8004b18:	b913      	cbnz	r3, 8004b20 <_strtod_l+0x7d0>
 8004b1a:	692b      	ldr	r3, [r5, #16]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	dd73      	ble.n	8004c08 <_strtod_l+0x8b8>
 8004b20:	4629      	mov	r1, r5
 8004b22:	2201      	movs	r2, #1
 8004b24:	4620      	mov	r0, r4
 8004b26:	f001 fb1b 	bl	8006160 <__lshift>
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	f001 fb83 	bl	8006238 <__mcmp>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	dd68      	ble.n	8004c08 <_strtod_l+0x8b8>
 8004b36:	9904      	ldr	r1, [sp, #16]
 8004b38:	4a54      	ldr	r2, [pc, #336]	; (8004c8c <_strtod_l+0x93c>)
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	f000 8084 	beq.w	8004c4a <_strtod_l+0x8fa>
 8004b42:	ea02 0109 	and.w	r1, r2, r9
 8004b46:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004b4a:	dc7e      	bgt.n	8004c4a <_strtod_l+0x8fa>
 8004b4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004b50:	f77f aeb3 	ble.w	80048ba <_strtod_l+0x56a>
 8004b54:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <_strtod_l+0x940>)
 8004b56:	4640      	mov	r0, r8
 8004b58:	4649      	mov	r1, r9
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f7fb fd5c 	bl	8000618 <__aeabi_dmul>
 8004b60:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <_strtod_l+0x93c>)
 8004b62:	400b      	ands	r3, r1
 8004b64:	4680      	mov	r8, r0
 8004b66:	4689      	mov	r9, r1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f47f ae3f 	bne.w	80047ec <_strtod_l+0x49c>
 8004b6e:	2322      	movs	r3, #34	; 0x22
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	e63b      	b.n	80047ec <_strtod_l+0x49c>
 8004b74:	f04f 32ff 	mov.w	r2, #4294967295
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	ea03 0808 	and.w	r8, r3, r8
 8004b80:	e6e8      	b.n	8004954 <_strtod_l+0x604>
 8004b82:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004b86:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004b8a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004b8e:	36e2      	adds	r6, #226	; 0xe2
 8004b90:	fa01 f306 	lsl.w	r3, r1, r6
 8004b94:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8004b98:	e748      	b.n	8004a2c <_strtod_l+0x6dc>
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8004ba2:	e743      	b.n	8004a2c <_strtod_l+0x6dc>
 8004ba4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004ba6:	4632      	mov	r2, r6
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f001 fad9 	bl	8006160 <__lshift>
 8004bae:	9016      	str	r0, [sp, #88]	; 0x58
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f47f af6b 	bne.w	8004a8c <_strtod_l+0x73c>
 8004bb6:	e60f      	b.n	80047d8 <_strtod_l+0x488>
 8004bb8:	46ca      	mov	sl, r9
 8004bba:	d171      	bne.n	8004ca0 <_strtod_l+0x950>
 8004bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bbe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bc2:	b352      	cbz	r2, 8004c1a <_strtod_l+0x8ca>
 8004bc4:	4a33      	ldr	r2, [pc, #204]	; (8004c94 <_strtod_l+0x944>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d12a      	bne.n	8004c20 <_strtod_l+0x8d0>
 8004bca:	9b04      	ldr	r3, [sp, #16]
 8004bcc:	4641      	mov	r1, r8
 8004bce:	b1fb      	cbz	r3, 8004c10 <_strtod_l+0x8c0>
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <_strtod_l+0x93c>)
 8004bd2:	ea09 0303 	and.w	r3, r9, r3
 8004bd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004bda:	f04f 32ff 	mov.w	r2, #4294967295
 8004bde:	d81a      	bhi.n	8004c16 <_strtod_l+0x8c6>
 8004be0:	0d1b      	lsrs	r3, r3, #20
 8004be2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	4299      	cmp	r1, r3
 8004bec:	d118      	bne.n	8004c20 <_strtod_l+0x8d0>
 8004bee:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <_strtod_l+0x948>)
 8004bf0:	459a      	cmp	sl, r3
 8004bf2:	d102      	bne.n	8004bfa <_strtod_l+0x8aa>
 8004bf4:	3101      	adds	r1, #1
 8004bf6:	f43f adef 	beq.w	80047d8 <_strtod_l+0x488>
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <_strtod_l+0x93c>)
 8004bfc:	ea0a 0303 	and.w	r3, sl, r3
 8004c00:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8004c04:	f04f 0800 	mov.w	r8, #0
 8004c08:	9b04      	ldr	r3, [sp, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1a2      	bne.n	8004b54 <_strtod_l+0x804>
 8004c0e:	e5ed      	b.n	80047ec <_strtod_l+0x49c>
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295
 8004c14:	e7e9      	b.n	8004bea <_strtod_l+0x89a>
 8004c16:	4613      	mov	r3, r2
 8004c18:	e7e7      	b.n	8004bea <_strtod_l+0x89a>
 8004c1a:	ea53 0308 	orrs.w	r3, r3, r8
 8004c1e:	d08a      	beq.n	8004b36 <_strtod_l+0x7e6>
 8004c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c22:	b1e3      	cbz	r3, 8004c5e <_strtod_l+0x90e>
 8004c24:	ea13 0f0a 	tst.w	r3, sl
 8004c28:	d0ee      	beq.n	8004c08 <_strtod_l+0x8b8>
 8004c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c2c:	9a04      	ldr	r2, [sp, #16]
 8004c2e:	4640      	mov	r0, r8
 8004c30:	4649      	mov	r1, r9
 8004c32:	b1c3      	cbz	r3, 8004c66 <_strtod_l+0x916>
 8004c34:	f7ff fb6d 	bl	8004312 <sulp>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	ec51 0b18 	vmov	r0, r1, d8
 8004c40:	f7fb fb34 	bl	80002ac <__adddf3>
 8004c44:	4680      	mov	r8, r0
 8004c46:	4689      	mov	r9, r1
 8004c48:	e7de      	b.n	8004c08 <_strtod_l+0x8b8>
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004c50:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004c54:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004c58:	f04f 38ff 	mov.w	r8, #4294967295
 8004c5c:	e7d4      	b.n	8004c08 <_strtod_l+0x8b8>
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c60:	ea13 0f08 	tst.w	r3, r8
 8004c64:	e7e0      	b.n	8004c28 <_strtod_l+0x8d8>
 8004c66:	f7ff fb54 	bl	8004312 <sulp>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	ec51 0b18 	vmov	r0, r1, d8
 8004c72:	f7fb fb19 	bl	80002a8 <__aeabi_dsub>
 8004c76:	2200      	movs	r2, #0
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4680      	mov	r8, r0
 8004c7c:	4689      	mov	r9, r1
 8004c7e:	f7fb ff33 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0c0      	beq.n	8004c08 <_strtod_l+0x8b8>
 8004c86:	e618      	b.n	80048ba <_strtod_l+0x56a>
 8004c88:	fffffc02 	.word	0xfffffc02
 8004c8c:	7ff00000 	.word	0x7ff00000
 8004c90:	39500000 	.word	0x39500000
 8004c94:	000fffff 	.word	0x000fffff
 8004c98:	7fefffff 	.word	0x7fefffff
 8004c9c:	08007138 	.word	0x08007138
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f001 fc38 	bl	8006518 <__ratio>
 8004ca8:	ec57 6b10 	vmov	r6, r7, d0
 8004cac:	ee10 0a10 	vmov	r0, s0
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cb6:	4639      	mov	r1, r7
 8004cb8:	f7fb ff2a 	bl	8000b10 <__aeabi_dcmple>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d071      	beq.n	8004da4 <_strtod_l+0xa54>
 8004cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d17c      	bne.n	8004dc0 <_strtod_l+0xa70>
 8004cc6:	f1b8 0f00 	cmp.w	r8, #0
 8004cca:	d15a      	bne.n	8004d82 <_strtod_l+0xa32>
 8004ccc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d15d      	bne.n	8004d90 <_strtod_l+0xa40>
 8004cd4:	4b90      	ldr	r3, [pc, #576]	; (8004f18 <_strtod_l+0xbc8>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4630      	mov	r0, r6
 8004cda:	4639      	mov	r1, r7
 8004cdc:	f7fb ff0e 	bl	8000afc <__aeabi_dcmplt>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d15c      	bne.n	8004d9e <_strtod_l+0xa4e>
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	4b8c      	ldr	r3, [pc, #560]	; (8004f1c <_strtod_l+0xbcc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	f7fb fc94 	bl	8000618 <__aeabi_dmul>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	460f      	mov	r7, r1
 8004cf4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004cf8:	9606      	str	r6, [sp, #24]
 8004cfa:	9307      	str	r3, [sp, #28]
 8004cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d00:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004d04:	4b86      	ldr	r3, [pc, #536]	; (8004f20 <_strtod_l+0xbd0>)
 8004d06:	ea0a 0303 	and.w	r3, sl, r3
 8004d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8004d0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d0e:	4b85      	ldr	r3, [pc, #532]	; (8004f24 <_strtod_l+0xbd4>)
 8004d10:	429a      	cmp	r2, r3
 8004d12:	f040 8090 	bne.w	8004e36 <_strtod_l+0xae6>
 8004d16:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8004d1a:	ec49 8b10 	vmov	d0, r8, r9
 8004d1e:	f001 fb31 	bl	8006384 <__ulp>
 8004d22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d26:	ec51 0b10 	vmov	r0, r1, d0
 8004d2a:	f7fb fc75 	bl	8000618 <__aeabi_dmul>
 8004d2e:	4642      	mov	r2, r8
 8004d30:	464b      	mov	r3, r9
 8004d32:	f7fb fabb 	bl	80002ac <__adddf3>
 8004d36:	460b      	mov	r3, r1
 8004d38:	4979      	ldr	r1, [pc, #484]	; (8004f20 <_strtod_l+0xbd0>)
 8004d3a:	4a7b      	ldr	r2, [pc, #492]	; (8004f28 <_strtod_l+0xbd8>)
 8004d3c:	4019      	ands	r1, r3
 8004d3e:	4291      	cmp	r1, r2
 8004d40:	4680      	mov	r8, r0
 8004d42:	d944      	bls.n	8004dce <_strtod_l+0xa7e>
 8004d44:	ee18 2a90 	vmov	r2, s17
 8004d48:	4b78      	ldr	r3, [pc, #480]	; (8004f2c <_strtod_l+0xbdc>)
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d104      	bne.n	8004d58 <_strtod_l+0xa08>
 8004d4e:	ee18 3a10 	vmov	r3, s16
 8004d52:	3301      	adds	r3, #1
 8004d54:	f43f ad40 	beq.w	80047d8 <_strtod_l+0x488>
 8004d58:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8004f2c <_strtod_l+0xbdc>
 8004d5c:	f04f 38ff 	mov.w	r8, #4294967295
 8004d60:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 ffe2 	bl	8005d2c <_Bfree>
 8004d68:	9905      	ldr	r1, [sp, #20]
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f000 ffde 	bl	8005d2c <_Bfree>
 8004d70:	4659      	mov	r1, fp
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 ffda 	bl	8005d2c <_Bfree>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 ffd6 	bl	8005d2c <_Bfree>
 8004d80:	e609      	b.n	8004996 <_strtod_l+0x646>
 8004d82:	f1b8 0f01 	cmp.w	r8, #1
 8004d86:	d103      	bne.n	8004d90 <_strtod_l+0xa40>
 8004d88:	f1b9 0f00 	cmp.w	r9, #0
 8004d8c:	f43f ad95 	beq.w	80048ba <_strtod_l+0x56a>
 8004d90:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8004ee8 <_strtod_l+0xb98>
 8004d94:	4f60      	ldr	r7, [pc, #384]	; (8004f18 <_strtod_l+0xbc8>)
 8004d96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	e7ae      	b.n	8004cfc <_strtod_l+0x9ac>
 8004d9e:	4f5f      	ldr	r7, [pc, #380]	; (8004f1c <_strtod_l+0xbcc>)
 8004da0:	2600      	movs	r6, #0
 8004da2:	e7a7      	b.n	8004cf4 <_strtod_l+0x9a4>
 8004da4:	4b5d      	ldr	r3, [pc, #372]	; (8004f1c <_strtod_l+0xbcc>)
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	2200      	movs	r2, #0
 8004dac:	f7fb fc34 	bl	8000618 <__aeabi_dmul>
 8004db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004db2:	4606      	mov	r6, r0
 8004db4:	460f      	mov	r7, r1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d09c      	beq.n	8004cf4 <_strtod_l+0x9a4>
 8004dba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004dbe:	e79d      	b.n	8004cfc <_strtod_l+0x9ac>
 8004dc0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8004ef0 <_strtod_l+0xba0>
 8004dc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004dc8:	ec57 6b17 	vmov	r6, r7, d7
 8004dcc:	e796      	b.n	8004cfc <_strtod_l+0x9ac>
 8004dce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004dd2:	9b04      	ldr	r3, [sp, #16]
 8004dd4:	46ca      	mov	sl, r9
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1c2      	bne.n	8004d60 <_strtod_l+0xa10>
 8004dda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004de0:	0d1b      	lsrs	r3, r3, #20
 8004de2:	051b      	lsls	r3, r3, #20
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d1bb      	bne.n	8004d60 <_strtod_l+0xa10>
 8004de8:	4630      	mov	r0, r6
 8004dea:	4639      	mov	r1, r7
 8004dec:	f7fb ff36 	bl	8000c5c <__aeabi_d2lz>
 8004df0:	f7fb fbe4 	bl	80005bc <__aeabi_l2d>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4630      	mov	r0, r6
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	f7fb fa54 	bl	80002a8 <__aeabi_dsub>
 8004e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e06:	ea43 0308 	orr.w	r3, r3, r8
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	460f      	mov	r7, r1
 8004e10:	d054      	beq.n	8004ebc <_strtod_l+0xb6c>
 8004e12:	a339      	add	r3, pc, #228	; (adr r3, 8004ef8 <_strtod_l+0xba8>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb fe70 	bl	8000afc <__aeabi_dcmplt>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f47f ace5 	bne.w	80047ec <_strtod_l+0x49c>
 8004e22:	a337      	add	r3, pc, #220	; (adr r3, 8004f00 <_strtod_l+0xbb0>)
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb fe84 	bl	8000b38 <__aeabi_dcmpgt>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d095      	beq.n	8004d60 <_strtod_l+0xa10>
 8004e34:	e4da      	b.n	80047ec <_strtod_l+0x49c>
 8004e36:	9b04      	ldr	r3, [sp, #16]
 8004e38:	b333      	cbz	r3, 8004e88 <_strtod_l+0xb38>
 8004e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004e40:	d822      	bhi.n	8004e88 <_strtod_l+0xb38>
 8004e42:	a331      	add	r3, pc, #196	; (adr r3, 8004f08 <_strtod_l+0xbb8>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	4630      	mov	r0, r6
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	f7fb fe60 	bl	8000b10 <__aeabi_dcmple>
 8004e50:	b1a0      	cbz	r0, 8004e7c <_strtod_l+0xb2c>
 8004e52:	4639      	mov	r1, r7
 8004e54:	4630      	mov	r0, r6
 8004e56:	f7fb fe79 	bl	8000b4c <__aeabi_d2uiz>
 8004e5a:	2801      	cmp	r0, #1
 8004e5c:	bf38      	it	cc
 8004e5e:	2001      	movcc	r0, #1
 8004e60:	f7fb fb60 	bl	8000524 <__aeabi_ui2d>
 8004e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e66:	4606      	mov	r6, r0
 8004e68:	460f      	mov	r7, r1
 8004e6a:	bb23      	cbnz	r3, 8004eb6 <_strtod_l+0xb66>
 8004e6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e70:	9010      	str	r0, [sp, #64]	; 0x40
 8004e72:	9311      	str	r3, [sp, #68]	; 0x44
 8004e74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e80:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e8c:	eeb0 0a48 	vmov.f32	s0, s16
 8004e90:	eef0 0a68 	vmov.f32	s1, s17
 8004e94:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004e98:	f001 fa74 	bl	8006384 <__ulp>
 8004e9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ea0:	ec53 2b10 	vmov	r2, r3, d0
 8004ea4:	f7fb fbb8 	bl	8000618 <__aeabi_dmul>
 8004ea8:	ec53 2b18 	vmov	r2, r3, d8
 8004eac:	f7fb f9fe 	bl	80002ac <__adddf3>
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	4689      	mov	r9, r1
 8004eb4:	e78d      	b.n	8004dd2 <_strtod_l+0xa82>
 8004eb6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004eba:	e7db      	b.n	8004e74 <_strtod_l+0xb24>
 8004ebc:	a314      	add	r3, pc, #80	; (adr r3, 8004f10 <_strtod_l+0xbc0>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb fe1b 	bl	8000afc <__aeabi_dcmplt>
 8004ec6:	e7b3      	b.n	8004e30 <_strtod_l+0xae0>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	930a      	str	r3, [sp, #40]	; 0x28
 8004ecc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	f7ff ba7c 	b.w	80043ce <_strtod_l+0x7e>
 8004ed6:	2a65      	cmp	r2, #101	; 0x65
 8004ed8:	f43f ab75 	beq.w	80045c6 <_strtod_l+0x276>
 8004edc:	2a45      	cmp	r2, #69	; 0x45
 8004ede:	f43f ab72 	beq.w	80045c6 <_strtod_l+0x276>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f7ff bbaa 	b.w	800463c <_strtod_l+0x2ec>
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	bff00000 	.word	0xbff00000
 8004ef0:	00000000 	.word	0x00000000
 8004ef4:	3ff00000 	.word	0x3ff00000
 8004ef8:	94a03595 	.word	0x94a03595
 8004efc:	3fdfffff 	.word	0x3fdfffff
 8004f00:	35afe535 	.word	0x35afe535
 8004f04:	3fe00000 	.word	0x3fe00000
 8004f08:	ffc00000 	.word	0xffc00000
 8004f0c:	41dfffff 	.word	0x41dfffff
 8004f10:	94a03595 	.word	0x94a03595
 8004f14:	3fcfffff 	.word	0x3fcfffff
 8004f18:	3ff00000 	.word	0x3ff00000
 8004f1c:	3fe00000 	.word	0x3fe00000
 8004f20:	7ff00000 	.word	0x7ff00000
 8004f24:	7fe00000 	.word	0x7fe00000
 8004f28:	7c9fffff 	.word	0x7c9fffff
 8004f2c:	7fefffff 	.word	0x7fefffff

08004f30 <strtod>:
 8004f30:	460a      	mov	r2, r1
 8004f32:	4601      	mov	r1, r0
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <strtod+0x10>)
 8004f36:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <strtod+0x14>)
 8004f38:	6800      	ldr	r0, [r0, #0]
 8004f3a:	f7ff ba09 	b.w	8004350 <_strtod_l>
 8004f3e:	bf00      	nop
 8004f40:	200001d0 	.word	0x200001d0
 8004f44:	20000018 	.word	0x20000018

08004f48 <_strtol_l.constprop.0>:
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4e:	d001      	beq.n	8004f54 <_strtol_l.constprop.0+0xc>
 8004f50:	2b24      	cmp	r3, #36	; 0x24
 8004f52:	d906      	bls.n	8004f62 <_strtol_l.constprop.0+0x1a>
 8004f54:	f000 fa04 	bl	8005360 <__errno>
 8004f58:	2316      	movs	r3, #22
 8004f5a:	6003      	str	r3, [r0, #0]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005048 <_strtol_l.constprop.0+0x100>
 8004f66:	460d      	mov	r5, r1
 8004f68:	462e      	mov	r6, r5
 8004f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f6e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004f72:	f017 0708 	ands.w	r7, r7, #8
 8004f76:	d1f7      	bne.n	8004f68 <_strtol_l.constprop.0+0x20>
 8004f78:	2c2d      	cmp	r4, #45	; 0x2d
 8004f7a:	d132      	bne.n	8004fe2 <_strtol_l.constprop.0+0x9a>
 8004f7c:	782c      	ldrb	r4, [r5, #0]
 8004f7e:	2701      	movs	r7, #1
 8004f80:	1cb5      	adds	r5, r6, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d05b      	beq.n	800503e <_strtol_l.constprop.0+0xf6>
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d109      	bne.n	8004f9e <_strtol_l.constprop.0+0x56>
 8004f8a:	2c30      	cmp	r4, #48	; 0x30
 8004f8c:	d107      	bne.n	8004f9e <_strtol_l.constprop.0+0x56>
 8004f8e:	782c      	ldrb	r4, [r5, #0]
 8004f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004f94:	2c58      	cmp	r4, #88	; 0x58
 8004f96:	d14d      	bne.n	8005034 <_strtol_l.constprop.0+0xec>
 8004f98:	786c      	ldrb	r4, [r5, #1]
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	3502      	adds	r5, #2
 8004f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fa6:	f04f 0e00 	mov.w	lr, #0
 8004faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8004fae:	4676      	mov	r6, lr
 8004fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8004fb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004fb8:	f1bc 0f09 	cmp.w	ip, #9
 8004fbc:	d816      	bhi.n	8004fec <_strtol_l.constprop.0+0xa4>
 8004fbe:	4664      	mov	r4, ip
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	dd24      	ble.n	800500e <_strtol_l.constprop.0+0xc6>
 8004fc4:	f1be 3fff 	cmp.w	lr, #4294967295
 8004fc8:	d008      	beq.n	8004fdc <_strtol_l.constprop.0+0x94>
 8004fca:	45b1      	cmp	r9, r6
 8004fcc:	d31c      	bcc.n	8005008 <_strtol_l.constprop.0+0xc0>
 8004fce:	d101      	bne.n	8004fd4 <_strtol_l.constprop.0+0x8c>
 8004fd0:	45a2      	cmp	sl, r4
 8004fd2:	db19      	blt.n	8005008 <_strtol_l.constprop.0+0xc0>
 8004fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8004fd8:	f04f 0e01 	mov.w	lr, #1
 8004fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fe0:	e7e8      	b.n	8004fb4 <_strtol_l.constprop.0+0x6c>
 8004fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8004fe4:	bf04      	itt	eq
 8004fe6:	782c      	ldrbeq	r4, [r5, #0]
 8004fe8:	1cb5      	addeq	r5, r6, #2
 8004fea:	e7ca      	b.n	8004f82 <_strtol_l.constprop.0+0x3a>
 8004fec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ff0:	f1bc 0f19 	cmp.w	ip, #25
 8004ff4:	d801      	bhi.n	8004ffa <_strtol_l.constprop.0+0xb2>
 8004ff6:	3c37      	subs	r4, #55	; 0x37
 8004ff8:	e7e2      	b.n	8004fc0 <_strtol_l.constprop.0+0x78>
 8004ffa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ffe:	f1bc 0f19 	cmp.w	ip, #25
 8005002:	d804      	bhi.n	800500e <_strtol_l.constprop.0+0xc6>
 8005004:	3c57      	subs	r4, #87	; 0x57
 8005006:	e7db      	b.n	8004fc0 <_strtol_l.constprop.0+0x78>
 8005008:	f04f 3eff 	mov.w	lr, #4294967295
 800500c:	e7e6      	b.n	8004fdc <_strtol_l.constprop.0+0x94>
 800500e:	f1be 3fff 	cmp.w	lr, #4294967295
 8005012:	d105      	bne.n	8005020 <_strtol_l.constprop.0+0xd8>
 8005014:	2322      	movs	r3, #34	; 0x22
 8005016:	6003      	str	r3, [r0, #0]
 8005018:	4646      	mov	r6, r8
 800501a:	b942      	cbnz	r2, 800502e <_strtol_l.constprop.0+0xe6>
 800501c:	4630      	mov	r0, r6
 800501e:	e79e      	b.n	8004f5e <_strtol_l.constprop.0+0x16>
 8005020:	b107      	cbz	r7, 8005024 <_strtol_l.constprop.0+0xdc>
 8005022:	4276      	negs	r6, r6
 8005024:	2a00      	cmp	r2, #0
 8005026:	d0f9      	beq.n	800501c <_strtol_l.constprop.0+0xd4>
 8005028:	f1be 0f00 	cmp.w	lr, #0
 800502c:	d000      	beq.n	8005030 <_strtol_l.constprop.0+0xe8>
 800502e:	1e69      	subs	r1, r5, #1
 8005030:	6011      	str	r1, [r2, #0]
 8005032:	e7f3      	b.n	800501c <_strtol_l.constprop.0+0xd4>
 8005034:	2430      	movs	r4, #48	; 0x30
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1b1      	bne.n	8004f9e <_strtol_l.constprop.0+0x56>
 800503a:	2308      	movs	r3, #8
 800503c:	e7af      	b.n	8004f9e <_strtol_l.constprop.0+0x56>
 800503e:	2c30      	cmp	r4, #48	; 0x30
 8005040:	d0a5      	beq.n	8004f8e <_strtol_l.constprop.0+0x46>
 8005042:	230a      	movs	r3, #10
 8005044:	e7ab      	b.n	8004f9e <_strtol_l.constprop.0+0x56>
 8005046:	bf00      	nop
 8005048:	08007161 	.word	0x08007161

0800504c <strtol>:
 800504c:	4613      	mov	r3, r2
 800504e:	460a      	mov	r2, r1
 8005050:	4601      	mov	r1, r0
 8005052:	4802      	ldr	r0, [pc, #8]	; (800505c <strtol+0x10>)
 8005054:	6800      	ldr	r0, [r0, #0]
 8005056:	f7ff bf77 	b.w	8004f48 <_strtol_l.constprop.0>
 800505a:	bf00      	nop
 800505c:	200001d0 	.word	0x200001d0

08005060 <std>:
 8005060:	2300      	movs	r3, #0
 8005062:	b510      	push	{r4, lr}
 8005064:	4604      	mov	r4, r0
 8005066:	e9c0 3300 	strd	r3, r3, [r0]
 800506a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800506e:	6083      	str	r3, [r0, #8]
 8005070:	8181      	strh	r1, [r0, #12]
 8005072:	6643      	str	r3, [r0, #100]	; 0x64
 8005074:	81c2      	strh	r2, [r0, #14]
 8005076:	6183      	str	r3, [r0, #24]
 8005078:	4619      	mov	r1, r3
 800507a:	2208      	movs	r2, #8
 800507c:	305c      	adds	r0, #92	; 0x5c
 800507e:	f000 f8f4 	bl	800526a <memset>
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <std+0x58>)
 8005084:	6263      	str	r3, [r4, #36]	; 0x24
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <std+0x5c>)
 8005088:	62a3      	str	r3, [r4, #40]	; 0x28
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <std+0x60>)
 800508c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800508e:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <std+0x64>)
 8005090:	6323      	str	r3, [r4, #48]	; 0x30
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <std+0x68>)
 8005094:	6224      	str	r4, [r4, #32]
 8005096:	429c      	cmp	r4, r3
 8005098:	d006      	beq.n	80050a8 <std+0x48>
 800509a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800509e:	4294      	cmp	r4, r2
 80050a0:	d002      	beq.n	80050a8 <std+0x48>
 80050a2:	33d0      	adds	r3, #208	; 0xd0
 80050a4:	429c      	cmp	r4, r3
 80050a6:	d105      	bne.n	80050b4 <std+0x54>
 80050a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b0:	f000 b980 	b.w	80053b4 <__retarget_lock_init_recursive>
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	bf00      	nop
 80050b8:	080051e5 	.word	0x080051e5
 80050bc:	08005207 	.word	0x08005207
 80050c0:	0800523f 	.word	0x0800523f
 80050c4:	08005263 	.word	0x08005263
 80050c8:	20000494 	.word	0x20000494

080050cc <stdio_exit_handler>:
 80050cc:	4a02      	ldr	r2, [pc, #8]	; (80050d8 <stdio_exit_handler+0xc>)
 80050ce:	4903      	ldr	r1, [pc, #12]	; (80050dc <stdio_exit_handler+0x10>)
 80050d0:	4803      	ldr	r0, [pc, #12]	; (80050e0 <stdio_exit_handler+0x14>)
 80050d2:	f000 b869 	b.w	80051a8 <_fwalk_sglue>
 80050d6:	bf00      	nop
 80050d8:	2000000c 	.word	0x2000000c
 80050dc:	0800672d 	.word	0x0800672d
 80050e0:	20000184 	.word	0x20000184

080050e4 <cleanup_stdio>:
 80050e4:	6841      	ldr	r1, [r0, #4]
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <cleanup_stdio+0x34>)
 80050e8:	4299      	cmp	r1, r3
 80050ea:	b510      	push	{r4, lr}
 80050ec:	4604      	mov	r4, r0
 80050ee:	d001      	beq.n	80050f4 <cleanup_stdio+0x10>
 80050f0:	f001 fb1c 	bl	800672c <_fflush_r>
 80050f4:	68a1      	ldr	r1, [r4, #8]
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <cleanup_stdio+0x38>)
 80050f8:	4299      	cmp	r1, r3
 80050fa:	d002      	beq.n	8005102 <cleanup_stdio+0x1e>
 80050fc:	4620      	mov	r0, r4
 80050fe:	f001 fb15 	bl	800672c <_fflush_r>
 8005102:	68e1      	ldr	r1, [r4, #12]
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <cleanup_stdio+0x3c>)
 8005106:	4299      	cmp	r1, r3
 8005108:	d004      	beq.n	8005114 <cleanup_stdio+0x30>
 800510a:	4620      	mov	r0, r4
 800510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005110:	f001 bb0c 	b.w	800672c <_fflush_r>
 8005114:	bd10      	pop	{r4, pc}
 8005116:	bf00      	nop
 8005118:	20000494 	.word	0x20000494
 800511c:	200004fc 	.word	0x200004fc
 8005120:	20000564 	.word	0x20000564

08005124 <global_stdio_init.part.0>:
 8005124:	b510      	push	{r4, lr}
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <global_stdio_init.part.0+0x30>)
 8005128:	4c0b      	ldr	r4, [pc, #44]	; (8005158 <global_stdio_init.part.0+0x34>)
 800512a:	4a0c      	ldr	r2, [pc, #48]	; (800515c <global_stdio_init.part.0+0x38>)
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	4620      	mov	r0, r4
 8005130:	2200      	movs	r2, #0
 8005132:	2104      	movs	r1, #4
 8005134:	f7ff ff94 	bl	8005060 <std>
 8005138:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800513c:	2201      	movs	r2, #1
 800513e:	2109      	movs	r1, #9
 8005140:	f7ff ff8e 	bl	8005060 <std>
 8005144:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005148:	2202      	movs	r2, #2
 800514a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800514e:	2112      	movs	r1, #18
 8005150:	f7ff bf86 	b.w	8005060 <std>
 8005154:	200005cc 	.word	0x200005cc
 8005158:	20000494 	.word	0x20000494
 800515c:	080050cd 	.word	0x080050cd

08005160 <__sfp_lock_acquire>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__sfp_lock_acquire+0x8>)
 8005162:	f000 b928 	b.w	80053b6 <__retarget_lock_acquire_recursive>
 8005166:	bf00      	nop
 8005168:	200005d5 	.word	0x200005d5

0800516c <__sfp_lock_release>:
 800516c:	4801      	ldr	r0, [pc, #4]	; (8005174 <__sfp_lock_release+0x8>)
 800516e:	f000 b923 	b.w	80053b8 <__retarget_lock_release_recursive>
 8005172:	bf00      	nop
 8005174:	200005d5 	.word	0x200005d5

08005178 <__sinit>:
 8005178:	b510      	push	{r4, lr}
 800517a:	4604      	mov	r4, r0
 800517c:	f7ff fff0 	bl	8005160 <__sfp_lock_acquire>
 8005180:	6a23      	ldr	r3, [r4, #32]
 8005182:	b11b      	cbz	r3, 800518c <__sinit+0x14>
 8005184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005188:	f7ff bff0 	b.w	800516c <__sfp_lock_release>
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <__sinit+0x28>)
 800518e:	6223      	str	r3, [r4, #32]
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <__sinit+0x2c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f5      	bne.n	8005184 <__sinit+0xc>
 8005198:	f7ff ffc4 	bl	8005124 <global_stdio_init.part.0>
 800519c:	e7f2      	b.n	8005184 <__sinit+0xc>
 800519e:	bf00      	nop
 80051a0:	080050e5 	.word	0x080050e5
 80051a4:	200005cc 	.word	0x200005cc

080051a8 <_fwalk_sglue>:
 80051a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ac:	4607      	mov	r7, r0
 80051ae:	4688      	mov	r8, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	2600      	movs	r6, #0
 80051b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051b8:	f1b9 0901 	subs.w	r9, r9, #1
 80051bc:	d505      	bpl.n	80051ca <_fwalk_sglue+0x22>
 80051be:	6824      	ldr	r4, [r4, #0]
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	d1f7      	bne.n	80051b4 <_fwalk_sglue+0xc>
 80051c4:	4630      	mov	r0, r6
 80051c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d907      	bls.n	80051e0 <_fwalk_sglue+0x38>
 80051d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051d4:	3301      	adds	r3, #1
 80051d6:	d003      	beq.n	80051e0 <_fwalk_sglue+0x38>
 80051d8:	4629      	mov	r1, r5
 80051da:	4638      	mov	r0, r7
 80051dc:	47c0      	blx	r8
 80051de:	4306      	orrs	r6, r0
 80051e0:	3568      	adds	r5, #104	; 0x68
 80051e2:	e7e9      	b.n	80051b8 <_fwalk_sglue+0x10>

080051e4 <__sread>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	460c      	mov	r4, r1
 80051e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ec:	f000 f894 	bl	8005318 <_read_r>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	bfab      	itete	ge
 80051f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051f6:	89a3      	ldrhlt	r3, [r4, #12]
 80051f8:	181b      	addge	r3, r3, r0
 80051fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051fe:	bfac      	ite	ge
 8005200:	6563      	strge	r3, [r4, #84]	; 0x54
 8005202:	81a3      	strhlt	r3, [r4, #12]
 8005204:	bd10      	pop	{r4, pc}

08005206 <__swrite>:
 8005206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520a:	461f      	mov	r7, r3
 800520c:	898b      	ldrh	r3, [r1, #12]
 800520e:	05db      	lsls	r3, r3, #23
 8005210:	4605      	mov	r5, r0
 8005212:	460c      	mov	r4, r1
 8005214:	4616      	mov	r6, r2
 8005216:	d505      	bpl.n	8005224 <__swrite+0x1e>
 8005218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521c:	2302      	movs	r3, #2
 800521e:	2200      	movs	r2, #0
 8005220:	f000 f868 	bl	80052f4 <_lseek_r>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800522a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800522e:	81a3      	strh	r3, [r4, #12]
 8005230:	4632      	mov	r2, r6
 8005232:	463b      	mov	r3, r7
 8005234:	4628      	mov	r0, r5
 8005236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800523a:	f000 b87f 	b.w	800533c <_write_r>

0800523e <__sseek>:
 800523e:	b510      	push	{r4, lr}
 8005240:	460c      	mov	r4, r1
 8005242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005246:	f000 f855 	bl	80052f4 <_lseek_r>
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	bf15      	itete	ne
 8005250:	6560      	strne	r0, [r4, #84]	; 0x54
 8005252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800525a:	81a3      	strheq	r3, [r4, #12]
 800525c:	bf18      	it	ne
 800525e:	81a3      	strhne	r3, [r4, #12]
 8005260:	bd10      	pop	{r4, pc}

08005262 <__sclose>:
 8005262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005266:	f000 b835 	b.w	80052d4 <_close_r>

0800526a <memset>:
 800526a:	4402      	add	r2, r0
 800526c:	4603      	mov	r3, r0
 800526e:	4293      	cmp	r3, r2
 8005270:	d100      	bne.n	8005274 <memset+0xa>
 8005272:	4770      	bx	lr
 8005274:	f803 1b01 	strb.w	r1, [r3], #1
 8005278:	e7f9      	b.n	800526e <memset+0x4>

0800527a <strncmp>:
 800527a:	b510      	push	{r4, lr}
 800527c:	b16a      	cbz	r2, 800529a <strncmp+0x20>
 800527e:	3901      	subs	r1, #1
 8005280:	1884      	adds	r4, r0, r2
 8005282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005286:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800528a:	429a      	cmp	r2, r3
 800528c:	d103      	bne.n	8005296 <strncmp+0x1c>
 800528e:	42a0      	cmp	r0, r4
 8005290:	d001      	beq.n	8005296 <strncmp+0x1c>
 8005292:	2a00      	cmp	r2, #0
 8005294:	d1f5      	bne.n	8005282 <strncmp+0x8>
 8005296:	1ad0      	subs	r0, r2, r3
 8005298:	bd10      	pop	{r4, pc}
 800529a:	4610      	mov	r0, r2
 800529c:	e7fc      	b.n	8005298 <strncmp+0x1e>

0800529e <strpbrk>:
 800529e:	b570      	push	{r4, r5, r6, lr}
 80052a0:	7803      	ldrb	r3, [r0, #0]
 80052a2:	b1a3      	cbz	r3, 80052ce <strpbrk+0x30>
 80052a4:	4603      	mov	r3, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	4618      	mov	r0, r3
 80052aa:	f813 5b01 	ldrb.w	r5, [r3], #1
 80052ae:	b14d      	cbz	r5, 80052c4 <strpbrk+0x26>
 80052b0:	460a      	mov	r2, r1
 80052b2:	e001      	b.n	80052b8 <strpbrk+0x1a>
 80052b4:	42ae      	cmp	r6, r5
 80052b6:	d009      	beq.n	80052cc <strpbrk+0x2e>
 80052b8:	4614      	mov	r4, r2
 80052ba:	f812 6b01 	ldrb.w	r6, [r2], #1
 80052be:	2e00      	cmp	r6, #0
 80052c0:	d1f8      	bne.n	80052b4 <strpbrk+0x16>
 80052c2:	e7f1      	b.n	80052a8 <strpbrk+0xa>
 80052c4:	7823      	ldrb	r3, [r4, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bf08      	it	eq
 80052ca:	2000      	moveq	r0, #0
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	4618      	mov	r0, r3
 80052d0:	e7fc      	b.n	80052cc <strpbrk+0x2e>
	...

080052d4 <_close_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d06      	ldr	r5, [pc, #24]	; (80052f0 <_close_r+0x1c>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fc fc75 	bl	8001bce <_close>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_close_r+0x1a>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_close_r+0x1a>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	200005d0 	.word	0x200005d0

080052f4 <_lseek_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d07      	ldr	r5, [pc, #28]	; (8005314 <_lseek_r+0x20>)
 80052f8:	4604      	mov	r4, r0
 80052fa:	4608      	mov	r0, r1
 80052fc:	4611      	mov	r1, r2
 80052fe:	2200      	movs	r2, #0
 8005300:	602a      	str	r2, [r5, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f7fc fc8a 	bl	8001c1c <_lseek>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_lseek_r+0x1e>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_lseek_r+0x1e>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	200005d0 	.word	0x200005d0

08005318 <_read_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d07      	ldr	r5, [pc, #28]	; (8005338 <_read_r+0x20>)
 800531c:	4604      	mov	r4, r0
 800531e:	4608      	mov	r0, r1
 8005320:	4611      	mov	r1, r2
 8005322:	2200      	movs	r2, #0
 8005324:	602a      	str	r2, [r5, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	f7fc fc18 	bl	8001b5c <_read>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_read_r+0x1e>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_read_r+0x1e>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200005d0 	.word	0x200005d0

0800533c <_write_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	; (800535c <_write_r+0x20>)
 8005340:	4604      	mov	r4, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fc fc23 	bl	8001b96 <_write>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_write_r+0x1e>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_write_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	200005d0 	.word	0x200005d0

08005360 <__errno>:
 8005360:	4b01      	ldr	r3, [pc, #4]	; (8005368 <__errno+0x8>)
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	200001d0 	.word	0x200001d0

0800536c <__libc_init_array>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4d0d      	ldr	r5, [pc, #52]	; (80053a4 <__libc_init_array+0x38>)
 8005370:	4c0d      	ldr	r4, [pc, #52]	; (80053a8 <__libc_init_array+0x3c>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	2600      	movs	r6, #0
 8005378:	42a6      	cmp	r6, r4
 800537a:	d109      	bne.n	8005390 <__libc_init_array+0x24>
 800537c:	4d0b      	ldr	r5, [pc, #44]	; (80053ac <__libc_init_array+0x40>)
 800537e:	4c0c      	ldr	r4, [pc, #48]	; (80053b0 <__libc_init_array+0x44>)
 8005380:	f001 fe92 	bl	80070a8 <_init>
 8005384:	1b64      	subs	r4, r4, r5
 8005386:	10a4      	asrs	r4, r4, #2
 8005388:	2600      	movs	r6, #0
 800538a:	42a6      	cmp	r6, r4
 800538c:	d105      	bne.n	800539a <__libc_init_array+0x2e>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	f855 3b04 	ldr.w	r3, [r5], #4
 8005394:	4798      	blx	r3
 8005396:	3601      	adds	r6, #1
 8005398:	e7ee      	b.n	8005378 <__libc_init_array+0xc>
 800539a:	f855 3b04 	ldr.w	r3, [r5], #4
 800539e:	4798      	blx	r3
 80053a0:	3601      	adds	r6, #1
 80053a2:	e7f2      	b.n	800538a <__libc_init_array+0x1e>
 80053a4:	080074c4 	.word	0x080074c4
 80053a8:	080074c4 	.word	0x080074c4
 80053ac:	080074c4 	.word	0x080074c4
 80053b0:	080074c8 	.word	0x080074c8

080053b4 <__retarget_lock_init_recursive>:
 80053b4:	4770      	bx	lr

080053b6 <__retarget_lock_acquire_recursive>:
 80053b6:	4770      	bx	lr

080053b8 <__retarget_lock_release_recursive>:
 80053b8:	4770      	bx	lr

080053ba <memcpy>:
 80053ba:	440a      	add	r2, r1
 80053bc:	4291      	cmp	r1, r2
 80053be:	f100 33ff 	add.w	r3, r0, #4294967295
 80053c2:	d100      	bne.n	80053c6 <memcpy+0xc>
 80053c4:	4770      	bx	lr
 80053c6:	b510      	push	{r4, lr}
 80053c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053d0:	4291      	cmp	r1, r2
 80053d2:	d1f9      	bne.n	80053c8 <memcpy+0xe>
 80053d4:	bd10      	pop	{r4, pc}
	...

080053d8 <nan>:
 80053d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80053e0 <nan+0x8>
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	00000000 	.word	0x00000000
 80053e4:	7ff80000 	.word	0x7ff80000

080053e8 <_free_r>:
 80053e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ea:	2900      	cmp	r1, #0
 80053ec:	d044      	beq.n	8005478 <_free_r+0x90>
 80053ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f2:	9001      	str	r0, [sp, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f1a1 0404 	sub.w	r4, r1, #4
 80053fa:	bfb8      	it	lt
 80053fc:	18e4      	addlt	r4, r4, r3
 80053fe:	f000 fc49 	bl	8005c94 <__malloc_lock>
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <_free_r+0x94>)
 8005404:	9801      	ldr	r0, [sp, #4]
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	b933      	cbnz	r3, 8005418 <_free_r+0x30>
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	6014      	str	r4, [r2, #0]
 800540e:	b003      	add	sp, #12
 8005410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005414:	f000 bc44 	b.w	8005ca0 <__malloc_unlock>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d908      	bls.n	800542e <_free_r+0x46>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1961      	adds	r1, r4, r5
 8005420:	428b      	cmp	r3, r1
 8005422:	bf01      	itttt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	1949      	addeq	r1, r1, r5
 800542a:	6021      	streq	r1, [r4, #0]
 800542c:	e7ed      	b.n	800540a <_free_r+0x22>
 800542e:	461a      	mov	r2, r3
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b10b      	cbz	r3, 8005438 <_free_r+0x50>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d9fa      	bls.n	800542e <_free_r+0x46>
 8005438:	6811      	ldr	r1, [r2, #0]
 800543a:	1855      	adds	r5, r2, r1
 800543c:	42a5      	cmp	r5, r4
 800543e:	d10b      	bne.n	8005458 <_free_r+0x70>
 8005440:	6824      	ldr	r4, [r4, #0]
 8005442:	4421      	add	r1, r4
 8005444:	1854      	adds	r4, r2, r1
 8005446:	42a3      	cmp	r3, r4
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	d1e0      	bne.n	800540e <_free_r+0x26>
 800544c:	681c      	ldr	r4, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6053      	str	r3, [r2, #4]
 8005452:	440c      	add	r4, r1
 8005454:	6014      	str	r4, [r2, #0]
 8005456:	e7da      	b.n	800540e <_free_r+0x26>
 8005458:	d902      	bls.n	8005460 <_free_r+0x78>
 800545a:	230c      	movs	r3, #12
 800545c:	6003      	str	r3, [r0, #0]
 800545e:	e7d6      	b.n	800540e <_free_r+0x26>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	1961      	adds	r1, r4, r5
 8005464:	428b      	cmp	r3, r1
 8005466:	bf04      	itt	eq
 8005468:	6819      	ldreq	r1, [r3, #0]
 800546a:	685b      	ldreq	r3, [r3, #4]
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	bf04      	itt	eq
 8005470:	1949      	addeq	r1, r1, r5
 8005472:	6021      	streq	r1, [r4, #0]
 8005474:	6054      	str	r4, [r2, #4]
 8005476:	e7ca      	b.n	800540e <_free_r+0x26>
 8005478:	b003      	add	sp, #12
 800547a:	bd30      	pop	{r4, r5, pc}
 800547c:	200005d8 	.word	0x200005d8

08005480 <rshift>:
 8005480:	6903      	ldr	r3, [r0, #16]
 8005482:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005486:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800548a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800548e:	f100 0414 	add.w	r4, r0, #20
 8005492:	dd45      	ble.n	8005520 <rshift+0xa0>
 8005494:	f011 011f 	ands.w	r1, r1, #31
 8005498:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800549c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80054a0:	d10c      	bne.n	80054bc <rshift+0x3c>
 80054a2:	f100 0710 	add.w	r7, r0, #16
 80054a6:	4629      	mov	r1, r5
 80054a8:	42b1      	cmp	r1, r6
 80054aa:	d334      	bcc.n	8005516 <rshift+0x96>
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	1eea      	subs	r2, r5, #3
 80054b2:	4296      	cmp	r6, r2
 80054b4:	bf38      	it	cc
 80054b6:	2300      	movcc	r3, #0
 80054b8:	4423      	add	r3, r4
 80054ba:	e015      	b.n	80054e8 <rshift+0x68>
 80054bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80054c0:	f1c1 0820 	rsb	r8, r1, #32
 80054c4:	40cf      	lsrs	r7, r1
 80054c6:	f105 0e04 	add.w	lr, r5, #4
 80054ca:	46a1      	mov	r9, r4
 80054cc:	4576      	cmp	r6, lr
 80054ce:	46f4      	mov	ip, lr
 80054d0:	d815      	bhi.n	80054fe <rshift+0x7e>
 80054d2:	1a9a      	subs	r2, r3, r2
 80054d4:	0092      	lsls	r2, r2, #2
 80054d6:	3a04      	subs	r2, #4
 80054d8:	3501      	adds	r5, #1
 80054da:	42ae      	cmp	r6, r5
 80054dc:	bf38      	it	cc
 80054de:	2200      	movcc	r2, #0
 80054e0:	18a3      	adds	r3, r4, r2
 80054e2:	50a7      	str	r7, [r4, r2]
 80054e4:	b107      	cbz	r7, 80054e8 <rshift+0x68>
 80054e6:	3304      	adds	r3, #4
 80054e8:	1b1a      	subs	r2, r3, r4
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80054f0:	bf08      	it	eq
 80054f2:	2300      	moveq	r3, #0
 80054f4:	6102      	str	r2, [r0, #16]
 80054f6:	bf08      	it	eq
 80054f8:	6143      	streq	r3, [r0, #20]
 80054fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054fe:	f8dc c000 	ldr.w	ip, [ip]
 8005502:	fa0c fc08 	lsl.w	ip, ip, r8
 8005506:	ea4c 0707 	orr.w	r7, ip, r7
 800550a:	f849 7b04 	str.w	r7, [r9], #4
 800550e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005512:	40cf      	lsrs	r7, r1
 8005514:	e7da      	b.n	80054cc <rshift+0x4c>
 8005516:	f851 cb04 	ldr.w	ip, [r1], #4
 800551a:	f847 cf04 	str.w	ip, [r7, #4]!
 800551e:	e7c3      	b.n	80054a8 <rshift+0x28>
 8005520:	4623      	mov	r3, r4
 8005522:	e7e1      	b.n	80054e8 <rshift+0x68>

08005524 <__hexdig_fun>:
 8005524:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005528:	2b09      	cmp	r3, #9
 800552a:	d802      	bhi.n	8005532 <__hexdig_fun+0xe>
 800552c:	3820      	subs	r0, #32
 800552e:	b2c0      	uxtb	r0, r0
 8005530:	4770      	bx	lr
 8005532:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005536:	2b05      	cmp	r3, #5
 8005538:	d801      	bhi.n	800553e <__hexdig_fun+0x1a>
 800553a:	3847      	subs	r0, #71	; 0x47
 800553c:	e7f7      	b.n	800552e <__hexdig_fun+0xa>
 800553e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005542:	2b05      	cmp	r3, #5
 8005544:	d801      	bhi.n	800554a <__hexdig_fun+0x26>
 8005546:	3827      	subs	r0, #39	; 0x27
 8005548:	e7f1      	b.n	800552e <__hexdig_fun+0xa>
 800554a:	2000      	movs	r0, #0
 800554c:	4770      	bx	lr
	...

08005550 <__gethex>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	4617      	mov	r7, r2
 8005556:	680a      	ldr	r2, [r1, #0]
 8005558:	b085      	sub	sp, #20
 800555a:	f102 0b02 	add.w	fp, r2, #2
 800555e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005562:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005566:	4681      	mov	r9, r0
 8005568:	468a      	mov	sl, r1
 800556a:	9302      	str	r3, [sp, #8]
 800556c:	32fe      	adds	r2, #254	; 0xfe
 800556e:	eb02 030b 	add.w	r3, r2, fp
 8005572:	46d8      	mov	r8, fp
 8005574:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	2830      	cmp	r0, #48	; 0x30
 800557c:	d0f7      	beq.n	800556e <__gethex+0x1e>
 800557e:	f7ff ffd1 	bl	8005524 <__hexdig_fun>
 8005582:	4604      	mov	r4, r0
 8005584:	2800      	cmp	r0, #0
 8005586:	d138      	bne.n	80055fa <__gethex+0xaa>
 8005588:	49a7      	ldr	r1, [pc, #668]	; (8005828 <__gethex+0x2d8>)
 800558a:	2201      	movs	r2, #1
 800558c:	4640      	mov	r0, r8
 800558e:	f7ff fe74 	bl	800527a <strncmp>
 8005592:	4606      	mov	r6, r0
 8005594:	2800      	cmp	r0, #0
 8005596:	d169      	bne.n	800566c <__gethex+0x11c>
 8005598:	f898 0001 	ldrb.w	r0, [r8, #1]
 800559c:	465d      	mov	r5, fp
 800559e:	f7ff ffc1 	bl	8005524 <__hexdig_fun>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d064      	beq.n	8005670 <__gethex+0x120>
 80055a6:	465a      	mov	r2, fp
 80055a8:	7810      	ldrb	r0, [r2, #0]
 80055aa:	2830      	cmp	r0, #48	; 0x30
 80055ac:	4690      	mov	r8, r2
 80055ae:	f102 0201 	add.w	r2, r2, #1
 80055b2:	d0f9      	beq.n	80055a8 <__gethex+0x58>
 80055b4:	f7ff ffb6 	bl	8005524 <__hexdig_fun>
 80055b8:	2301      	movs	r3, #1
 80055ba:	fab0 f480 	clz	r4, r0
 80055be:	0964      	lsrs	r4, r4, #5
 80055c0:	465e      	mov	r6, fp
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	4642      	mov	r2, r8
 80055c6:	4615      	mov	r5, r2
 80055c8:	3201      	adds	r2, #1
 80055ca:	7828      	ldrb	r0, [r5, #0]
 80055cc:	f7ff ffaa 	bl	8005524 <__hexdig_fun>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1f8      	bne.n	80055c6 <__gethex+0x76>
 80055d4:	4994      	ldr	r1, [pc, #592]	; (8005828 <__gethex+0x2d8>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	4628      	mov	r0, r5
 80055da:	f7ff fe4e 	bl	800527a <strncmp>
 80055de:	b978      	cbnz	r0, 8005600 <__gethex+0xb0>
 80055e0:	b946      	cbnz	r6, 80055f4 <__gethex+0xa4>
 80055e2:	1c6e      	adds	r6, r5, #1
 80055e4:	4632      	mov	r2, r6
 80055e6:	4615      	mov	r5, r2
 80055e8:	3201      	adds	r2, #1
 80055ea:	7828      	ldrb	r0, [r5, #0]
 80055ec:	f7ff ff9a 	bl	8005524 <__hexdig_fun>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d1f8      	bne.n	80055e6 <__gethex+0x96>
 80055f4:	1b73      	subs	r3, r6, r5
 80055f6:	009e      	lsls	r6, r3, #2
 80055f8:	e004      	b.n	8005604 <__gethex+0xb4>
 80055fa:	2400      	movs	r4, #0
 80055fc:	4626      	mov	r6, r4
 80055fe:	e7e1      	b.n	80055c4 <__gethex+0x74>
 8005600:	2e00      	cmp	r6, #0
 8005602:	d1f7      	bne.n	80055f4 <__gethex+0xa4>
 8005604:	782b      	ldrb	r3, [r5, #0]
 8005606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800560a:	2b50      	cmp	r3, #80	; 0x50
 800560c:	d13d      	bne.n	800568a <__gethex+0x13a>
 800560e:	786b      	ldrb	r3, [r5, #1]
 8005610:	2b2b      	cmp	r3, #43	; 0x2b
 8005612:	d02f      	beq.n	8005674 <__gethex+0x124>
 8005614:	2b2d      	cmp	r3, #45	; 0x2d
 8005616:	d031      	beq.n	800567c <__gethex+0x12c>
 8005618:	1c69      	adds	r1, r5, #1
 800561a:	f04f 0b00 	mov.w	fp, #0
 800561e:	7808      	ldrb	r0, [r1, #0]
 8005620:	f7ff ff80 	bl	8005524 <__hexdig_fun>
 8005624:	1e42      	subs	r2, r0, #1
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	2a18      	cmp	r2, #24
 800562a:	d82e      	bhi.n	800568a <__gethex+0x13a>
 800562c:	f1a0 0210 	sub.w	r2, r0, #16
 8005630:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005634:	f7ff ff76 	bl	8005524 <__hexdig_fun>
 8005638:	f100 3cff 	add.w	ip, r0, #4294967295
 800563c:	fa5f fc8c 	uxtb.w	ip, ip
 8005640:	f1bc 0f18 	cmp.w	ip, #24
 8005644:	d91d      	bls.n	8005682 <__gethex+0x132>
 8005646:	f1bb 0f00 	cmp.w	fp, #0
 800564a:	d000      	beq.n	800564e <__gethex+0xfe>
 800564c:	4252      	negs	r2, r2
 800564e:	4416      	add	r6, r2
 8005650:	f8ca 1000 	str.w	r1, [sl]
 8005654:	b1dc      	cbz	r4, 800568e <__gethex+0x13e>
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf14      	ite	ne
 800565c:	f04f 0800 	movne.w	r8, #0
 8005660:	f04f 0806 	moveq.w	r8, #6
 8005664:	4640      	mov	r0, r8
 8005666:	b005      	add	sp, #20
 8005668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566c:	4645      	mov	r5, r8
 800566e:	4626      	mov	r6, r4
 8005670:	2401      	movs	r4, #1
 8005672:	e7c7      	b.n	8005604 <__gethex+0xb4>
 8005674:	f04f 0b00 	mov.w	fp, #0
 8005678:	1ca9      	adds	r1, r5, #2
 800567a:	e7d0      	b.n	800561e <__gethex+0xce>
 800567c:	f04f 0b01 	mov.w	fp, #1
 8005680:	e7fa      	b.n	8005678 <__gethex+0x128>
 8005682:	230a      	movs	r3, #10
 8005684:	fb03 0002 	mla	r0, r3, r2, r0
 8005688:	e7d0      	b.n	800562c <__gethex+0xdc>
 800568a:	4629      	mov	r1, r5
 800568c:	e7e0      	b.n	8005650 <__gethex+0x100>
 800568e:	eba5 0308 	sub.w	r3, r5, r8
 8005692:	3b01      	subs	r3, #1
 8005694:	4621      	mov	r1, r4
 8005696:	2b07      	cmp	r3, #7
 8005698:	dc0a      	bgt.n	80056b0 <__gethex+0x160>
 800569a:	4648      	mov	r0, r9
 800569c:	f000 fb06 	bl	8005cac <_Balloc>
 80056a0:	4604      	mov	r4, r0
 80056a2:	b940      	cbnz	r0, 80056b6 <__gethex+0x166>
 80056a4:	4b61      	ldr	r3, [pc, #388]	; (800582c <__gethex+0x2dc>)
 80056a6:	4602      	mov	r2, r0
 80056a8:	21e4      	movs	r1, #228	; 0xe4
 80056aa:	4861      	ldr	r0, [pc, #388]	; (8005830 <__gethex+0x2e0>)
 80056ac:	f001 f876 	bl	800679c <__assert_func>
 80056b0:	3101      	adds	r1, #1
 80056b2:	105b      	asrs	r3, r3, #1
 80056b4:	e7ef      	b.n	8005696 <__gethex+0x146>
 80056b6:	f100 0a14 	add.w	sl, r0, #20
 80056ba:	2300      	movs	r3, #0
 80056bc:	495a      	ldr	r1, [pc, #360]	; (8005828 <__gethex+0x2d8>)
 80056be:	f8cd a004 	str.w	sl, [sp, #4]
 80056c2:	469b      	mov	fp, r3
 80056c4:	45a8      	cmp	r8, r5
 80056c6:	d342      	bcc.n	800574e <__gethex+0x1fe>
 80056c8:	9801      	ldr	r0, [sp, #4]
 80056ca:	f840 bb04 	str.w	fp, [r0], #4
 80056ce:	eba0 000a 	sub.w	r0, r0, sl
 80056d2:	1080      	asrs	r0, r0, #2
 80056d4:	6120      	str	r0, [r4, #16]
 80056d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80056da:	4658      	mov	r0, fp
 80056dc:	f000 fbd8 	bl	8005e90 <__hi0bits>
 80056e0:	683d      	ldr	r5, [r7, #0]
 80056e2:	eba8 0000 	sub.w	r0, r8, r0
 80056e6:	42a8      	cmp	r0, r5
 80056e8:	dd59      	ble.n	800579e <__gethex+0x24e>
 80056ea:	eba0 0805 	sub.w	r8, r0, r5
 80056ee:	4641      	mov	r1, r8
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 ff67 	bl	80065c4 <__any_on>
 80056f6:	4683      	mov	fp, r0
 80056f8:	b1b8      	cbz	r0, 800572a <__gethex+0x1da>
 80056fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80056fe:	1159      	asrs	r1, r3, #5
 8005700:	f003 021f 	and.w	r2, r3, #31
 8005704:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005708:	f04f 0b01 	mov.w	fp, #1
 800570c:	fa0b f202 	lsl.w	r2, fp, r2
 8005710:	420a      	tst	r2, r1
 8005712:	d00a      	beq.n	800572a <__gethex+0x1da>
 8005714:	455b      	cmp	r3, fp
 8005716:	dd06      	ble.n	8005726 <__gethex+0x1d6>
 8005718:	f1a8 0102 	sub.w	r1, r8, #2
 800571c:	4620      	mov	r0, r4
 800571e:	f000 ff51 	bl	80065c4 <__any_on>
 8005722:	2800      	cmp	r0, #0
 8005724:	d138      	bne.n	8005798 <__gethex+0x248>
 8005726:	f04f 0b02 	mov.w	fp, #2
 800572a:	4641      	mov	r1, r8
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff fea7 	bl	8005480 <rshift>
 8005732:	4446      	add	r6, r8
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	42b3      	cmp	r3, r6
 8005738:	da41      	bge.n	80057be <__gethex+0x26e>
 800573a:	4621      	mov	r1, r4
 800573c:	4648      	mov	r0, r9
 800573e:	f000 faf5 	bl	8005d2c <_Bfree>
 8005742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005744:	2300      	movs	r3, #0
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800574c:	e78a      	b.n	8005664 <__gethex+0x114>
 800574e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8005752:	2a2e      	cmp	r2, #46	; 0x2e
 8005754:	d014      	beq.n	8005780 <__gethex+0x230>
 8005756:	2b20      	cmp	r3, #32
 8005758:	d106      	bne.n	8005768 <__gethex+0x218>
 800575a:	9b01      	ldr	r3, [sp, #4]
 800575c:	f843 bb04 	str.w	fp, [r3], #4
 8005760:	f04f 0b00 	mov.w	fp, #0
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	465b      	mov	r3, fp
 8005768:	7828      	ldrb	r0, [r5, #0]
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	f7ff feda 	bl	8005524 <__hexdig_fun>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	f000 000f 	and.w	r0, r0, #15
 8005776:	4098      	lsls	r0, r3
 8005778:	ea4b 0b00 	orr.w	fp, fp, r0
 800577c:	3304      	adds	r3, #4
 800577e:	e7a1      	b.n	80056c4 <__gethex+0x174>
 8005780:	45a8      	cmp	r8, r5
 8005782:	d8e8      	bhi.n	8005756 <__gethex+0x206>
 8005784:	2201      	movs	r2, #1
 8005786:	4628      	mov	r0, r5
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	f7ff fd76 	bl	800527a <strncmp>
 800578e:	4926      	ldr	r1, [pc, #152]	; (8005828 <__gethex+0x2d8>)
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	2800      	cmp	r0, #0
 8005794:	d1df      	bne.n	8005756 <__gethex+0x206>
 8005796:	e795      	b.n	80056c4 <__gethex+0x174>
 8005798:	f04f 0b03 	mov.w	fp, #3
 800579c:	e7c5      	b.n	800572a <__gethex+0x1da>
 800579e:	da0b      	bge.n	80057b8 <__gethex+0x268>
 80057a0:	eba5 0800 	sub.w	r8, r5, r0
 80057a4:	4621      	mov	r1, r4
 80057a6:	4642      	mov	r2, r8
 80057a8:	4648      	mov	r0, r9
 80057aa:	f000 fcd9 	bl	8006160 <__lshift>
 80057ae:	eba6 0608 	sub.w	r6, r6, r8
 80057b2:	4604      	mov	r4, r0
 80057b4:	f100 0a14 	add.w	sl, r0, #20
 80057b8:	f04f 0b00 	mov.w	fp, #0
 80057bc:	e7ba      	b.n	8005734 <__gethex+0x1e4>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	42b3      	cmp	r3, r6
 80057c2:	dd73      	ble.n	80058ac <__gethex+0x35c>
 80057c4:	1b9e      	subs	r6, r3, r6
 80057c6:	42b5      	cmp	r5, r6
 80057c8:	dc34      	bgt.n	8005834 <__gethex+0x2e4>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d023      	beq.n	8005818 <__gethex+0x2c8>
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d025      	beq.n	8005820 <__gethex+0x2d0>
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d115      	bne.n	8005804 <__gethex+0x2b4>
 80057d8:	42b5      	cmp	r5, r6
 80057da:	d113      	bne.n	8005804 <__gethex+0x2b4>
 80057dc:	2d01      	cmp	r5, #1
 80057de:	d10b      	bne.n	80057f8 <__gethex+0x2a8>
 80057e0:	9a02      	ldr	r2, [sp, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	2301      	movs	r3, #1
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	f8ca 3000 	str.w	r3, [sl]
 80057ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057f0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80057f4:	601c      	str	r4, [r3, #0]
 80057f6:	e735      	b.n	8005664 <__gethex+0x114>
 80057f8:	1e69      	subs	r1, r5, #1
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fee2 	bl	80065c4 <__any_on>
 8005800:	2800      	cmp	r0, #0
 8005802:	d1ed      	bne.n	80057e0 <__gethex+0x290>
 8005804:	4621      	mov	r1, r4
 8005806:	4648      	mov	r0, r9
 8005808:	f000 fa90 	bl	8005d2c <_Bfree>
 800580c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800580e:	2300      	movs	r3, #0
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	f04f 0850 	mov.w	r8, #80	; 0x50
 8005816:	e725      	b.n	8005664 <__gethex+0x114>
 8005818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f2      	bne.n	8005804 <__gethex+0x2b4>
 800581e:	e7df      	b.n	80057e0 <__gethex+0x290>
 8005820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1dc      	bne.n	80057e0 <__gethex+0x290>
 8005826:	e7ed      	b.n	8005804 <__gethex+0x2b4>
 8005828:	080070fc 	.word	0x080070fc
 800582c:	08007269 	.word	0x08007269
 8005830:	0800727a 	.word	0x0800727a
 8005834:	f106 38ff 	add.w	r8, r6, #4294967295
 8005838:	f1bb 0f00 	cmp.w	fp, #0
 800583c:	d133      	bne.n	80058a6 <__gethex+0x356>
 800583e:	f1b8 0f00 	cmp.w	r8, #0
 8005842:	d004      	beq.n	800584e <__gethex+0x2fe>
 8005844:	4641      	mov	r1, r8
 8005846:	4620      	mov	r0, r4
 8005848:	f000 febc 	bl	80065c4 <__any_on>
 800584c:	4683      	mov	fp, r0
 800584e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8005852:	2301      	movs	r3, #1
 8005854:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005858:	f008 081f 	and.w	r8, r8, #31
 800585c:	fa03 f308 	lsl.w	r3, r3, r8
 8005860:	4213      	tst	r3, r2
 8005862:	4631      	mov	r1, r6
 8005864:	4620      	mov	r0, r4
 8005866:	bf18      	it	ne
 8005868:	f04b 0b02 	orrne.w	fp, fp, #2
 800586c:	1bad      	subs	r5, r5, r6
 800586e:	f7ff fe07 	bl	8005480 <rshift>
 8005872:	687e      	ldr	r6, [r7, #4]
 8005874:	f04f 0802 	mov.w	r8, #2
 8005878:	f1bb 0f00 	cmp.w	fp, #0
 800587c:	d04a      	beq.n	8005914 <__gethex+0x3c4>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d016      	beq.n	80058b2 <__gethex+0x362>
 8005884:	2b03      	cmp	r3, #3
 8005886:	d018      	beq.n	80058ba <__gethex+0x36a>
 8005888:	2b01      	cmp	r3, #1
 800588a:	d109      	bne.n	80058a0 <__gethex+0x350>
 800588c:	f01b 0f02 	tst.w	fp, #2
 8005890:	d006      	beq.n	80058a0 <__gethex+0x350>
 8005892:	f8da 3000 	ldr.w	r3, [sl]
 8005896:	ea4b 0b03 	orr.w	fp, fp, r3
 800589a:	f01b 0f01 	tst.w	fp, #1
 800589e:	d10f      	bne.n	80058c0 <__gethex+0x370>
 80058a0:	f048 0810 	orr.w	r8, r8, #16
 80058a4:	e036      	b.n	8005914 <__gethex+0x3c4>
 80058a6:	f04f 0b01 	mov.w	fp, #1
 80058aa:	e7d0      	b.n	800584e <__gethex+0x2fe>
 80058ac:	f04f 0801 	mov.w	r8, #1
 80058b0:	e7e2      	b.n	8005878 <__gethex+0x328>
 80058b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058b4:	f1c3 0301 	rsb	r3, r3, #1
 80058b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80058ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <__gethex+0x350>
 80058c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80058c4:	f104 0214 	add.w	r2, r4, #20
 80058c8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80058d2:	2300      	movs	r3, #0
 80058d4:	4694      	mov	ip, r2
 80058d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80058da:	f1b1 3fff 	cmp.w	r1, #4294967295
 80058de:	d01e      	beq.n	800591e <__gethex+0x3ce>
 80058e0:	3101      	adds	r1, #1
 80058e2:	f8cc 1000 	str.w	r1, [ip]
 80058e6:	f1b8 0f02 	cmp.w	r8, #2
 80058ea:	f104 0214 	add.w	r2, r4, #20
 80058ee:	d13d      	bne.n	800596c <__gethex+0x41c>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	d10b      	bne.n	8005910 <__gethex+0x3c0>
 80058f8:	1169      	asrs	r1, r5, #5
 80058fa:	2301      	movs	r3, #1
 80058fc:	f005 051f 	and.w	r5, r5, #31
 8005900:	fa03 f505 	lsl.w	r5, r3, r5
 8005904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005908:	421d      	tst	r5, r3
 800590a:	bf18      	it	ne
 800590c:	f04f 0801 	movne.w	r8, #1
 8005910:	f048 0820 	orr.w	r8, r8, #32
 8005914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005916:	601c      	str	r4, [r3, #0]
 8005918:	9b02      	ldr	r3, [sp, #8]
 800591a:	601e      	str	r6, [r3, #0]
 800591c:	e6a2      	b.n	8005664 <__gethex+0x114>
 800591e:	4290      	cmp	r0, r2
 8005920:	f842 3c04 	str.w	r3, [r2, #-4]
 8005924:	d8d6      	bhi.n	80058d4 <__gethex+0x384>
 8005926:	68a2      	ldr	r2, [r4, #8]
 8005928:	4593      	cmp	fp, r2
 800592a:	db17      	blt.n	800595c <__gethex+0x40c>
 800592c:	6861      	ldr	r1, [r4, #4]
 800592e:	4648      	mov	r0, r9
 8005930:	3101      	adds	r1, #1
 8005932:	f000 f9bb 	bl	8005cac <_Balloc>
 8005936:	4682      	mov	sl, r0
 8005938:	b918      	cbnz	r0, 8005942 <__gethex+0x3f2>
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <__gethex+0x458>)
 800593c:	4602      	mov	r2, r0
 800593e:	2184      	movs	r1, #132	; 0x84
 8005940:	e6b3      	b.n	80056aa <__gethex+0x15a>
 8005942:	6922      	ldr	r2, [r4, #16]
 8005944:	3202      	adds	r2, #2
 8005946:	f104 010c 	add.w	r1, r4, #12
 800594a:	0092      	lsls	r2, r2, #2
 800594c:	300c      	adds	r0, #12
 800594e:	f7ff fd34 	bl	80053ba <memcpy>
 8005952:	4621      	mov	r1, r4
 8005954:	4648      	mov	r0, r9
 8005956:	f000 f9e9 	bl	8005d2c <_Bfree>
 800595a:	4654      	mov	r4, sl
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	1c51      	adds	r1, r2, #1
 8005960:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005964:	6121      	str	r1, [r4, #16]
 8005966:	2101      	movs	r1, #1
 8005968:	6151      	str	r1, [r2, #20]
 800596a:	e7bc      	b.n	80058e6 <__gethex+0x396>
 800596c:	6921      	ldr	r1, [r4, #16]
 800596e:	4559      	cmp	r1, fp
 8005970:	dd0b      	ble.n	800598a <__gethex+0x43a>
 8005972:	2101      	movs	r1, #1
 8005974:	4620      	mov	r0, r4
 8005976:	f7ff fd83 	bl	8005480 <rshift>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3601      	adds	r6, #1
 800597e:	42b3      	cmp	r3, r6
 8005980:	f6ff aedb 	blt.w	800573a <__gethex+0x1ea>
 8005984:	f04f 0801 	mov.w	r8, #1
 8005988:	e7c2      	b.n	8005910 <__gethex+0x3c0>
 800598a:	f015 051f 	ands.w	r5, r5, #31
 800598e:	d0f9      	beq.n	8005984 <__gethex+0x434>
 8005990:	9b01      	ldr	r3, [sp, #4]
 8005992:	441a      	add	r2, r3
 8005994:	f1c5 0520 	rsb	r5, r5, #32
 8005998:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800599c:	f000 fa78 	bl	8005e90 <__hi0bits>
 80059a0:	42a8      	cmp	r0, r5
 80059a2:	dbe6      	blt.n	8005972 <__gethex+0x422>
 80059a4:	e7ee      	b.n	8005984 <__gethex+0x434>
 80059a6:	bf00      	nop
 80059a8:	08007269 	.word	0x08007269

080059ac <L_shift>:
 80059ac:	f1c2 0208 	rsb	r2, r2, #8
 80059b0:	0092      	lsls	r2, r2, #2
 80059b2:	b570      	push	{r4, r5, r6, lr}
 80059b4:	f1c2 0620 	rsb	r6, r2, #32
 80059b8:	6843      	ldr	r3, [r0, #4]
 80059ba:	6804      	ldr	r4, [r0, #0]
 80059bc:	fa03 f506 	lsl.w	r5, r3, r6
 80059c0:	432c      	orrs	r4, r5
 80059c2:	40d3      	lsrs	r3, r2
 80059c4:	6004      	str	r4, [r0, #0]
 80059c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80059ca:	4288      	cmp	r0, r1
 80059cc:	d3f4      	bcc.n	80059b8 <L_shift+0xc>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}

080059d0 <__match>:
 80059d0:	b530      	push	{r4, r5, lr}
 80059d2:	6803      	ldr	r3, [r0, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059da:	b914      	cbnz	r4, 80059e2 <__match+0x12>
 80059dc:	6003      	str	r3, [r0, #0]
 80059de:	2001      	movs	r0, #1
 80059e0:	bd30      	pop	{r4, r5, pc}
 80059e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80059ea:	2d19      	cmp	r5, #25
 80059ec:	bf98      	it	ls
 80059ee:	3220      	addls	r2, #32
 80059f0:	42a2      	cmp	r2, r4
 80059f2:	d0f0      	beq.n	80059d6 <__match+0x6>
 80059f4:	2000      	movs	r0, #0
 80059f6:	e7f3      	b.n	80059e0 <__match+0x10>

080059f8 <__hexnan>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	680b      	ldr	r3, [r1, #0]
 80059fe:	6801      	ldr	r1, [r0, #0]
 8005a00:	115e      	asrs	r6, r3, #5
 8005a02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005a06:	f013 031f 	ands.w	r3, r3, #31
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	bf18      	it	ne
 8005a0e:	3604      	addne	r6, #4
 8005a10:	2500      	movs	r5, #0
 8005a12:	1f37      	subs	r7, r6, #4
 8005a14:	4682      	mov	sl, r0
 8005a16:	4690      	mov	r8, r2
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8005a1e:	46b9      	mov	r9, r7
 8005a20:	463c      	mov	r4, r7
 8005a22:	9502      	str	r5, [sp, #8]
 8005a24:	46ab      	mov	fp, r5
 8005a26:	784a      	ldrb	r2, [r1, #1]
 8005a28:	1c4b      	adds	r3, r1, #1
 8005a2a:	9303      	str	r3, [sp, #12]
 8005a2c:	b342      	cbz	r2, 8005a80 <__hexnan+0x88>
 8005a2e:	4610      	mov	r0, r2
 8005a30:	9105      	str	r1, [sp, #20]
 8005a32:	9204      	str	r2, [sp, #16]
 8005a34:	f7ff fd76 	bl	8005524 <__hexdig_fun>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d14f      	bne.n	8005adc <__hexnan+0xe4>
 8005a3c:	9a04      	ldr	r2, [sp, #16]
 8005a3e:	9905      	ldr	r1, [sp, #20]
 8005a40:	2a20      	cmp	r2, #32
 8005a42:	d818      	bhi.n	8005a76 <__hexnan+0x7e>
 8005a44:	9b02      	ldr	r3, [sp, #8]
 8005a46:	459b      	cmp	fp, r3
 8005a48:	dd13      	ble.n	8005a72 <__hexnan+0x7a>
 8005a4a:	454c      	cmp	r4, r9
 8005a4c:	d206      	bcs.n	8005a5c <__hexnan+0x64>
 8005a4e:	2d07      	cmp	r5, #7
 8005a50:	dc04      	bgt.n	8005a5c <__hexnan+0x64>
 8005a52:	462a      	mov	r2, r5
 8005a54:	4649      	mov	r1, r9
 8005a56:	4620      	mov	r0, r4
 8005a58:	f7ff ffa8 	bl	80059ac <L_shift>
 8005a5c:	4544      	cmp	r4, r8
 8005a5e:	d950      	bls.n	8005b02 <__hexnan+0x10a>
 8005a60:	2300      	movs	r3, #0
 8005a62:	f1a4 0904 	sub.w	r9, r4, #4
 8005a66:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8005a6e:	464c      	mov	r4, r9
 8005a70:	461d      	mov	r5, r3
 8005a72:	9903      	ldr	r1, [sp, #12]
 8005a74:	e7d7      	b.n	8005a26 <__hexnan+0x2e>
 8005a76:	2a29      	cmp	r2, #41	; 0x29
 8005a78:	d155      	bne.n	8005b26 <__hexnan+0x12e>
 8005a7a:	3102      	adds	r1, #2
 8005a7c:	f8ca 1000 	str.w	r1, [sl]
 8005a80:	f1bb 0f00 	cmp.w	fp, #0
 8005a84:	d04f      	beq.n	8005b26 <__hexnan+0x12e>
 8005a86:	454c      	cmp	r4, r9
 8005a88:	d206      	bcs.n	8005a98 <__hexnan+0xa0>
 8005a8a:	2d07      	cmp	r5, #7
 8005a8c:	dc04      	bgt.n	8005a98 <__hexnan+0xa0>
 8005a8e:	462a      	mov	r2, r5
 8005a90:	4649      	mov	r1, r9
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7ff ff8a 	bl	80059ac <L_shift>
 8005a98:	4544      	cmp	r4, r8
 8005a9a:	d934      	bls.n	8005b06 <__hexnan+0x10e>
 8005a9c:	f1a8 0204 	sub.w	r2, r8, #4
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8005aa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8005aaa:	429f      	cmp	r7, r3
 8005aac:	d2f9      	bcs.n	8005aa2 <__hexnan+0xaa>
 8005aae:	1b3b      	subs	r3, r7, r4
 8005ab0:	f023 0303 	bic.w	r3, r3, #3
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	3e03      	subs	r6, #3
 8005ab8:	3401      	adds	r4, #1
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	bf38      	it	cc
 8005abe:	2304      	movcc	r3, #4
 8005ac0:	4443      	add	r3, r8
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f843 2b04 	str.w	r2, [r3], #4
 8005ac8:	429f      	cmp	r7, r3
 8005aca:	d2fb      	bcs.n	8005ac4 <__hexnan+0xcc>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	b91b      	cbnz	r3, 8005ad8 <__hexnan+0xe0>
 8005ad0:	4547      	cmp	r7, r8
 8005ad2:	d126      	bne.n	8005b22 <__hexnan+0x12a>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	2005      	movs	r0, #5
 8005ada:	e025      	b.n	8005b28 <__hexnan+0x130>
 8005adc:	3501      	adds	r5, #1
 8005ade:	2d08      	cmp	r5, #8
 8005ae0:	f10b 0b01 	add.w	fp, fp, #1
 8005ae4:	dd06      	ble.n	8005af4 <__hexnan+0xfc>
 8005ae6:	4544      	cmp	r4, r8
 8005ae8:	d9c3      	bls.n	8005a72 <__hexnan+0x7a>
 8005aea:	2300      	movs	r3, #0
 8005aec:	f844 3c04 	str.w	r3, [r4, #-4]
 8005af0:	2501      	movs	r5, #1
 8005af2:	3c04      	subs	r4, #4
 8005af4:	6822      	ldr	r2, [r4, #0]
 8005af6:	f000 000f 	and.w	r0, r0, #15
 8005afa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005afe:	6020      	str	r0, [r4, #0]
 8005b00:	e7b7      	b.n	8005a72 <__hexnan+0x7a>
 8005b02:	2508      	movs	r5, #8
 8005b04:	e7b5      	b.n	8005a72 <__hexnan+0x7a>
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0df      	beq.n	8005acc <__hexnan+0xd4>
 8005b0c:	f1c3 0320 	rsb	r3, r3, #32
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	40da      	lsrs	r2, r3
 8005b16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	f846 3c04 	str.w	r3, [r6, #-4]
 8005b20:	e7d4      	b.n	8005acc <__hexnan+0xd4>
 8005b22:	3f04      	subs	r7, #4
 8005b24:	e7d2      	b.n	8005acc <__hexnan+0xd4>
 8005b26:	2004      	movs	r0, #4
 8005b28:	b007      	add	sp, #28
 8005b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005b30 <sbrk_aligned>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4e0e      	ldr	r6, [pc, #56]	; (8005b6c <sbrk_aligned+0x3c>)
 8005b34:	460c      	mov	r4, r1
 8005b36:	6831      	ldr	r1, [r6, #0]
 8005b38:	4605      	mov	r5, r0
 8005b3a:	b911      	cbnz	r1, 8005b42 <sbrk_aligned+0x12>
 8005b3c:	f000 fe1e 	bl	800677c <_sbrk_r>
 8005b40:	6030      	str	r0, [r6, #0]
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 fe19 	bl	800677c <_sbrk_r>
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	d00a      	beq.n	8005b64 <sbrk_aligned+0x34>
 8005b4e:	1cc4      	adds	r4, r0, #3
 8005b50:	f024 0403 	bic.w	r4, r4, #3
 8005b54:	42a0      	cmp	r0, r4
 8005b56:	d007      	beq.n	8005b68 <sbrk_aligned+0x38>
 8005b58:	1a21      	subs	r1, r4, r0
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fe0e 	bl	800677c <_sbrk_r>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d101      	bne.n	8005b68 <sbrk_aligned+0x38>
 8005b64:	f04f 34ff 	mov.w	r4, #4294967295
 8005b68:	4620      	mov	r0, r4
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	200005dc 	.word	0x200005dc

08005b70 <_malloc_r>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	1ccd      	adds	r5, r1, #3
 8005b76:	f025 0503 	bic.w	r5, r5, #3
 8005b7a:	3508      	adds	r5, #8
 8005b7c:	2d0c      	cmp	r5, #12
 8005b7e:	bf38      	it	cc
 8005b80:	250c      	movcc	r5, #12
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	4607      	mov	r7, r0
 8005b86:	db01      	blt.n	8005b8c <_malloc_r+0x1c>
 8005b88:	42a9      	cmp	r1, r5
 8005b8a:	d905      	bls.n	8005b98 <_malloc_r+0x28>
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	2600      	movs	r6, #0
 8005b92:	4630      	mov	r0, r6
 8005b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c6c <_malloc_r+0xfc>
 8005b9c:	f000 f87a 	bl	8005c94 <__malloc_lock>
 8005ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba4:	461c      	mov	r4, r3
 8005ba6:	bb5c      	cbnz	r4, 8005c00 <_malloc_r+0x90>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4638      	mov	r0, r7
 8005bac:	f7ff ffc0 	bl	8005b30 <sbrk_aligned>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	d155      	bne.n	8005c62 <_malloc_r+0xf2>
 8005bb6:	f8d8 4000 	ldr.w	r4, [r8]
 8005bba:	4626      	mov	r6, r4
 8005bbc:	2e00      	cmp	r6, #0
 8005bbe:	d145      	bne.n	8005c4c <_malloc_r+0xdc>
 8005bc0:	2c00      	cmp	r4, #0
 8005bc2:	d048      	beq.n	8005c56 <_malloc_r+0xe6>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4638      	mov	r0, r7
 8005bca:	eb04 0903 	add.w	r9, r4, r3
 8005bce:	f000 fdd5 	bl	800677c <_sbrk_r>
 8005bd2:	4581      	cmp	r9, r0
 8005bd4:	d13f      	bne.n	8005c56 <_malloc_r+0xe6>
 8005bd6:	6821      	ldr	r1, [r4, #0]
 8005bd8:	1a6d      	subs	r5, r5, r1
 8005bda:	4629      	mov	r1, r5
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7ff ffa7 	bl	8005b30 <sbrk_aligned>
 8005be2:	3001      	adds	r0, #1
 8005be4:	d037      	beq.n	8005c56 <_malloc_r+0xe6>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	442b      	add	r3, r5
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d038      	beq.n	8005c66 <_malloc_r+0xf6>
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	42a2      	cmp	r2, r4
 8005bf8:	d12b      	bne.n	8005c52 <_malloc_r+0xe2>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	e00f      	b.n	8005c20 <_malloc_r+0xb0>
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	1b52      	subs	r2, r2, r5
 8005c04:	d41f      	bmi.n	8005c46 <_malloc_r+0xd6>
 8005c06:	2a0b      	cmp	r2, #11
 8005c08:	d917      	bls.n	8005c3a <_malloc_r+0xca>
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	6025      	str	r5, [r4, #0]
 8005c10:	bf18      	it	ne
 8005c12:	6059      	strne	r1, [r3, #4]
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	bf08      	it	eq
 8005c18:	f8c8 1000 	streq.w	r1, [r8]
 8005c1c:	5162      	str	r2, [r4, r5]
 8005c1e:	604b      	str	r3, [r1, #4]
 8005c20:	4638      	mov	r0, r7
 8005c22:	f104 060b 	add.w	r6, r4, #11
 8005c26:	f000 f83b 	bl	8005ca0 <__malloc_unlock>
 8005c2a:	f026 0607 	bic.w	r6, r6, #7
 8005c2e:	1d23      	adds	r3, r4, #4
 8005c30:	1af2      	subs	r2, r6, r3
 8005c32:	d0ae      	beq.n	8005b92 <_malloc_r+0x22>
 8005c34:	1b9b      	subs	r3, r3, r6
 8005c36:	50a3      	str	r3, [r4, r2]
 8005c38:	e7ab      	b.n	8005b92 <_malloc_r+0x22>
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	6862      	ldr	r2, [r4, #4]
 8005c3e:	d1dd      	bne.n	8005bfc <_malloc_r+0x8c>
 8005c40:	f8c8 2000 	str.w	r2, [r8]
 8005c44:	e7ec      	b.n	8005c20 <_malloc_r+0xb0>
 8005c46:	4623      	mov	r3, r4
 8005c48:	6864      	ldr	r4, [r4, #4]
 8005c4a:	e7ac      	b.n	8005ba6 <_malloc_r+0x36>
 8005c4c:	4634      	mov	r4, r6
 8005c4e:	6876      	ldr	r6, [r6, #4]
 8005c50:	e7b4      	b.n	8005bbc <_malloc_r+0x4c>
 8005c52:	4613      	mov	r3, r2
 8005c54:	e7cc      	b.n	8005bf0 <_malloc_r+0x80>
 8005c56:	230c      	movs	r3, #12
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f000 f820 	bl	8005ca0 <__malloc_unlock>
 8005c60:	e797      	b.n	8005b92 <_malloc_r+0x22>
 8005c62:	6025      	str	r5, [r4, #0]
 8005c64:	e7dc      	b.n	8005c20 <_malloc_r+0xb0>
 8005c66:	605b      	str	r3, [r3, #4]
 8005c68:	deff      	udf	#255	; 0xff
 8005c6a:	bf00      	nop
 8005c6c:	200005d8 	.word	0x200005d8

08005c70 <__ascii_mbtowc>:
 8005c70:	b082      	sub	sp, #8
 8005c72:	b901      	cbnz	r1, 8005c76 <__ascii_mbtowc+0x6>
 8005c74:	a901      	add	r1, sp, #4
 8005c76:	b142      	cbz	r2, 8005c8a <__ascii_mbtowc+0x1a>
 8005c78:	b14b      	cbz	r3, 8005c8e <__ascii_mbtowc+0x1e>
 8005c7a:	7813      	ldrb	r3, [r2, #0]
 8005c7c:	600b      	str	r3, [r1, #0]
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	1e10      	subs	r0, r2, #0
 8005c82:	bf18      	it	ne
 8005c84:	2001      	movne	r0, #1
 8005c86:	b002      	add	sp, #8
 8005c88:	4770      	bx	lr
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	e7fb      	b.n	8005c86 <__ascii_mbtowc+0x16>
 8005c8e:	f06f 0001 	mvn.w	r0, #1
 8005c92:	e7f8      	b.n	8005c86 <__ascii_mbtowc+0x16>

08005c94 <__malloc_lock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__malloc_lock+0x8>)
 8005c96:	f7ff bb8e 	b.w	80053b6 <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	200005d4 	.word	0x200005d4

08005ca0 <__malloc_unlock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__malloc_unlock+0x8>)
 8005ca2:	f7ff bb89 	b.w	80053b8 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200005d4 	.word	0x200005d4

08005cac <_Balloc>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	69c6      	ldr	r6, [r0, #28]
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	b976      	cbnz	r6, 8005cd4 <_Balloc+0x28>
 8005cb6:	2010      	movs	r0, #16
 8005cb8:	f000 fda4 	bl	8006804 <malloc>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	61e0      	str	r0, [r4, #28]
 8005cc0:	b920      	cbnz	r0, 8005ccc <_Balloc+0x20>
 8005cc2:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <_Balloc+0x78>)
 8005cc4:	4818      	ldr	r0, [pc, #96]	; (8005d28 <_Balloc+0x7c>)
 8005cc6:	216b      	movs	r1, #107	; 0x6b
 8005cc8:	f000 fd68 	bl	800679c <__assert_func>
 8005ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd0:	6006      	str	r6, [r0, #0]
 8005cd2:	60c6      	str	r6, [r0, #12]
 8005cd4:	69e6      	ldr	r6, [r4, #28]
 8005cd6:	68f3      	ldr	r3, [r6, #12]
 8005cd8:	b183      	cbz	r3, 8005cfc <_Balloc+0x50>
 8005cda:	69e3      	ldr	r3, [r4, #28]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ce2:	b9b8      	cbnz	r0, 8005d14 <_Balloc+0x68>
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8005cea:	1d72      	adds	r2, r6, #5
 8005cec:	0092      	lsls	r2, r2, #2
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fd72 	bl	80067d8 <_calloc_r>
 8005cf4:	b160      	cbz	r0, 8005d10 <_Balloc+0x64>
 8005cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cfa:	e00e      	b.n	8005d1a <_Balloc+0x6e>
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	2104      	movs	r1, #4
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fd69 	bl	80067d8 <_calloc_r>
 8005d06:	69e3      	ldr	r3, [r4, #28]
 8005d08:	60f0      	str	r0, [r6, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e4      	bne.n	8005cda <_Balloc+0x2e>
 8005d10:	2000      	movs	r0, #0
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d20:	e7f7      	b.n	8005d12 <_Balloc+0x66>
 8005d22:	bf00      	nop
 8005d24:	080072da 	.word	0x080072da
 8005d28:	080072f1 	.word	0x080072f1

08005d2c <_Bfree>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	69c6      	ldr	r6, [r0, #28]
 8005d30:	4605      	mov	r5, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Bfree+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f000 fd64 	bl	8006804 <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	61e8      	str	r0, [r5, #28]
 8005d40:	b920      	cbnz	r0, 8005d4c <_Bfree+0x20>
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <_Bfree+0x3c>)
 8005d44:	4809      	ldr	r0, [pc, #36]	; (8005d6c <_Bfree+0x40>)
 8005d46:	218f      	movs	r1, #143	; 0x8f
 8005d48:	f000 fd28 	bl	800679c <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	b13c      	cbz	r4, 8005d66 <_Bfree+0x3a>
 8005d56:	69eb      	ldr	r3, [r5, #28]
 8005d58:	6862      	ldr	r2, [r4, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d60:	6021      	str	r1, [r4, #0]
 8005d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	080072da 	.word	0x080072da
 8005d6c:	080072f1 	.word	0x080072f1

08005d70 <__multadd>:
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	690d      	ldr	r5, [r1, #16]
 8005d76:	4607      	mov	r7, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	461e      	mov	r6, r3
 8005d7c:	f101 0c14 	add.w	ip, r1, #20
 8005d80:	2000      	movs	r0, #0
 8005d82:	f8dc 3000 	ldr.w	r3, [ip]
 8005d86:	b299      	uxth	r1, r3
 8005d88:	fb02 6101 	mla	r1, r2, r1, r6
 8005d8c:	0c1e      	lsrs	r6, r3, #16
 8005d8e:	0c0b      	lsrs	r3, r1, #16
 8005d90:	fb02 3306 	mla	r3, r2, r6, r3
 8005d94:	b289      	uxth	r1, r1
 8005d96:	3001      	adds	r0, #1
 8005d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d9c:	4285      	cmp	r5, r0
 8005d9e:	f84c 1b04 	str.w	r1, [ip], #4
 8005da2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005da6:	dcec      	bgt.n	8005d82 <__multadd+0x12>
 8005da8:	b30e      	cbz	r6, 8005dee <__multadd+0x7e>
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc19      	bgt.n	8005de4 <__multadd+0x74>
 8005db0:	6861      	ldr	r1, [r4, #4]
 8005db2:	4638      	mov	r0, r7
 8005db4:	3101      	adds	r1, #1
 8005db6:	f7ff ff79 	bl	8005cac <_Balloc>
 8005dba:	4680      	mov	r8, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__multadd+0x5a>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <__multadd+0x84>)
 8005dc2:	480d      	ldr	r0, [pc, #52]	; (8005df8 <__multadd+0x88>)
 8005dc4:	21ba      	movs	r1, #186	; 0xba
 8005dc6:	f000 fce9 	bl	800679c <__assert_func>
 8005dca:	6922      	ldr	r2, [r4, #16]
 8005dcc:	3202      	adds	r2, #2
 8005dce:	f104 010c 	add.w	r1, r4, #12
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	300c      	adds	r0, #12
 8005dd6:	f7ff faf0 	bl	80053ba <memcpy>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ffa5 	bl	8005d2c <_Bfree>
 8005de2:	4644      	mov	r4, r8
 8005de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005de8:	3501      	adds	r5, #1
 8005dea:	615e      	str	r6, [r3, #20]
 8005dec:	6125      	str	r5, [r4, #16]
 8005dee:	4620      	mov	r0, r4
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	08007269 	.word	0x08007269
 8005df8:	080072f1 	.word	0x080072f1

08005dfc <__s2b>:
 8005dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	4615      	mov	r5, r2
 8005e04:	461f      	mov	r7, r3
 8005e06:	2209      	movs	r2, #9
 8005e08:	3308      	adds	r3, #8
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e10:	2100      	movs	r1, #0
 8005e12:	2201      	movs	r2, #1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	db09      	blt.n	8005e2c <__s2b+0x30>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff ff47 	bl	8005cac <_Balloc>
 8005e1e:	b940      	cbnz	r0, 8005e32 <__s2b+0x36>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <__s2b+0x8c>)
 8005e24:	4819      	ldr	r0, [pc, #100]	; (8005e8c <__s2b+0x90>)
 8005e26:	21d3      	movs	r1, #211	; 0xd3
 8005e28:	f000 fcb8 	bl	800679c <__assert_func>
 8005e2c:	0052      	lsls	r2, r2, #1
 8005e2e:	3101      	adds	r1, #1
 8005e30:	e7f0      	b.n	8005e14 <__s2b+0x18>
 8005e32:	9b08      	ldr	r3, [sp, #32]
 8005e34:	6143      	str	r3, [r0, #20]
 8005e36:	2d09      	cmp	r5, #9
 8005e38:	f04f 0301 	mov.w	r3, #1
 8005e3c:	6103      	str	r3, [r0, #16]
 8005e3e:	dd16      	ble.n	8005e6e <__s2b+0x72>
 8005e40:	f104 0909 	add.w	r9, r4, #9
 8005e44:	46c8      	mov	r8, r9
 8005e46:	442c      	add	r4, r5
 8005e48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	3b30      	subs	r3, #48	; 0x30
 8005e50:	220a      	movs	r2, #10
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ff8c 	bl	8005d70 <__multadd>
 8005e58:	45a0      	cmp	r8, r4
 8005e5a:	d1f5      	bne.n	8005e48 <__s2b+0x4c>
 8005e5c:	f1a5 0408 	sub.w	r4, r5, #8
 8005e60:	444c      	add	r4, r9
 8005e62:	1b2d      	subs	r5, r5, r4
 8005e64:	1963      	adds	r3, r4, r5
 8005e66:	42bb      	cmp	r3, r7
 8005e68:	db04      	blt.n	8005e74 <__s2b+0x78>
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	340a      	adds	r4, #10
 8005e70:	2509      	movs	r5, #9
 8005e72:	e7f6      	b.n	8005e62 <__s2b+0x66>
 8005e74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e78:	4601      	mov	r1, r0
 8005e7a:	3b30      	subs	r3, #48	; 0x30
 8005e7c:	220a      	movs	r2, #10
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff ff76 	bl	8005d70 <__multadd>
 8005e84:	e7ee      	b.n	8005e64 <__s2b+0x68>
 8005e86:	bf00      	nop
 8005e88:	08007269 	.word	0x08007269
 8005e8c:	080072f1 	.word	0x080072f1

08005e90 <__hi0bits>:
 8005e90:	0c03      	lsrs	r3, r0, #16
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	b9d3      	cbnz	r3, 8005ecc <__hi0bits+0x3c>
 8005e96:	0400      	lsls	r0, r0, #16
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e9e:	bf04      	itt	eq
 8005ea0:	0200      	lsleq	r0, r0, #8
 8005ea2:	3308      	addeq	r3, #8
 8005ea4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ea8:	bf04      	itt	eq
 8005eaa:	0100      	lsleq	r0, r0, #4
 8005eac:	3304      	addeq	r3, #4
 8005eae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005eb2:	bf04      	itt	eq
 8005eb4:	0080      	lsleq	r0, r0, #2
 8005eb6:	3302      	addeq	r3, #2
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	db05      	blt.n	8005ec8 <__hi0bits+0x38>
 8005ebc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ec0:	f103 0301 	add.w	r3, r3, #1
 8005ec4:	bf08      	it	eq
 8005ec6:	2320      	moveq	r3, #32
 8005ec8:	4618      	mov	r0, r3
 8005eca:	4770      	bx	lr
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e7e4      	b.n	8005e9a <__hi0bits+0xa>

08005ed0 <__lo0bits>:
 8005ed0:	6803      	ldr	r3, [r0, #0]
 8005ed2:	f013 0207 	ands.w	r2, r3, #7
 8005ed6:	d00c      	beq.n	8005ef2 <__lo0bits+0x22>
 8005ed8:	07d9      	lsls	r1, r3, #31
 8005eda:	d422      	bmi.n	8005f22 <__lo0bits+0x52>
 8005edc:	079a      	lsls	r2, r3, #30
 8005ede:	bf49      	itett	mi
 8005ee0:	085b      	lsrmi	r3, r3, #1
 8005ee2:	089b      	lsrpl	r3, r3, #2
 8005ee4:	6003      	strmi	r3, [r0, #0]
 8005ee6:	2201      	movmi	r2, #1
 8005ee8:	bf5c      	itt	pl
 8005eea:	6003      	strpl	r3, [r0, #0]
 8005eec:	2202      	movpl	r2, #2
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4770      	bx	lr
 8005ef2:	b299      	uxth	r1, r3
 8005ef4:	b909      	cbnz	r1, 8005efa <__lo0bits+0x2a>
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	2210      	movs	r2, #16
 8005efa:	b2d9      	uxtb	r1, r3
 8005efc:	b909      	cbnz	r1, 8005f02 <__lo0bits+0x32>
 8005efe:	3208      	adds	r2, #8
 8005f00:	0a1b      	lsrs	r3, r3, #8
 8005f02:	0719      	lsls	r1, r3, #28
 8005f04:	bf04      	itt	eq
 8005f06:	091b      	lsreq	r3, r3, #4
 8005f08:	3204      	addeq	r2, #4
 8005f0a:	0799      	lsls	r1, r3, #30
 8005f0c:	bf04      	itt	eq
 8005f0e:	089b      	lsreq	r3, r3, #2
 8005f10:	3202      	addeq	r2, #2
 8005f12:	07d9      	lsls	r1, r3, #31
 8005f14:	d403      	bmi.n	8005f1e <__lo0bits+0x4e>
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	f102 0201 	add.w	r2, r2, #1
 8005f1c:	d003      	beq.n	8005f26 <__lo0bits+0x56>
 8005f1e:	6003      	str	r3, [r0, #0]
 8005f20:	e7e5      	b.n	8005eee <__lo0bits+0x1e>
 8005f22:	2200      	movs	r2, #0
 8005f24:	e7e3      	b.n	8005eee <__lo0bits+0x1e>
 8005f26:	2220      	movs	r2, #32
 8005f28:	e7e1      	b.n	8005eee <__lo0bits+0x1e>
	...

08005f2c <__i2b>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	460c      	mov	r4, r1
 8005f30:	2101      	movs	r1, #1
 8005f32:	f7ff febb 	bl	8005cac <_Balloc>
 8005f36:	4602      	mov	r2, r0
 8005f38:	b928      	cbnz	r0, 8005f46 <__i2b+0x1a>
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <__i2b+0x24>)
 8005f3c:	4805      	ldr	r0, [pc, #20]	; (8005f54 <__i2b+0x28>)
 8005f3e:	f240 1145 	movw	r1, #325	; 0x145
 8005f42:	f000 fc2b 	bl	800679c <__assert_func>
 8005f46:	2301      	movs	r3, #1
 8005f48:	6144      	str	r4, [r0, #20]
 8005f4a:	6103      	str	r3, [r0, #16]
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	08007269 	.word	0x08007269
 8005f54:	080072f1 	.word	0x080072f1

08005f58 <__multiply>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	4691      	mov	r9, r2
 8005f5e:	690a      	ldr	r2, [r1, #16]
 8005f60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	bfb8      	it	lt
 8005f68:	460b      	movlt	r3, r1
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	bfbc      	itt	lt
 8005f6e:	464c      	movlt	r4, r9
 8005f70:	4699      	movlt	r9, r3
 8005f72:	6927      	ldr	r7, [r4, #16]
 8005f74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	6861      	ldr	r1, [r4, #4]
 8005f7c:	eb07 060a 	add.w	r6, r7, sl
 8005f80:	42b3      	cmp	r3, r6
 8005f82:	b085      	sub	sp, #20
 8005f84:	bfb8      	it	lt
 8005f86:	3101      	addlt	r1, #1
 8005f88:	f7ff fe90 	bl	8005cac <_Balloc>
 8005f8c:	b930      	cbnz	r0, 8005f9c <__multiply+0x44>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b44      	ldr	r3, [pc, #272]	; (80060a4 <__multiply+0x14c>)
 8005f92:	4845      	ldr	r0, [pc, #276]	; (80060a8 <__multiply+0x150>)
 8005f94:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f98:	f000 fc00 	bl	800679c <__assert_func>
 8005f9c:	f100 0514 	add.w	r5, r0, #20
 8005fa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4543      	cmp	r3, r8
 8005faa:	d321      	bcc.n	8005ff0 <__multiply+0x98>
 8005fac:	f104 0314 	add.w	r3, r4, #20
 8005fb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005fb4:	f109 0314 	add.w	r3, r9, #20
 8005fb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005fbc:	9202      	str	r2, [sp, #8]
 8005fbe:	1b3a      	subs	r2, r7, r4
 8005fc0:	3a15      	subs	r2, #21
 8005fc2:	f022 0203 	bic.w	r2, r2, #3
 8005fc6:	3204      	adds	r2, #4
 8005fc8:	f104 0115 	add.w	r1, r4, #21
 8005fcc:	428f      	cmp	r7, r1
 8005fce:	bf38      	it	cc
 8005fd0:	2204      	movcc	r2, #4
 8005fd2:	9201      	str	r2, [sp, #4]
 8005fd4:	9a02      	ldr	r2, [sp, #8]
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d80c      	bhi.n	8005ff6 <__multiply+0x9e>
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	dd03      	ble.n	8005fe8 <__multiply+0x90>
 8005fe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d05b      	beq.n	80060a0 <__multiply+0x148>
 8005fe8:	6106      	str	r6, [r0, #16]
 8005fea:	b005      	add	sp, #20
 8005fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff0:	f843 2b04 	str.w	r2, [r3], #4
 8005ff4:	e7d8      	b.n	8005fa8 <__multiply+0x50>
 8005ff6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ffa:	f1ba 0f00 	cmp.w	sl, #0
 8005ffe:	d024      	beq.n	800604a <__multiply+0xf2>
 8006000:	f104 0e14 	add.w	lr, r4, #20
 8006004:	46a9      	mov	r9, r5
 8006006:	f04f 0c00 	mov.w	ip, #0
 800600a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800600e:	f8d9 1000 	ldr.w	r1, [r9]
 8006012:	fa1f fb82 	uxth.w	fp, r2
 8006016:	b289      	uxth	r1, r1
 8006018:	fb0a 110b 	mla	r1, sl, fp, r1
 800601c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006020:	f8d9 2000 	ldr.w	r2, [r9]
 8006024:	4461      	add	r1, ip
 8006026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800602a:	fb0a c20b 	mla	r2, sl, fp, ip
 800602e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006032:	b289      	uxth	r1, r1
 8006034:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006038:	4577      	cmp	r7, lr
 800603a:	f849 1b04 	str.w	r1, [r9], #4
 800603e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006042:	d8e2      	bhi.n	800600a <__multiply+0xb2>
 8006044:	9a01      	ldr	r2, [sp, #4]
 8006046:	f845 c002 	str.w	ip, [r5, r2]
 800604a:	9a03      	ldr	r2, [sp, #12]
 800604c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006050:	3304      	adds	r3, #4
 8006052:	f1b9 0f00 	cmp.w	r9, #0
 8006056:	d021      	beq.n	800609c <__multiply+0x144>
 8006058:	6829      	ldr	r1, [r5, #0]
 800605a:	f104 0c14 	add.w	ip, r4, #20
 800605e:	46ae      	mov	lr, r5
 8006060:	f04f 0a00 	mov.w	sl, #0
 8006064:	f8bc b000 	ldrh.w	fp, [ip]
 8006068:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800606c:	fb09 220b 	mla	r2, r9, fp, r2
 8006070:	4452      	add	r2, sl
 8006072:	b289      	uxth	r1, r1
 8006074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006078:	f84e 1b04 	str.w	r1, [lr], #4
 800607c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006080:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006084:	f8be 1000 	ldrh.w	r1, [lr]
 8006088:	fb09 110a 	mla	r1, r9, sl, r1
 800608c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006090:	4567      	cmp	r7, ip
 8006092:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006096:	d8e5      	bhi.n	8006064 <__multiply+0x10c>
 8006098:	9a01      	ldr	r2, [sp, #4]
 800609a:	50a9      	str	r1, [r5, r2]
 800609c:	3504      	adds	r5, #4
 800609e:	e799      	b.n	8005fd4 <__multiply+0x7c>
 80060a0:	3e01      	subs	r6, #1
 80060a2:	e79b      	b.n	8005fdc <__multiply+0x84>
 80060a4:	08007269 	.word	0x08007269
 80060a8:	080072f1 	.word	0x080072f1

080060ac <__pow5mult>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	4615      	mov	r5, r2
 80060b2:	f012 0203 	ands.w	r2, r2, #3
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	d007      	beq.n	80060cc <__pow5mult+0x20>
 80060bc:	4c25      	ldr	r4, [pc, #148]	; (8006154 <__pow5mult+0xa8>)
 80060be:	3a01      	subs	r2, #1
 80060c0:	2300      	movs	r3, #0
 80060c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060c6:	f7ff fe53 	bl	8005d70 <__multadd>
 80060ca:	4607      	mov	r7, r0
 80060cc:	10ad      	asrs	r5, r5, #2
 80060ce:	d03d      	beq.n	800614c <__pow5mult+0xa0>
 80060d0:	69f4      	ldr	r4, [r6, #28]
 80060d2:	b97c      	cbnz	r4, 80060f4 <__pow5mult+0x48>
 80060d4:	2010      	movs	r0, #16
 80060d6:	f000 fb95 	bl	8006804 <malloc>
 80060da:	4602      	mov	r2, r0
 80060dc:	61f0      	str	r0, [r6, #28]
 80060de:	b928      	cbnz	r0, 80060ec <__pow5mult+0x40>
 80060e0:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <__pow5mult+0xac>)
 80060e2:	481e      	ldr	r0, [pc, #120]	; (800615c <__pow5mult+0xb0>)
 80060e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80060e8:	f000 fb58 	bl	800679c <__assert_func>
 80060ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060f0:	6004      	str	r4, [r0, #0]
 80060f2:	60c4      	str	r4, [r0, #12]
 80060f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060fc:	b94c      	cbnz	r4, 8006112 <__pow5mult+0x66>
 80060fe:	f240 2171 	movw	r1, #625	; 0x271
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ff12 	bl	8005f2c <__i2b>
 8006108:	2300      	movs	r3, #0
 800610a:	f8c8 0008 	str.w	r0, [r8, #8]
 800610e:	4604      	mov	r4, r0
 8006110:	6003      	str	r3, [r0, #0]
 8006112:	f04f 0900 	mov.w	r9, #0
 8006116:	07eb      	lsls	r3, r5, #31
 8006118:	d50a      	bpl.n	8006130 <__pow5mult+0x84>
 800611a:	4639      	mov	r1, r7
 800611c:	4622      	mov	r2, r4
 800611e:	4630      	mov	r0, r6
 8006120:	f7ff ff1a 	bl	8005f58 <__multiply>
 8006124:	4639      	mov	r1, r7
 8006126:	4680      	mov	r8, r0
 8006128:	4630      	mov	r0, r6
 800612a:	f7ff fdff 	bl	8005d2c <_Bfree>
 800612e:	4647      	mov	r7, r8
 8006130:	106d      	asrs	r5, r5, #1
 8006132:	d00b      	beq.n	800614c <__pow5mult+0xa0>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	b938      	cbnz	r0, 8006148 <__pow5mult+0x9c>
 8006138:	4622      	mov	r2, r4
 800613a:	4621      	mov	r1, r4
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff ff0b 	bl	8005f58 <__multiply>
 8006142:	6020      	str	r0, [r4, #0]
 8006144:	f8c0 9000 	str.w	r9, [r0]
 8006148:	4604      	mov	r4, r0
 800614a:	e7e4      	b.n	8006116 <__pow5mult+0x6a>
 800614c:	4638      	mov	r0, r7
 800614e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006152:	bf00      	nop
 8006154:	08007440 	.word	0x08007440
 8006158:	080072da 	.word	0x080072da
 800615c:	080072f1 	.word	0x080072f1

08006160 <__lshift>:
 8006160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	460c      	mov	r4, r1
 8006166:	6849      	ldr	r1, [r1, #4]
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800616e:	68a3      	ldr	r3, [r4, #8]
 8006170:	4607      	mov	r7, r0
 8006172:	4691      	mov	r9, r2
 8006174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006178:	f108 0601 	add.w	r6, r8, #1
 800617c:	42b3      	cmp	r3, r6
 800617e:	db0b      	blt.n	8006198 <__lshift+0x38>
 8006180:	4638      	mov	r0, r7
 8006182:	f7ff fd93 	bl	8005cac <_Balloc>
 8006186:	4605      	mov	r5, r0
 8006188:	b948      	cbnz	r0, 800619e <__lshift+0x3e>
 800618a:	4602      	mov	r2, r0
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <__lshift+0xd0>)
 800618e:	4829      	ldr	r0, [pc, #164]	; (8006234 <__lshift+0xd4>)
 8006190:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006194:	f000 fb02 	bl	800679c <__assert_func>
 8006198:	3101      	adds	r1, #1
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	e7ee      	b.n	800617c <__lshift+0x1c>
 800619e:	2300      	movs	r3, #0
 80061a0:	f100 0114 	add.w	r1, r0, #20
 80061a4:	f100 0210 	add.w	r2, r0, #16
 80061a8:	4618      	mov	r0, r3
 80061aa:	4553      	cmp	r3, sl
 80061ac:	db33      	blt.n	8006216 <__lshift+0xb6>
 80061ae:	6920      	ldr	r0, [r4, #16]
 80061b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061b4:	f104 0314 	add.w	r3, r4, #20
 80061b8:	f019 091f 	ands.w	r9, r9, #31
 80061bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061c4:	d02b      	beq.n	800621e <__lshift+0xbe>
 80061c6:	f1c9 0e20 	rsb	lr, r9, #32
 80061ca:	468a      	mov	sl, r1
 80061cc:	2200      	movs	r2, #0
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	fa00 f009 	lsl.w	r0, r0, r9
 80061d4:	4310      	orrs	r0, r2
 80061d6:	f84a 0b04 	str.w	r0, [sl], #4
 80061da:	f853 2b04 	ldr.w	r2, [r3], #4
 80061de:	459c      	cmp	ip, r3
 80061e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80061e4:	d8f3      	bhi.n	80061ce <__lshift+0x6e>
 80061e6:	ebac 0304 	sub.w	r3, ip, r4
 80061ea:	3b15      	subs	r3, #21
 80061ec:	f023 0303 	bic.w	r3, r3, #3
 80061f0:	3304      	adds	r3, #4
 80061f2:	f104 0015 	add.w	r0, r4, #21
 80061f6:	4584      	cmp	ip, r0
 80061f8:	bf38      	it	cc
 80061fa:	2304      	movcc	r3, #4
 80061fc:	50ca      	str	r2, [r1, r3]
 80061fe:	b10a      	cbz	r2, 8006204 <__lshift+0xa4>
 8006200:	f108 0602 	add.w	r6, r8, #2
 8006204:	3e01      	subs	r6, #1
 8006206:	4638      	mov	r0, r7
 8006208:	612e      	str	r6, [r5, #16]
 800620a:	4621      	mov	r1, r4
 800620c:	f7ff fd8e 	bl	8005d2c <_Bfree>
 8006210:	4628      	mov	r0, r5
 8006212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006216:	f842 0f04 	str.w	r0, [r2, #4]!
 800621a:	3301      	adds	r3, #1
 800621c:	e7c5      	b.n	80061aa <__lshift+0x4a>
 800621e:	3904      	subs	r1, #4
 8006220:	f853 2b04 	ldr.w	r2, [r3], #4
 8006224:	f841 2f04 	str.w	r2, [r1, #4]!
 8006228:	459c      	cmp	ip, r3
 800622a:	d8f9      	bhi.n	8006220 <__lshift+0xc0>
 800622c:	e7ea      	b.n	8006204 <__lshift+0xa4>
 800622e:	bf00      	nop
 8006230:	08007269 	.word	0x08007269
 8006234:	080072f1 	.word	0x080072f1

08006238 <__mcmp>:
 8006238:	b530      	push	{r4, r5, lr}
 800623a:	6902      	ldr	r2, [r0, #16]
 800623c:	690c      	ldr	r4, [r1, #16]
 800623e:	1b12      	subs	r2, r2, r4
 8006240:	d10e      	bne.n	8006260 <__mcmp+0x28>
 8006242:	f100 0314 	add.w	r3, r0, #20
 8006246:	3114      	adds	r1, #20
 8006248:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800624c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006250:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006254:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006258:	42a5      	cmp	r5, r4
 800625a:	d003      	beq.n	8006264 <__mcmp+0x2c>
 800625c:	d305      	bcc.n	800626a <__mcmp+0x32>
 800625e:	2201      	movs	r2, #1
 8006260:	4610      	mov	r0, r2
 8006262:	bd30      	pop	{r4, r5, pc}
 8006264:	4283      	cmp	r3, r0
 8006266:	d3f3      	bcc.n	8006250 <__mcmp+0x18>
 8006268:	e7fa      	b.n	8006260 <__mcmp+0x28>
 800626a:	f04f 32ff 	mov.w	r2, #4294967295
 800626e:	e7f7      	b.n	8006260 <__mcmp+0x28>

08006270 <__mdiff>:
 8006270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	460c      	mov	r4, r1
 8006276:	4606      	mov	r6, r0
 8006278:	4611      	mov	r1, r2
 800627a:	4620      	mov	r0, r4
 800627c:	4690      	mov	r8, r2
 800627e:	f7ff ffdb 	bl	8006238 <__mcmp>
 8006282:	1e05      	subs	r5, r0, #0
 8006284:	d110      	bne.n	80062a8 <__mdiff+0x38>
 8006286:	4629      	mov	r1, r5
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff fd0f 	bl	8005cac <_Balloc>
 800628e:	b930      	cbnz	r0, 800629e <__mdiff+0x2e>
 8006290:	4b3a      	ldr	r3, [pc, #232]	; (800637c <__mdiff+0x10c>)
 8006292:	4602      	mov	r2, r0
 8006294:	f240 2137 	movw	r1, #567	; 0x237
 8006298:	4839      	ldr	r0, [pc, #228]	; (8006380 <__mdiff+0x110>)
 800629a:	f000 fa7f 	bl	800679c <__assert_func>
 800629e:	2301      	movs	r3, #1
 80062a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a8:	bfa4      	itt	ge
 80062aa:	4643      	movge	r3, r8
 80062ac:	46a0      	movge	r8, r4
 80062ae:	4630      	mov	r0, r6
 80062b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062b4:	bfa6      	itte	ge
 80062b6:	461c      	movge	r4, r3
 80062b8:	2500      	movge	r5, #0
 80062ba:	2501      	movlt	r5, #1
 80062bc:	f7ff fcf6 	bl	8005cac <_Balloc>
 80062c0:	b920      	cbnz	r0, 80062cc <__mdiff+0x5c>
 80062c2:	4b2e      	ldr	r3, [pc, #184]	; (800637c <__mdiff+0x10c>)
 80062c4:	4602      	mov	r2, r0
 80062c6:	f240 2145 	movw	r1, #581	; 0x245
 80062ca:	e7e5      	b.n	8006298 <__mdiff+0x28>
 80062cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062d0:	6926      	ldr	r6, [r4, #16]
 80062d2:	60c5      	str	r5, [r0, #12]
 80062d4:	f104 0914 	add.w	r9, r4, #20
 80062d8:	f108 0514 	add.w	r5, r8, #20
 80062dc:	f100 0e14 	add.w	lr, r0, #20
 80062e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80062e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062e8:	f108 0210 	add.w	r2, r8, #16
 80062ec:	46f2      	mov	sl, lr
 80062ee:	2100      	movs	r1, #0
 80062f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80062f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062f8:	fa11 f88b 	uxtah	r8, r1, fp
 80062fc:	b299      	uxth	r1, r3
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	eba8 0801 	sub.w	r8, r8, r1
 8006304:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006308:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800630c:	fa1f f888 	uxth.w	r8, r8
 8006310:	1419      	asrs	r1, r3, #16
 8006312:	454e      	cmp	r6, r9
 8006314:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006318:	f84a 3b04 	str.w	r3, [sl], #4
 800631c:	d8e8      	bhi.n	80062f0 <__mdiff+0x80>
 800631e:	1b33      	subs	r3, r6, r4
 8006320:	3b15      	subs	r3, #21
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	3304      	adds	r3, #4
 8006328:	3415      	adds	r4, #21
 800632a:	42a6      	cmp	r6, r4
 800632c:	bf38      	it	cc
 800632e:	2304      	movcc	r3, #4
 8006330:	441d      	add	r5, r3
 8006332:	4473      	add	r3, lr
 8006334:	469e      	mov	lr, r3
 8006336:	462e      	mov	r6, r5
 8006338:	4566      	cmp	r6, ip
 800633a:	d30e      	bcc.n	800635a <__mdiff+0xea>
 800633c:	f10c 0203 	add.w	r2, ip, #3
 8006340:	1b52      	subs	r2, r2, r5
 8006342:	f022 0203 	bic.w	r2, r2, #3
 8006346:	3d03      	subs	r5, #3
 8006348:	45ac      	cmp	ip, r5
 800634a:	bf38      	it	cc
 800634c:	2200      	movcc	r2, #0
 800634e:	4413      	add	r3, r2
 8006350:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006354:	b17a      	cbz	r2, 8006376 <__mdiff+0x106>
 8006356:	6107      	str	r7, [r0, #16]
 8006358:	e7a4      	b.n	80062a4 <__mdiff+0x34>
 800635a:	f856 8b04 	ldr.w	r8, [r6], #4
 800635e:	fa11 f288 	uxtah	r2, r1, r8
 8006362:	1414      	asrs	r4, r2, #16
 8006364:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006368:	b292      	uxth	r2, r2
 800636a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800636e:	f84e 2b04 	str.w	r2, [lr], #4
 8006372:	1421      	asrs	r1, r4, #16
 8006374:	e7e0      	b.n	8006338 <__mdiff+0xc8>
 8006376:	3f01      	subs	r7, #1
 8006378:	e7ea      	b.n	8006350 <__mdiff+0xe0>
 800637a:	bf00      	nop
 800637c:	08007269 	.word	0x08007269
 8006380:	080072f1 	.word	0x080072f1

08006384 <__ulp>:
 8006384:	b082      	sub	sp, #8
 8006386:	ed8d 0b00 	vstr	d0, [sp]
 800638a:	9a01      	ldr	r2, [sp, #4]
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <__ulp+0x48>)
 800638e:	4013      	ands	r3, r2
 8006390:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006394:	2b00      	cmp	r3, #0
 8006396:	dc08      	bgt.n	80063aa <__ulp+0x26>
 8006398:	425b      	negs	r3, r3
 800639a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800639e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063a2:	da04      	bge.n	80063ae <__ulp+0x2a>
 80063a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80063a8:	4113      	asrs	r3, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	e008      	b.n	80063c0 <__ulp+0x3c>
 80063ae:	f1a2 0314 	sub.w	r3, r2, #20
 80063b2:	2b1e      	cmp	r3, #30
 80063b4:	bfda      	itte	le
 80063b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80063ba:	40da      	lsrle	r2, r3
 80063bc:	2201      	movgt	r2, #1
 80063be:	2300      	movs	r3, #0
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	ec41 0b10 	vmov	d0, r0, r1
 80063c8:	b002      	add	sp, #8
 80063ca:	4770      	bx	lr
 80063cc:	7ff00000 	.word	0x7ff00000

080063d0 <__b2d>:
 80063d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d4:	6906      	ldr	r6, [r0, #16]
 80063d6:	f100 0814 	add.w	r8, r0, #20
 80063da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80063de:	1f37      	subs	r7, r6, #4
 80063e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7ff fd53 	bl	8005e90 <__hi0bits>
 80063ea:	f1c0 0320 	rsb	r3, r0, #32
 80063ee:	280a      	cmp	r0, #10
 80063f0:	600b      	str	r3, [r1, #0]
 80063f2:	491b      	ldr	r1, [pc, #108]	; (8006460 <__b2d+0x90>)
 80063f4:	dc15      	bgt.n	8006422 <__b2d+0x52>
 80063f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80063fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80063fe:	45b8      	cmp	r8, r7
 8006400:	ea43 0501 	orr.w	r5, r3, r1
 8006404:	bf34      	ite	cc
 8006406:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800640a:	2300      	movcs	r3, #0
 800640c:	3015      	adds	r0, #21
 800640e:	fa02 f000 	lsl.w	r0, r2, r0
 8006412:	fa23 f30c 	lsr.w	r3, r3, ip
 8006416:	4303      	orrs	r3, r0
 8006418:	461c      	mov	r4, r3
 800641a:	ec45 4b10 	vmov	d0, r4, r5
 800641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006422:	45b8      	cmp	r8, r7
 8006424:	bf3a      	itte	cc
 8006426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800642a:	f1a6 0708 	subcc.w	r7, r6, #8
 800642e:	2300      	movcs	r3, #0
 8006430:	380b      	subs	r0, #11
 8006432:	d012      	beq.n	800645a <__b2d+0x8a>
 8006434:	f1c0 0120 	rsb	r1, r0, #32
 8006438:	fa23 f401 	lsr.w	r4, r3, r1
 800643c:	4082      	lsls	r2, r0
 800643e:	4322      	orrs	r2, r4
 8006440:	4547      	cmp	r7, r8
 8006442:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006446:	bf8c      	ite	hi
 8006448:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800644c:	2200      	movls	r2, #0
 800644e:	4083      	lsls	r3, r0
 8006450:	40ca      	lsrs	r2, r1
 8006452:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006456:	4313      	orrs	r3, r2
 8006458:	e7de      	b.n	8006418 <__b2d+0x48>
 800645a:	ea42 0501 	orr.w	r5, r2, r1
 800645e:	e7db      	b.n	8006418 <__b2d+0x48>
 8006460:	3ff00000 	.word	0x3ff00000

08006464 <__d2b>:
 8006464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006468:	460f      	mov	r7, r1
 800646a:	2101      	movs	r1, #1
 800646c:	ec59 8b10 	vmov	r8, r9, d0
 8006470:	4616      	mov	r6, r2
 8006472:	f7ff fc1b 	bl	8005cac <_Balloc>
 8006476:	4604      	mov	r4, r0
 8006478:	b930      	cbnz	r0, 8006488 <__d2b+0x24>
 800647a:	4602      	mov	r2, r0
 800647c:	4b24      	ldr	r3, [pc, #144]	; (8006510 <__d2b+0xac>)
 800647e:	4825      	ldr	r0, [pc, #148]	; (8006514 <__d2b+0xb0>)
 8006480:	f240 310f 	movw	r1, #783	; 0x30f
 8006484:	f000 f98a 	bl	800679c <__assert_func>
 8006488:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800648c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006490:	bb2d      	cbnz	r5, 80064de <__d2b+0x7a>
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	f1b8 0300 	subs.w	r3, r8, #0
 8006498:	d026      	beq.n	80064e8 <__d2b+0x84>
 800649a:	4668      	mov	r0, sp
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	f7ff fd17 	bl	8005ed0 <__lo0bits>
 80064a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064a6:	b1e8      	cbz	r0, 80064e4 <__d2b+0x80>
 80064a8:	f1c0 0320 	rsb	r3, r0, #32
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	430b      	orrs	r3, r1
 80064b2:	40c2      	lsrs	r2, r0
 80064b4:	6163      	str	r3, [r4, #20]
 80064b6:	9201      	str	r2, [sp, #4]
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	61a3      	str	r3, [r4, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2202      	movne	r2, #2
 80064c2:	2201      	moveq	r2, #1
 80064c4:	6122      	str	r2, [r4, #16]
 80064c6:	b1bd      	cbz	r5, 80064f8 <__d2b+0x94>
 80064c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80064cc:	4405      	add	r5, r0
 80064ce:	603d      	str	r5, [r7, #0]
 80064d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064d4:	6030      	str	r0, [r6, #0]
 80064d6:	4620      	mov	r0, r4
 80064d8:	b003      	add	sp, #12
 80064da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064e2:	e7d6      	b.n	8006492 <__d2b+0x2e>
 80064e4:	6161      	str	r1, [r4, #20]
 80064e6:	e7e7      	b.n	80064b8 <__d2b+0x54>
 80064e8:	a801      	add	r0, sp, #4
 80064ea:	f7ff fcf1 	bl	8005ed0 <__lo0bits>
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	6163      	str	r3, [r4, #20]
 80064f2:	3020      	adds	r0, #32
 80064f4:	2201      	movs	r2, #1
 80064f6:	e7e5      	b.n	80064c4 <__d2b+0x60>
 80064f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006500:	6038      	str	r0, [r7, #0]
 8006502:	6918      	ldr	r0, [r3, #16]
 8006504:	f7ff fcc4 	bl	8005e90 <__hi0bits>
 8006508:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800650c:	e7e2      	b.n	80064d4 <__d2b+0x70>
 800650e:	bf00      	nop
 8006510:	08007269 	.word	0x08007269
 8006514:	080072f1 	.word	0x080072f1

08006518 <__ratio>:
 8006518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	4688      	mov	r8, r1
 800651e:	4669      	mov	r1, sp
 8006520:	4681      	mov	r9, r0
 8006522:	f7ff ff55 	bl	80063d0 <__b2d>
 8006526:	a901      	add	r1, sp, #4
 8006528:	4640      	mov	r0, r8
 800652a:	ec55 4b10 	vmov	r4, r5, d0
 800652e:	f7ff ff4f 	bl	80063d0 <__b2d>
 8006532:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006536:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800653a:	eba3 0c02 	sub.w	ip, r3, r2
 800653e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006548:	ec51 0b10 	vmov	r0, r1, d0
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfd6      	itet	le
 8006550:	460a      	movle	r2, r1
 8006552:	462a      	movgt	r2, r5
 8006554:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006558:	468b      	mov	fp, r1
 800655a:	462f      	mov	r7, r5
 800655c:	bfd4      	ite	le
 800655e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006562:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006566:	4620      	mov	r0, r4
 8006568:	ee10 2a10 	vmov	r2, s0
 800656c:	465b      	mov	r3, fp
 800656e:	4639      	mov	r1, r7
 8006570:	f7fa f97c 	bl	800086c <__aeabi_ddiv>
 8006574:	ec41 0b10 	vmov	d0, r0, r1
 8006578:	b003      	add	sp, #12
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800657e <__copybits>:
 800657e:	3901      	subs	r1, #1
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	1149      	asrs	r1, r1, #5
 8006584:	6914      	ldr	r4, [r2, #16]
 8006586:	3101      	adds	r1, #1
 8006588:	f102 0314 	add.w	r3, r2, #20
 800658c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006590:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006594:	1f05      	subs	r5, r0, #4
 8006596:	42a3      	cmp	r3, r4
 8006598:	d30c      	bcc.n	80065b4 <__copybits+0x36>
 800659a:	1aa3      	subs	r3, r4, r2
 800659c:	3b11      	subs	r3, #17
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	3211      	adds	r2, #17
 80065a4:	42a2      	cmp	r2, r4
 80065a6:	bf88      	it	hi
 80065a8:	2300      	movhi	r3, #0
 80065aa:	4418      	add	r0, r3
 80065ac:	2300      	movs	r3, #0
 80065ae:	4288      	cmp	r0, r1
 80065b0:	d305      	bcc.n	80065be <__copybits+0x40>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80065b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80065bc:	e7eb      	b.n	8006596 <__copybits+0x18>
 80065be:	f840 3b04 	str.w	r3, [r0], #4
 80065c2:	e7f4      	b.n	80065ae <__copybits+0x30>

080065c4 <__any_on>:
 80065c4:	f100 0214 	add.w	r2, r0, #20
 80065c8:	6900      	ldr	r0, [r0, #16]
 80065ca:	114b      	asrs	r3, r1, #5
 80065cc:	4298      	cmp	r0, r3
 80065ce:	b510      	push	{r4, lr}
 80065d0:	db11      	blt.n	80065f6 <__any_on+0x32>
 80065d2:	dd0a      	ble.n	80065ea <__any_on+0x26>
 80065d4:	f011 011f 	ands.w	r1, r1, #31
 80065d8:	d007      	beq.n	80065ea <__any_on+0x26>
 80065da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80065de:	fa24 f001 	lsr.w	r0, r4, r1
 80065e2:	fa00 f101 	lsl.w	r1, r0, r1
 80065e6:	428c      	cmp	r4, r1
 80065e8:	d10b      	bne.n	8006602 <__any_on+0x3e>
 80065ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d803      	bhi.n	80065fa <__any_on+0x36>
 80065f2:	2000      	movs	r0, #0
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	4603      	mov	r3, r0
 80065f8:	e7f7      	b.n	80065ea <__any_on+0x26>
 80065fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065fe:	2900      	cmp	r1, #0
 8006600:	d0f5      	beq.n	80065ee <__any_on+0x2a>
 8006602:	2001      	movs	r0, #1
 8006604:	e7f6      	b.n	80065f4 <__any_on+0x30>

08006606 <__ascii_wctomb>:
 8006606:	b149      	cbz	r1, 800661c <__ascii_wctomb+0x16>
 8006608:	2aff      	cmp	r2, #255	; 0xff
 800660a:	bf85      	ittet	hi
 800660c:	238a      	movhi	r3, #138	; 0x8a
 800660e:	6003      	strhi	r3, [r0, #0]
 8006610:	700a      	strbls	r2, [r1, #0]
 8006612:	f04f 30ff 	movhi.w	r0, #4294967295
 8006616:	bf98      	it	ls
 8006618:	2001      	movls	r0, #1
 800661a:	4770      	bx	lr
 800661c:	4608      	mov	r0, r1
 800661e:	4770      	bx	lr

08006620 <__sflush_r>:
 8006620:	898a      	ldrh	r2, [r1, #12]
 8006622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006626:	4605      	mov	r5, r0
 8006628:	0710      	lsls	r0, r2, #28
 800662a:	460c      	mov	r4, r1
 800662c:	d458      	bmi.n	80066e0 <__sflush_r+0xc0>
 800662e:	684b      	ldr	r3, [r1, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dc05      	bgt.n	8006640 <__sflush_r+0x20>
 8006634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	dc02      	bgt.n	8006640 <__sflush_r+0x20>
 800663a:	2000      	movs	r0, #0
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006642:	2e00      	cmp	r6, #0
 8006644:	d0f9      	beq.n	800663a <__sflush_r+0x1a>
 8006646:	2300      	movs	r3, #0
 8006648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800664c:	682f      	ldr	r7, [r5, #0]
 800664e:	6a21      	ldr	r1, [r4, #32]
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	d032      	beq.n	80066ba <__sflush_r+0x9a>
 8006654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	075a      	lsls	r2, r3, #29
 800665a:	d505      	bpl.n	8006668 <__sflush_r+0x48>
 800665c:	6863      	ldr	r3, [r4, #4]
 800665e:	1ac0      	subs	r0, r0, r3
 8006660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006662:	b10b      	cbz	r3, 8006668 <__sflush_r+0x48>
 8006664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006666:	1ac0      	subs	r0, r0, r3
 8006668:	2300      	movs	r3, #0
 800666a:	4602      	mov	r2, r0
 800666c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800666e:	6a21      	ldr	r1, [r4, #32]
 8006670:	4628      	mov	r0, r5
 8006672:	47b0      	blx	r6
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	d106      	bne.n	8006688 <__sflush_r+0x68>
 800667a:	6829      	ldr	r1, [r5, #0]
 800667c:	291d      	cmp	r1, #29
 800667e:	d82b      	bhi.n	80066d8 <__sflush_r+0xb8>
 8006680:	4a29      	ldr	r2, [pc, #164]	; (8006728 <__sflush_r+0x108>)
 8006682:	410a      	asrs	r2, r1
 8006684:	07d6      	lsls	r6, r2, #31
 8006686:	d427      	bmi.n	80066d8 <__sflush_r+0xb8>
 8006688:	2200      	movs	r2, #0
 800668a:	6062      	str	r2, [r4, #4]
 800668c:	04d9      	lsls	r1, r3, #19
 800668e:	6922      	ldr	r2, [r4, #16]
 8006690:	6022      	str	r2, [r4, #0]
 8006692:	d504      	bpl.n	800669e <__sflush_r+0x7e>
 8006694:	1c42      	adds	r2, r0, #1
 8006696:	d101      	bne.n	800669c <__sflush_r+0x7c>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	b903      	cbnz	r3, 800669e <__sflush_r+0x7e>
 800669c:	6560      	str	r0, [r4, #84]	; 0x54
 800669e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a0:	602f      	str	r7, [r5, #0]
 80066a2:	2900      	cmp	r1, #0
 80066a4:	d0c9      	beq.n	800663a <__sflush_r+0x1a>
 80066a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066aa:	4299      	cmp	r1, r3
 80066ac:	d002      	beq.n	80066b4 <__sflush_r+0x94>
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7fe fe9a 	bl	80053e8 <_free_r>
 80066b4:	2000      	movs	r0, #0
 80066b6:	6360      	str	r0, [r4, #52]	; 0x34
 80066b8:	e7c0      	b.n	800663c <__sflush_r+0x1c>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4628      	mov	r0, r5
 80066be:	47b0      	blx	r6
 80066c0:	1c41      	adds	r1, r0, #1
 80066c2:	d1c8      	bne.n	8006656 <__sflush_r+0x36>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0c5      	beq.n	8006656 <__sflush_r+0x36>
 80066ca:	2b1d      	cmp	r3, #29
 80066cc:	d001      	beq.n	80066d2 <__sflush_r+0xb2>
 80066ce:	2b16      	cmp	r3, #22
 80066d0:	d101      	bne.n	80066d6 <__sflush_r+0xb6>
 80066d2:	602f      	str	r7, [r5, #0]
 80066d4:	e7b1      	b.n	800663a <__sflush_r+0x1a>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	e7ad      	b.n	800663c <__sflush_r+0x1c>
 80066e0:	690f      	ldr	r7, [r1, #16]
 80066e2:	2f00      	cmp	r7, #0
 80066e4:	d0a9      	beq.n	800663a <__sflush_r+0x1a>
 80066e6:	0793      	lsls	r3, r2, #30
 80066e8:	680e      	ldr	r6, [r1, #0]
 80066ea:	bf08      	it	eq
 80066ec:	694b      	ldreq	r3, [r1, #20]
 80066ee:	600f      	str	r7, [r1, #0]
 80066f0:	bf18      	it	ne
 80066f2:	2300      	movne	r3, #0
 80066f4:	eba6 0807 	sub.w	r8, r6, r7
 80066f8:	608b      	str	r3, [r1, #8]
 80066fa:	f1b8 0f00 	cmp.w	r8, #0
 80066fe:	dd9c      	ble.n	800663a <__sflush_r+0x1a>
 8006700:	6a21      	ldr	r1, [r4, #32]
 8006702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006704:	4643      	mov	r3, r8
 8006706:	463a      	mov	r2, r7
 8006708:	4628      	mov	r0, r5
 800670a:	47b0      	blx	r6
 800670c:	2800      	cmp	r0, #0
 800670e:	dc06      	bgt.n	800671e <__sflush_r+0xfe>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	e78e      	b.n	800663c <__sflush_r+0x1c>
 800671e:	4407      	add	r7, r0
 8006720:	eba8 0800 	sub.w	r8, r8, r0
 8006724:	e7e9      	b.n	80066fa <__sflush_r+0xda>
 8006726:	bf00      	nop
 8006728:	dfbffffe 	.word	0xdfbffffe

0800672c <_fflush_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	690b      	ldr	r3, [r1, #16]
 8006730:	4605      	mov	r5, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b913      	cbnz	r3, 800673c <_fflush_r+0x10>
 8006736:	2500      	movs	r5, #0
 8006738:	4628      	mov	r0, r5
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	b118      	cbz	r0, 8006746 <_fflush_r+0x1a>
 800673e:	6a03      	ldr	r3, [r0, #32]
 8006740:	b90b      	cbnz	r3, 8006746 <_fflush_r+0x1a>
 8006742:	f7fe fd19 	bl	8005178 <__sinit>
 8006746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f3      	beq.n	8006736 <_fflush_r+0xa>
 800674e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006750:	07d0      	lsls	r0, r2, #31
 8006752:	d404      	bmi.n	800675e <_fflush_r+0x32>
 8006754:	0599      	lsls	r1, r3, #22
 8006756:	d402      	bmi.n	800675e <_fflush_r+0x32>
 8006758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675a:	f7fe fe2c 	bl	80053b6 <__retarget_lock_acquire_recursive>
 800675e:	4628      	mov	r0, r5
 8006760:	4621      	mov	r1, r4
 8006762:	f7ff ff5d 	bl	8006620 <__sflush_r>
 8006766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006768:	07da      	lsls	r2, r3, #31
 800676a:	4605      	mov	r5, r0
 800676c:	d4e4      	bmi.n	8006738 <_fflush_r+0xc>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	059b      	lsls	r3, r3, #22
 8006772:	d4e1      	bmi.n	8006738 <_fflush_r+0xc>
 8006774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006776:	f7fe fe1f 	bl	80053b8 <__retarget_lock_release_recursive>
 800677a:	e7dd      	b.n	8006738 <_fflush_r+0xc>

0800677c <_sbrk_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d06      	ldr	r5, [pc, #24]	; (8006798 <_sbrk_r+0x1c>)
 8006780:	2300      	movs	r3, #0
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	602b      	str	r3, [r5, #0]
 8006788:	f7fb fa56 	bl	8001c38 <_sbrk>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_sbrk_r+0x1a>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_sbrk_r+0x1a>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	200005d0 	.word	0x200005d0

0800679c <__assert_func>:
 800679c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800679e:	4614      	mov	r4, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <__assert_func+0x2c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4605      	mov	r5, r0
 80067a8:	68d8      	ldr	r0, [r3, #12]
 80067aa:	b14c      	cbz	r4, 80067c0 <__assert_func+0x24>
 80067ac:	4b07      	ldr	r3, [pc, #28]	; (80067cc <__assert_func+0x30>)
 80067ae:	9100      	str	r1, [sp, #0]
 80067b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067b4:	4906      	ldr	r1, [pc, #24]	; (80067d0 <__assert_func+0x34>)
 80067b6:	462b      	mov	r3, r5
 80067b8:	f000 f82c 	bl	8006814 <fiprintf>
 80067bc:	f000 f83c 	bl	8006838 <abort>
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <__assert_func+0x38>)
 80067c2:	461c      	mov	r4, r3
 80067c4:	e7f3      	b.n	80067ae <__assert_func+0x12>
 80067c6:	bf00      	nop
 80067c8:	200001d0 	.word	0x200001d0
 80067cc:	0800744c 	.word	0x0800744c
 80067d0:	08007459 	.word	0x08007459
 80067d4:	08007487 	.word	0x08007487

080067d8 <_calloc_r>:
 80067d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067da:	fba1 2402 	umull	r2, r4, r1, r2
 80067de:	b94c      	cbnz	r4, 80067f4 <_calloc_r+0x1c>
 80067e0:	4611      	mov	r1, r2
 80067e2:	9201      	str	r2, [sp, #4]
 80067e4:	f7ff f9c4 	bl	8005b70 <_malloc_r>
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	4605      	mov	r5, r0
 80067ec:	b930      	cbnz	r0, 80067fc <_calloc_r+0x24>
 80067ee:	4628      	mov	r0, r5
 80067f0:	b003      	add	sp, #12
 80067f2:	bd30      	pop	{r4, r5, pc}
 80067f4:	220c      	movs	r2, #12
 80067f6:	6002      	str	r2, [r0, #0]
 80067f8:	2500      	movs	r5, #0
 80067fa:	e7f8      	b.n	80067ee <_calloc_r+0x16>
 80067fc:	4621      	mov	r1, r4
 80067fe:	f7fe fd34 	bl	800526a <memset>
 8006802:	e7f4      	b.n	80067ee <_calloc_r+0x16>

08006804 <malloc>:
 8006804:	4b02      	ldr	r3, [pc, #8]	; (8006810 <malloc+0xc>)
 8006806:	4601      	mov	r1, r0
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	f7ff b9b1 	b.w	8005b70 <_malloc_r>
 800680e:	bf00      	nop
 8006810:	200001d0 	.word	0x200001d0

08006814 <fiprintf>:
 8006814:	b40e      	push	{r1, r2, r3}
 8006816:	b503      	push	{r0, r1, lr}
 8006818:	4601      	mov	r1, r0
 800681a:	ab03      	add	r3, sp, #12
 800681c:	4805      	ldr	r0, [pc, #20]	; (8006834 <fiprintf+0x20>)
 800681e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006822:	6800      	ldr	r0, [r0, #0]
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	f000 f837 	bl	8006898 <_vfiprintf_r>
 800682a:	b002      	add	sp, #8
 800682c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006830:	b003      	add	sp, #12
 8006832:	4770      	bx	lr
 8006834:	200001d0 	.word	0x200001d0

08006838 <abort>:
 8006838:	b508      	push	{r3, lr}
 800683a:	2006      	movs	r0, #6
 800683c:	f000 fb94 	bl	8006f68 <raise>
 8006840:	2001      	movs	r0, #1
 8006842:	f7fb f981 	bl	8001b48 <_exit>

08006846 <__sfputc_r>:
 8006846:	6893      	ldr	r3, [r2, #8]
 8006848:	3b01      	subs	r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	b410      	push	{r4}
 800684e:	6093      	str	r3, [r2, #8]
 8006850:	da08      	bge.n	8006864 <__sfputc_r+0x1e>
 8006852:	6994      	ldr	r4, [r2, #24]
 8006854:	42a3      	cmp	r3, r4
 8006856:	db01      	blt.n	800685c <__sfputc_r+0x16>
 8006858:	290a      	cmp	r1, #10
 800685a:	d103      	bne.n	8006864 <__sfputc_r+0x1e>
 800685c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006860:	f000 bac4 	b.w	8006dec <__swbuf_r>
 8006864:	6813      	ldr	r3, [r2, #0]
 8006866:	1c58      	adds	r0, r3, #1
 8006868:	6010      	str	r0, [r2, #0]
 800686a:	7019      	strb	r1, [r3, #0]
 800686c:	4608      	mov	r0, r1
 800686e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006872:	4770      	bx	lr

08006874 <__sfputs_r>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	4606      	mov	r6, r0
 8006878:	460f      	mov	r7, r1
 800687a:	4614      	mov	r4, r2
 800687c:	18d5      	adds	r5, r2, r3
 800687e:	42ac      	cmp	r4, r5
 8006880:	d101      	bne.n	8006886 <__sfputs_r+0x12>
 8006882:	2000      	movs	r0, #0
 8006884:	e007      	b.n	8006896 <__sfputs_r+0x22>
 8006886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688a:	463a      	mov	r2, r7
 800688c:	4630      	mov	r0, r6
 800688e:	f7ff ffda 	bl	8006846 <__sfputc_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d1f3      	bne.n	800687e <__sfputs_r+0xa>
 8006896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006898 <_vfiprintf_r>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	460d      	mov	r5, r1
 800689e:	b09d      	sub	sp, #116	; 0x74
 80068a0:	4614      	mov	r4, r2
 80068a2:	4698      	mov	r8, r3
 80068a4:	4606      	mov	r6, r0
 80068a6:	b118      	cbz	r0, 80068b0 <_vfiprintf_r+0x18>
 80068a8:	6a03      	ldr	r3, [r0, #32]
 80068aa:	b90b      	cbnz	r3, 80068b0 <_vfiprintf_r+0x18>
 80068ac:	f7fe fc64 	bl	8005178 <__sinit>
 80068b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068b2:	07d9      	lsls	r1, r3, #31
 80068b4:	d405      	bmi.n	80068c2 <_vfiprintf_r+0x2a>
 80068b6:	89ab      	ldrh	r3, [r5, #12]
 80068b8:	059a      	lsls	r2, r3, #22
 80068ba:	d402      	bmi.n	80068c2 <_vfiprintf_r+0x2a>
 80068bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068be:	f7fe fd7a 	bl	80053b6 <__retarget_lock_acquire_recursive>
 80068c2:	89ab      	ldrh	r3, [r5, #12]
 80068c4:	071b      	lsls	r3, r3, #28
 80068c6:	d501      	bpl.n	80068cc <_vfiprintf_r+0x34>
 80068c8:	692b      	ldr	r3, [r5, #16]
 80068ca:	b99b      	cbnz	r3, 80068f4 <_vfiprintf_r+0x5c>
 80068cc:	4629      	mov	r1, r5
 80068ce:	4630      	mov	r0, r6
 80068d0:	f000 faca 	bl	8006e68 <__swsetup_r>
 80068d4:	b170      	cbz	r0, 80068f4 <_vfiprintf_r+0x5c>
 80068d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068d8:	07dc      	lsls	r4, r3, #31
 80068da:	d504      	bpl.n	80068e6 <_vfiprintf_r+0x4e>
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	b01d      	add	sp, #116	; 0x74
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	0598      	lsls	r0, r3, #22
 80068ea:	d4f7      	bmi.n	80068dc <_vfiprintf_r+0x44>
 80068ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ee:	f7fe fd63 	bl	80053b8 <__retarget_lock_release_recursive>
 80068f2:	e7f3      	b.n	80068dc <_vfiprintf_r+0x44>
 80068f4:	2300      	movs	r3, #0
 80068f6:	9309      	str	r3, [sp, #36]	; 0x24
 80068f8:	2320      	movs	r3, #32
 80068fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006902:	2330      	movs	r3, #48	; 0x30
 8006904:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006ab8 <_vfiprintf_r+0x220>
 8006908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800690c:	f04f 0901 	mov.w	r9, #1
 8006910:	4623      	mov	r3, r4
 8006912:	469a      	mov	sl, r3
 8006914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006918:	b10a      	cbz	r2, 800691e <_vfiprintf_r+0x86>
 800691a:	2a25      	cmp	r2, #37	; 0x25
 800691c:	d1f9      	bne.n	8006912 <_vfiprintf_r+0x7a>
 800691e:	ebba 0b04 	subs.w	fp, sl, r4
 8006922:	d00b      	beq.n	800693c <_vfiprintf_r+0xa4>
 8006924:	465b      	mov	r3, fp
 8006926:	4622      	mov	r2, r4
 8006928:	4629      	mov	r1, r5
 800692a:	4630      	mov	r0, r6
 800692c:	f7ff ffa2 	bl	8006874 <__sfputs_r>
 8006930:	3001      	adds	r0, #1
 8006932:	f000 80a9 	beq.w	8006a88 <_vfiprintf_r+0x1f0>
 8006936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006938:	445a      	add	r2, fp
 800693a:	9209      	str	r2, [sp, #36]	; 0x24
 800693c:	f89a 3000 	ldrb.w	r3, [sl]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80a1 	beq.w	8006a88 <_vfiprintf_r+0x1f0>
 8006946:	2300      	movs	r3, #0
 8006948:	f04f 32ff 	mov.w	r2, #4294967295
 800694c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006950:	f10a 0a01 	add.w	sl, sl, #1
 8006954:	9304      	str	r3, [sp, #16]
 8006956:	9307      	str	r3, [sp, #28]
 8006958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800695c:	931a      	str	r3, [sp, #104]	; 0x68
 800695e:	4654      	mov	r4, sl
 8006960:	2205      	movs	r2, #5
 8006962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006966:	4854      	ldr	r0, [pc, #336]	; (8006ab8 <_vfiprintf_r+0x220>)
 8006968:	f7f9 fc4a 	bl	8000200 <memchr>
 800696c:	9a04      	ldr	r2, [sp, #16]
 800696e:	b9d8      	cbnz	r0, 80069a8 <_vfiprintf_r+0x110>
 8006970:	06d1      	lsls	r1, r2, #27
 8006972:	bf44      	itt	mi
 8006974:	2320      	movmi	r3, #32
 8006976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800697a:	0713      	lsls	r3, r2, #28
 800697c:	bf44      	itt	mi
 800697e:	232b      	movmi	r3, #43	; 0x2b
 8006980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006984:	f89a 3000 	ldrb.w	r3, [sl]
 8006988:	2b2a      	cmp	r3, #42	; 0x2a
 800698a:	d015      	beq.n	80069b8 <_vfiprintf_r+0x120>
 800698c:	9a07      	ldr	r2, [sp, #28]
 800698e:	4654      	mov	r4, sl
 8006990:	2000      	movs	r0, #0
 8006992:	f04f 0c0a 	mov.w	ip, #10
 8006996:	4621      	mov	r1, r4
 8006998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800699c:	3b30      	subs	r3, #48	; 0x30
 800699e:	2b09      	cmp	r3, #9
 80069a0:	d94d      	bls.n	8006a3e <_vfiprintf_r+0x1a6>
 80069a2:	b1b0      	cbz	r0, 80069d2 <_vfiprintf_r+0x13a>
 80069a4:	9207      	str	r2, [sp, #28]
 80069a6:	e014      	b.n	80069d2 <_vfiprintf_r+0x13a>
 80069a8:	eba0 0308 	sub.w	r3, r0, r8
 80069ac:	fa09 f303 	lsl.w	r3, r9, r3
 80069b0:	4313      	orrs	r3, r2
 80069b2:	9304      	str	r3, [sp, #16]
 80069b4:	46a2      	mov	sl, r4
 80069b6:	e7d2      	b.n	800695e <_vfiprintf_r+0xc6>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	1d19      	adds	r1, r3, #4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	9103      	str	r1, [sp, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	bfbb      	ittet	lt
 80069c4:	425b      	neglt	r3, r3
 80069c6:	f042 0202 	orrlt.w	r2, r2, #2
 80069ca:	9307      	strge	r3, [sp, #28]
 80069cc:	9307      	strlt	r3, [sp, #28]
 80069ce:	bfb8      	it	lt
 80069d0:	9204      	strlt	r2, [sp, #16]
 80069d2:	7823      	ldrb	r3, [r4, #0]
 80069d4:	2b2e      	cmp	r3, #46	; 0x2e
 80069d6:	d10c      	bne.n	80069f2 <_vfiprintf_r+0x15a>
 80069d8:	7863      	ldrb	r3, [r4, #1]
 80069da:	2b2a      	cmp	r3, #42	; 0x2a
 80069dc:	d134      	bne.n	8006a48 <_vfiprintf_r+0x1b0>
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	1d1a      	adds	r2, r3, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	9203      	str	r2, [sp, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfb8      	it	lt
 80069ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ee:	3402      	adds	r4, #2
 80069f0:	9305      	str	r3, [sp, #20]
 80069f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ac8 <_vfiprintf_r+0x230>
 80069f6:	7821      	ldrb	r1, [r4, #0]
 80069f8:	2203      	movs	r2, #3
 80069fa:	4650      	mov	r0, sl
 80069fc:	f7f9 fc00 	bl	8000200 <memchr>
 8006a00:	b138      	cbz	r0, 8006a12 <_vfiprintf_r+0x17a>
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	eba0 000a 	sub.w	r0, r0, sl
 8006a08:	2240      	movs	r2, #64	; 0x40
 8006a0a:	4082      	lsls	r2, r0
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	3401      	adds	r4, #1
 8006a10:	9304      	str	r3, [sp, #16]
 8006a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a16:	4829      	ldr	r0, [pc, #164]	; (8006abc <_vfiprintf_r+0x224>)
 8006a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a1c:	2206      	movs	r2, #6
 8006a1e:	f7f9 fbef 	bl	8000200 <memchr>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d03f      	beq.n	8006aa6 <_vfiprintf_r+0x20e>
 8006a26:	4b26      	ldr	r3, [pc, #152]	; (8006ac0 <_vfiprintf_r+0x228>)
 8006a28:	bb1b      	cbnz	r3, 8006a72 <_vfiprintf_r+0x1da>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	3307      	adds	r3, #7
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	3308      	adds	r3, #8
 8006a34:	9303      	str	r3, [sp, #12]
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	443b      	add	r3, r7
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	e768      	b.n	8006910 <_vfiprintf_r+0x78>
 8006a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a42:	460c      	mov	r4, r1
 8006a44:	2001      	movs	r0, #1
 8006a46:	e7a6      	b.n	8006996 <_vfiprintf_r+0xfe>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	3401      	adds	r4, #1
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f04f 0c0a 	mov.w	ip, #10
 8006a54:	4620      	mov	r0, r4
 8006a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a5a:	3a30      	subs	r2, #48	; 0x30
 8006a5c:	2a09      	cmp	r2, #9
 8006a5e:	d903      	bls.n	8006a68 <_vfiprintf_r+0x1d0>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0c6      	beq.n	80069f2 <_vfiprintf_r+0x15a>
 8006a64:	9105      	str	r1, [sp, #20]
 8006a66:	e7c4      	b.n	80069f2 <_vfiprintf_r+0x15a>
 8006a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e7f0      	b.n	8006a54 <_vfiprintf_r+0x1bc>
 8006a72:	ab03      	add	r3, sp, #12
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	462a      	mov	r2, r5
 8006a78:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <_vfiprintf_r+0x22c>)
 8006a7a:	a904      	add	r1, sp, #16
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f3af 8000 	nop.w
 8006a82:	4607      	mov	r7, r0
 8006a84:	1c78      	adds	r0, r7, #1
 8006a86:	d1d6      	bne.n	8006a36 <_vfiprintf_r+0x19e>
 8006a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a8a:	07d9      	lsls	r1, r3, #31
 8006a8c:	d405      	bmi.n	8006a9a <_vfiprintf_r+0x202>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	059a      	lsls	r2, r3, #22
 8006a92:	d402      	bmi.n	8006a9a <_vfiprintf_r+0x202>
 8006a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a96:	f7fe fc8f 	bl	80053b8 <__retarget_lock_release_recursive>
 8006a9a:	89ab      	ldrh	r3, [r5, #12]
 8006a9c:	065b      	lsls	r3, r3, #25
 8006a9e:	f53f af1d 	bmi.w	80068dc <_vfiprintf_r+0x44>
 8006aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aa4:	e71c      	b.n	80068e0 <_vfiprintf_r+0x48>
 8006aa6:	ab03      	add	r3, sp, #12
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	462a      	mov	r2, r5
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <_vfiprintf_r+0x22c>)
 8006aae:	a904      	add	r1, sp, #16
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 f879 	bl	8006ba8 <_printf_i>
 8006ab6:	e7e4      	b.n	8006a82 <_vfiprintf_r+0x1ea>
 8006ab8:	08007488 	.word	0x08007488
 8006abc:	08007492 	.word	0x08007492
 8006ac0:	00000000 	.word	0x00000000
 8006ac4:	08006875 	.word	0x08006875
 8006ac8:	0800748e 	.word	0x0800748e

08006acc <_printf_common>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	4699      	mov	r9, r3
 8006ad4:	688a      	ldr	r2, [r1, #8]
 8006ad6:	690b      	ldr	r3, [r1, #16]
 8006ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bfb8      	it	lt
 8006ae0:	4613      	movlt	r3, r2
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ae8:	4607      	mov	r7, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b10a      	cbz	r2, 8006af2 <_printf_common+0x26>
 8006aee:	3301      	adds	r3, #1
 8006af0:	6033      	str	r3, [r6, #0]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	0699      	lsls	r1, r3, #26
 8006af6:	bf42      	ittt	mi
 8006af8:	6833      	ldrmi	r3, [r6, #0]
 8006afa:	3302      	addmi	r3, #2
 8006afc:	6033      	strmi	r3, [r6, #0]
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	f015 0506 	ands.w	r5, r5, #6
 8006b04:	d106      	bne.n	8006b14 <_printf_common+0x48>
 8006b06:	f104 0a19 	add.w	sl, r4, #25
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	6832      	ldr	r2, [r6, #0]
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dc26      	bgt.n	8006b62 <_printf_common+0x96>
 8006b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b18:	1e13      	subs	r3, r2, #0
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	bf18      	it	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	0692      	lsls	r2, r2, #26
 8006b22:	d42b      	bmi.n	8006b7c <_printf_common+0xb0>
 8006b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d01e      	beq.n	8006b70 <_printf_common+0xa4>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	f003 0306 	and.w	r3, r3, #6
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	bf02      	ittt	eq
 8006b3e:	68e5      	ldreq	r5, [r4, #12]
 8006b40:	6833      	ldreq	r3, [r6, #0]
 8006b42:	1aed      	subeq	r5, r5, r3
 8006b44:	68a3      	ldr	r3, [r4, #8]
 8006b46:	bf0c      	ite	eq
 8006b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b4c:	2500      	movne	r5, #0
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	bfc4      	itt	gt
 8006b52:	1a9b      	subgt	r3, r3, r2
 8006b54:	18ed      	addgt	r5, r5, r3
 8006b56:	2600      	movs	r6, #0
 8006b58:	341a      	adds	r4, #26
 8006b5a:	42b5      	cmp	r5, r6
 8006b5c:	d11a      	bne.n	8006b94 <_printf_common+0xc8>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e008      	b.n	8006b74 <_printf_common+0xa8>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4652      	mov	r2, sl
 8006b66:	4649      	mov	r1, r9
 8006b68:	4638      	mov	r0, r7
 8006b6a:	47c0      	blx	r8
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d103      	bne.n	8006b78 <_printf_common+0xac>
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7c6      	b.n	8006b0a <_printf_common+0x3e>
 8006b7c:	18e1      	adds	r1, r4, r3
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	2030      	movs	r0, #48	; 0x30
 8006b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b86:	4422      	add	r2, r4
 8006b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b90:	3302      	adds	r3, #2
 8006b92:	e7c7      	b.n	8006b24 <_printf_common+0x58>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4622      	mov	r2, r4
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d0e6      	beq.n	8006b70 <_printf_common+0xa4>
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7d9      	b.n	8006b5a <_printf_common+0x8e>
	...

08006ba8 <_printf_i>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	7e0f      	ldrb	r7, [r1, #24]
 8006bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bb0:	2f78      	cmp	r7, #120	; 0x78
 8006bb2:	4691      	mov	r9, r2
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	469a      	mov	sl, r3
 8006bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bbe:	d807      	bhi.n	8006bd0 <_printf_i+0x28>
 8006bc0:	2f62      	cmp	r7, #98	; 0x62
 8006bc2:	d80a      	bhi.n	8006bda <_printf_i+0x32>
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	f000 80d4 	beq.w	8006d72 <_printf_i+0x1ca>
 8006bca:	2f58      	cmp	r7, #88	; 0x58
 8006bcc:	f000 80c0 	beq.w	8006d50 <_printf_i+0x1a8>
 8006bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bd8:	e03a      	b.n	8006c50 <_printf_i+0xa8>
 8006bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bde:	2b15      	cmp	r3, #21
 8006be0:	d8f6      	bhi.n	8006bd0 <_printf_i+0x28>
 8006be2:	a101      	add	r1, pc, #4	; (adr r1, 8006be8 <_printf_i+0x40>)
 8006be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006bd1 	.word	0x08006bd1
 8006bf4:	08006bd1 	.word	0x08006bd1
 8006bf8:	08006bd1 	.word	0x08006bd1
 8006bfc:	08006bd1 	.word	0x08006bd1
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006bd1 	.word	0x08006bd1
 8006c08:	08006bd1 	.word	0x08006bd1
 8006c0c:	08006bd1 	.word	0x08006bd1
 8006c10:	08006bd1 	.word	0x08006bd1
 8006c14:	08006d59 	.word	0x08006d59
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006d13 	.word	0x08006d13
 8006c20:	08006bd1 	.word	0x08006bd1
 8006c24:	08006bd1 	.word	0x08006bd1
 8006c28:	08006d7b 	.word	0x08006d7b
 8006c2c:	08006bd1 	.word	0x08006bd1
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006bd1 	.word	0x08006bd1
 8006c38:	08006bd1 	.word	0x08006bd1
 8006c3c:	08006d1b 	.word	0x08006d1b
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	602a      	str	r2, [r5, #0]
 8006c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c50:	2301      	movs	r3, #1
 8006c52:	e09f      	b.n	8006d94 <_printf_i+0x1ec>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	0607      	lsls	r7, r0, #24
 8006c5a:	f103 0104 	add.w	r1, r3, #4
 8006c5e:	6029      	str	r1, [r5, #0]
 8006c60:	d501      	bpl.n	8006c66 <_printf_i+0xbe>
 8006c62:	681e      	ldr	r6, [r3, #0]
 8006c64:	e003      	b.n	8006c6e <_printf_i+0xc6>
 8006c66:	0646      	lsls	r6, r0, #25
 8006c68:	d5fb      	bpl.n	8006c62 <_printf_i+0xba>
 8006c6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	da03      	bge.n	8006c7a <_printf_i+0xd2>
 8006c72:	232d      	movs	r3, #45	; 0x2d
 8006c74:	4276      	negs	r6, r6
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7a:	485a      	ldr	r0, [pc, #360]	; (8006de4 <_printf_i+0x23c>)
 8006c7c:	230a      	movs	r3, #10
 8006c7e:	e012      	b.n	8006ca6 <_printf_i+0xfe>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	1d19      	adds	r1, r3, #4
 8006c86:	6029      	str	r1, [r5, #0]
 8006c88:	0605      	lsls	r5, r0, #24
 8006c8a:	d501      	bpl.n	8006c90 <_printf_i+0xe8>
 8006c8c:	681e      	ldr	r6, [r3, #0]
 8006c8e:	e002      	b.n	8006c96 <_printf_i+0xee>
 8006c90:	0641      	lsls	r1, r0, #25
 8006c92:	d5fb      	bpl.n	8006c8c <_printf_i+0xe4>
 8006c94:	881e      	ldrh	r6, [r3, #0]
 8006c96:	4853      	ldr	r0, [pc, #332]	; (8006de4 <_printf_i+0x23c>)
 8006c98:	2f6f      	cmp	r7, #111	; 0x6f
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2308      	moveq	r3, #8
 8006c9e:	230a      	movne	r3, #10
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ca6:	6865      	ldr	r5, [r4, #4]
 8006ca8:	60a5      	str	r5, [r4, #8]
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	bfa2      	ittt	ge
 8006cae:	6821      	ldrge	r1, [r4, #0]
 8006cb0:	f021 0104 	bicge.w	r1, r1, #4
 8006cb4:	6021      	strge	r1, [r4, #0]
 8006cb6:	b90e      	cbnz	r6, 8006cbc <_printf_i+0x114>
 8006cb8:	2d00      	cmp	r5, #0
 8006cba:	d04b      	beq.n	8006d54 <_printf_i+0x1ac>
 8006cbc:	4615      	mov	r5, r2
 8006cbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cc2:	fb03 6711 	mls	r7, r3, r1, r6
 8006cc6:	5dc7      	ldrb	r7, [r0, r7]
 8006cc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ccc:	4637      	mov	r7, r6
 8006cce:	42bb      	cmp	r3, r7
 8006cd0:	460e      	mov	r6, r1
 8006cd2:	d9f4      	bls.n	8006cbe <_printf_i+0x116>
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d10b      	bne.n	8006cf0 <_printf_i+0x148>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	07de      	lsls	r6, r3, #31
 8006cdc:	d508      	bpl.n	8006cf0 <_printf_i+0x148>
 8006cde:	6923      	ldr	r3, [r4, #16]
 8006ce0:	6861      	ldr	r1, [r4, #4]
 8006ce2:	4299      	cmp	r1, r3
 8006ce4:	bfde      	ittt	le
 8006ce6:	2330      	movle	r3, #48	; 0x30
 8006ce8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cf0:	1b52      	subs	r2, r2, r5
 8006cf2:	6122      	str	r2, [r4, #16]
 8006cf4:	f8cd a000 	str.w	sl, [sp]
 8006cf8:	464b      	mov	r3, r9
 8006cfa:	aa03      	add	r2, sp, #12
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4640      	mov	r0, r8
 8006d00:	f7ff fee4 	bl	8006acc <_printf_common>
 8006d04:	3001      	adds	r0, #1
 8006d06:	d14a      	bne.n	8006d9e <_printf_i+0x1f6>
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	b004      	add	sp, #16
 8006d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f043 0320 	orr.w	r3, r3, #32
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	4833      	ldr	r0, [pc, #204]	; (8006de8 <_printf_i+0x240>)
 8006d1c:	2778      	movs	r7, #120	; 0x78
 8006d1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	6829      	ldr	r1, [r5, #0]
 8006d26:	061f      	lsls	r7, r3, #24
 8006d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d2c:	d402      	bmi.n	8006d34 <_printf_i+0x18c>
 8006d2e:	065f      	lsls	r7, r3, #25
 8006d30:	bf48      	it	mi
 8006d32:	b2b6      	uxthmi	r6, r6
 8006d34:	07df      	lsls	r7, r3, #31
 8006d36:	bf48      	it	mi
 8006d38:	f043 0320 	orrmi.w	r3, r3, #32
 8006d3c:	6029      	str	r1, [r5, #0]
 8006d3e:	bf48      	it	mi
 8006d40:	6023      	strmi	r3, [r4, #0]
 8006d42:	b91e      	cbnz	r6, 8006d4c <_printf_i+0x1a4>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	f023 0320 	bic.w	r3, r3, #32
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	e7a7      	b.n	8006ca0 <_printf_i+0xf8>
 8006d50:	4824      	ldr	r0, [pc, #144]	; (8006de4 <_printf_i+0x23c>)
 8006d52:	e7e4      	b.n	8006d1e <_printf_i+0x176>
 8006d54:	4615      	mov	r5, r2
 8006d56:	e7bd      	b.n	8006cd4 <_printf_i+0x12c>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	6826      	ldr	r6, [r4, #0]
 8006d5c:	6961      	ldr	r1, [r4, #20]
 8006d5e:	1d18      	adds	r0, r3, #4
 8006d60:	6028      	str	r0, [r5, #0]
 8006d62:	0635      	lsls	r5, r6, #24
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	d501      	bpl.n	8006d6c <_printf_i+0x1c4>
 8006d68:	6019      	str	r1, [r3, #0]
 8006d6a:	e002      	b.n	8006d72 <_printf_i+0x1ca>
 8006d6c:	0670      	lsls	r0, r6, #25
 8006d6e:	d5fb      	bpl.n	8006d68 <_printf_i+0x1c0>
 8006d70:	8019      	strh	r1, [r3, #0]
 8006d72:	2300      	movs	r3, #0
 8006d74:	6123      	str	r3, [r4, #16]
 8006d76:	4615      	mov	r5, r2
 8006d78:	e7bc      	b.n	8006cf4 <_printf_i+0x14c>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	1d1a      	adds	r2, r3, #4
 8006d7e:	602a      	str	r2, [r5, #0]
 8006d80:	681d      	ldr	r5, [r3, #0]
 8006d82:	6862      	ldr	r2, [r4, #4]
 8006d84:	2100      	movs	r1, #0
 8006d86:	4628      	mov	r0, r5
 8006d88:	f7f9 fa3a 	bl	8000200 <memchr>
 8006d8c:	b108      	cbz	r0, 8006d92 <_printf_i+0x1ea>
 8006d8e:	1b40      	subs	r0, r0, r5
 8006d90:	6060      	str	r0, [r4, #4]
 8006d92:	6863      	ldr	r3, [r4, #4]
 8006d94:	6123      	str	r3, [r4, #16]
 8006d96:	2300      	movs	r3, #0
 8006d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d9c:	e7aa      	b.n	8006cf4 <_printf_i+0x14c>
 8006d9e:	6923      	ldr	r3, [r4, #16]
 8006da0:	462a      	mov	r2, r5
 8006da2:	4649      	mov	r1, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	47d0      	blx	sl
 8006da8:	3001      	adds	r0, #1
 8006daa:	d0ad      	beq.n	8006d08 <_printf_i+0x160>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	079b      	lsls	r3, r3, #30
 8006db0:	d413      	bmi.n	8006dda <_printf_i+0x232>
 8006db2:	68e0      	ldr	r0, [r4, #12]
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	4298      	cmp	r0, r3
 8006db8:	bfb8      	it	lt
 8006dba:	4618      	movlt	r0, r3
 8006dbc:	e7a6      	b.n	8006d0c <_printf_i+0x164>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	47d0      	blx	sl
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d09d      	beq.n	8006d08 <_printf_i+0x160>
 8006dcc:	3501      	adds	r5, #1
 8006dce:	68e3      	ldr	r3, [r4, #12]
 8006dd0:	9903      	ldr	r1, [sp, #12]
 8006dd2:	1a5b      	subs	r3, r3, r1
 8006dd4:	42ab      	cmp	r3, r5
 8006dd6:	dcf2      	bgt.n	8006dbe <_printf_i+0x216>
 8006dd8:	e7eb      	b.n	8006db2 <_printf_i+0x20a>
 8006dda:	2500      	movs	r5, #0
 8006ddc:	f104 0619 	add.w	r6, r4, #25
 8006de0:	e7f5      	b.n	8006dce <_printf_i+0x226>
 8006de2:	bf00      	nop
 8006de4:	08007499 	.word	0x08007499
 8006de8:	080074aa 	.word	0x080074aa

08006dec <__swbuf_r>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	460e      	mov	r6, r1
 8006df0:	4614      	mov	r4, r2
 8006df2:	4605      	mov	r5, r0
 8006df4:	b118      	cbz	r0, 8006dfe <__swbuf_r+0x12>
 8006df6:	6a03      	ldr	r3, [r0, #32]
 8006df8:	b90b      	cbnz	r3, 8006dfe <__swbuf_r+0x12>
 8006dfa:	f7fe f9bd 	bl	8005178 <__sinit>
 8006dfe:	69a3      	ldr	r3, [r4, #24]
 8006e00:	60a3      	str	r3, [r4, #8]
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	071a      	lsls	r2, r3, #28
 8006e06:	d525      	bpl.n	8006e54 <__swbuf_r+0x68>
 8006e08:	6923      	ldr	r3, [r4, #16]
 8006e0a:	b31b      	cbz	r3, 8006e54 <__swbuf_r+0x68>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	6922      	ldr	r2, [r4, #16]
 8006e10:	1a98      	subs	r0, r3, r2
 8006e12:	6963      	ldr	r3, [r4, #20]
 8006e14:	b2f6      	uxtb	r6, r6
 8006e16:	4283      	cmp	r3, r0
 8006e18:	4637      	mov	r7, r6
 8006e1a:	dc04      	bgt.n	8006e26 <__swbuf_r+0x3a>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f7ff fc84 	bl	800672c <_fflush_r>
 8006e24:	b9e0      	cbnz	r0, 8006e60 <__swbuf_r+0x74>
 8006e26:	68a3      	ldr	r3, [r4, #8]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	60a3      	str	r3, [r4, #8]
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	6022      	str	r2, [r4, #0]
 8006e32:	701e      	strb	r6, [r3, #0]
 8006e34:	6962      	ldr	r2, [r4, #20]
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d004      	beq.n	8006e46 <__swbuf_r+0x5a>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	07db      	lsls	r3, r3, #31
 8006e40:	d506      	bpl.n	8006e50 <__swbuf_r+0x64>
 8006e42:	2e0a      	cmp	r6, #10
 8006e44:	d104      	bne.n	8006e50 <__swbuf_r+0x64>
 8006e46:	4621      	mov	r1, r4
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7ff fc6f 	bl	800672c <_fflush_r>
 8006e4e:	b938      	cbnz	r0, 8006e60 <__swbuf_r+0x74>
 8006e50:	4638      	mov	r0, r7
 8006e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 f806 	bl	8006e68 <__swsetup_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0d5      	beq.n	8006e0c <__swbuf_r+0x20>
 8006e60:	f04f 37ff 	mov.w	r7, #4294967295
 8006e64:	e7f4      	b.n	8006e50 <__swbuf_r+0x64>
	...

08006e68 <__swsetup_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <__swsetup_r+0xac>)
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	460c      	mov	r4, r1
 8006e72:	b118      	cbz	r0, 8006e7c <__swsetup_r+0x14>
 8006e74:	6a03      	ldr	r3, [r0, #32]
 8006e76:	b90b      	cbnz	r3, 8006e7c <__swsetup_r+0x14>
 8006e78:	f7fe f97e 	bl	8005178 <__sinit>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e82:	0718      	lsls	r0, r3, #28
 8006e84:	d422      	bmi.n	8006ecc <__swsetup_r+0x64>
 8006e86:	06d9      	lsls	r1, r3, #27
 8006e88:	d407      	bmi.n	8006e9a <__swsetup_r+0x32>
 8006e8a:	2309      	movs	r3, #9
 8006e8c:	602b      	str	r3, [r5, #0]
 8006e8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	e034      	b.n	8006f04 <__swsetup_r+0x9c>
 8006e9a:	0758      	lsls	r0, r3, #29
 8006e9c:	d512      	bpl.n	8006ec4 <__swsetup_r+0x5c>
 8006e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ea0:	b141      	cbz	r1, 8006eb4 <__swsetup_r+0x4c>
 8006ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ea6:	4299      	cmp	r1, r3
 8006ea8:	d002      	beq.n	8006eb0 <__swsetup_r+0x48>
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f7fe fa9c 	bl	80053e8 <_free_r>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6363      	str	r3, [r4, #52]	; 0x34
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6063      	str	r3, [r4, #4]
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	f043 0308 	orr.w	r3, r3, #8
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	b94b      	cbnz	r3, 8006ee4 <__swsetup_r+0x7c>
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eda:	d003      	beq.n	8006ee4 <__swsetup_r+0x7c>
 8006edc:	4621      	mov	r1, r4
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f884 	bl	8006fec <__smakebuf_r>
 8006ee4:	89a0      	ldrh	r0, [r4, #12]
 8006ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eea:	f010 0301 	ands.w	r3, r0, #1
 8006eee:	d00a      	beq.n	8006f06 <__swsetup_r+0x9e>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60a3      	str	r3, [r4, #8]
 8006ef4:	6963      	ldr	r3, [r4, #20]
 8006ef6:	425b      	negs	r3, r3
 8006ef8:	61a3      	str	r3, [r4, #24]
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	b943      	cbnz	r3, 8006f10 <__swsetup_r+0xa8>
 8006efe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f02:	d1c4      	bne.n	8006e8e <__swsetup_r+0x26>
 8006f04:	bd38      	pop	{r3, r4, r5, pc}
 8006f06:	0781      	lsls	r1, r0, #30
 8006f08:	bf58      	it	pl
 8006f0a:	6963      	ldrpl	r3, [r4, #20]
 8006f0c:	60a3      	str	r3, [r4, #8]
 8006f0e:	e7f4      	b.n	8006efa <__swsetup_r+0x92>
 8006f10:	2000      	movs	r0, #0
 8006f12:	e7f7      	b.n	8006f04 <__swsetup_r+0x9c>
 8006f14:	200001d0 	.word	0x200001d0

08006f18 <_raise_r>:
 8006f18:	291f      	cmp	r1, #31
 8006f1a:	b538      	push	{r3, r4, r5, lr}
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	460d      	mov	r5, r1
 8006f20:	d904      	bls.n	8006f2c <_raise_r+0x14>
 8006f22:	2316      	movs	r3, #22
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f2e:	b112      	cbz	r2, 8006f36 <_raise_r+0x1e>
 8006f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f34:	b94b      	cbnz	r3, 8006f4a <_raise_r+0x32>
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f830 	bl	8006f9c <_getpid_r>
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	4601      	mov	r1, r0
 8006f40:	4620      	mov	r0, r4
 8006f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f46:	f000 b817 	b.w	8006f78 <_kill_r>
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d00a      	beq.n	8006f64 <_raise_r+0x4c>
 8006f4e:	1c59      	adds	r1, r3, #1
 8006f50:	d103      	bne.n	8006f5a <_raise_r+0x42>
 8006f52:	2316      	movs	r3, #22
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	2001      	movs	r0, #1
 8006f58:	e7e7      	b.n	8006f2a <_raise_r+0x12>
 8006f5a:	2400      	movs	r4, #0
 8006f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f60:	4628      	mov	r0, r5
 8006f62:	4798      	blx	r3
 8006f64:	2000      	movs	r0, #0
 8006f66:	e7e0      	b.n	8006f2a <_raise_r+0x12>

08006f68 <raise>:
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <raise+0xc>)
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f7ff bfd3 	b.w	8006f18 <_raise_r>
 8006f72:	bf00      	nop
 8006f74:	200001d0 	.word	0x200001d0

08006f78 <_kill_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	; (8006f98 <_kill_r+0x20>)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	602b      	str	r3, [r5, #0]
 8006f86:	f7fa fdcf 	bl	8001b28 <_kill>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d102      	bne.n	8006f94 <_kill_r+0x1c>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	b103      	cbz	r3, 8006f94 <_kill_r+0x1c>
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	bd38      	pop	{r3, r4, r5, pc}
 8006f96:	bf00      	nop
 8006f98:	200005d0 	.word	0x200005d0

08006f9c <_getpid_r>:
 8006f9c:	f7fa bdbc 	b.w	8001b18 <_getpid>

08006fa0 <__swhatbuf_r>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	b096      	sub	sp, #88	; 0x58
 8006fac:	4615      	mov	r5, r2
 8006fae:	461e      	mov	r6, r3
 8006fb0:	da0d      	bge.n	8006fce <__swhatbuf_r+0x2e>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006fc2:	2340      	movne	r3, #64	; 0x40
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	6031      	str	r1, [r6, #0]
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	b016      	add	sp, #88	; 0x58
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	466a      	mov	r2, sp
 8006fd0:	f000 f848 	bl	8007064 <_fstat_r>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	dbec      	blt.n	8006fb2 <__swhatbuf_r+0x12>
 8006fd8:	9901      	ldr	r1, [sp, #4]
 8006fda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006fde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006fe2:	4259      	negs	r1, r3
 8006fe4:	4159      	adcs	r1, r3
 8006fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fea:	e7eb      	b.n	8006fc4 <__swhatbuf_r+0x24>

08006fec <__smakebuf_r>:
 8006fec:	898b      	ldrh	r3, [r1, #12]
 8006fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ff0:	079d      	lsls	r5, r3, #30
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	d507      	bpl.n	8007008 <__smakebuf_r+0x1c>
 8006ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	2301      	movs	r3, #1
 8007002:	6163      	str	r3, [r4, #20]
 8007004:	b002      	add	sp, #8
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	ab01      	add	r3, sp, #4
 800700a:	466a      	mov	r2, sp
 800700c:	f7ff ffc8 	bl	8006fa0 <__swhatbuf_r>
 8007010:	9900      	ldr	r1, [sp, #0]
 8007012:	4605      	mov	r5, r0
 8007014:	4630      	mov	r0, r6
 8007016:	f7fe fdab 	bl	8005b70 <_malloc_r>
 800701a:	b948      	cbnz	r0, 8007030 <__smakebuf_r+0x44>
 800701c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007020:	059a      	lsls	r2, r3, #22
 8007022:	d4ef      	bmi.n	8007004 <__smakebuf_r+0x18>
 8007024:	f023 0303 	bic.w	r3, r3, #3
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	e7e3      	b.n	8006ff8 <__smakebuf_r+0xc>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	6020      	str	r0, [r4, #0]
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	9b00      	ldr	r3, [sp, #0]
 800703c:	6163      	str	r3, [r4, #20]
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	6120      	str	r0, [r4, #16]
 8007042:	b15b      	cbz	r3, 800705c <__smakebuf_r+0x70>
 8007044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007048:	4630      	mov	r0, r6
 800704a:	f000 f81d 	bl	8007088 <_isatty_r>
 800704e:	b128      	cbz	r0, 800705c <__smakebuf_r+0x70>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	431d      	orrs	r5, r3
 8007060:	81a5      	strh	r5, [r4, #12]
 8007062:	e7cf      	b.n	8007004 <__smakebuf_r+0x18>

08007064 <_fstat_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	; (8007084 <_fstat_r+0x20>)
 8007068:	2300      	movs	r3, #0
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	f7fa fdb8 	bl	8001be6 <_fstat>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	d102      	bne.n	8007080 <_fstat_r+0x1c>
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	b103      	cbz	r3, 8007080 <_fstat_r+0x1c>
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	bd38      	pop	{r3, r4, r5, pc}
 8007082:	bf00      	nop
 8007084:	200005d0 	.word	0x200005d0

08007088 <_isatty_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d06      	ldr	r5, [pc, #24]	; (80070a4 <_isatty_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f7fa fdb7 	bl	8001c06 <_isatty>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_isatty_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_isatty_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	200005d0 	.word	0x200005d0

080070a8 <_init>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr

080070b4 <_fini>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	bf00      	nop
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr
